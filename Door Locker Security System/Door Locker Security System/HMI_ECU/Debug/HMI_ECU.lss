
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003820  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000b6  00800060  00003820  000038b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800116  00800116  0000396a  2**0
                  ALLOC
  3 .stab         00002de4  00000000  00000000  0000396c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010cd  00000000  00000000  00006750  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000781d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000795d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00007acd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009716  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a601  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b3b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b510  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b79d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bf6b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 af 19 	jmp	0x335e	; 0x335e <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e2       	ldi	r30, 0x20	; 32
      68:	f8 e3       	ldi	r31, 0x38	; 56
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 31       	cpi	r26, 0x1E	; 30
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 01 06 	call	0xc02	; 0xc02 <main>
      8a:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 92 1b 	jmp	0x3724	; 0x3724 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e0       	ldi	r26, 0x00	; 0
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 92 1b 	jmp	0x3724	; 0x3724 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 ae 1b 	jmp	0x375c	; 0x375c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 9e 1b 	jmp	0x373c	; 0x373c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ba 1b 	jmp	0x3774	; 0x3774 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 be 1b 	jmp	0x377c	; 0x377c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <tick>:

uint16 g_tick = 0;
uint8 *pass1,*pass2;

void tick(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
     b4e:	80 91 16 01 	lds	r24, 0x0116
     b52:	90 91 17 01 	lds	r25, 0x0117
     b56:	01 96       	adiw	r24, 0x01	; 1
     b58:	90 93 17 01 	sts	0x0117, r25
     b5c:	80 93 16 01 	sts	0x0116, r24
}
     b60:	cf 91       	pop	r28
     b62:	df 91       	pop	r29
     b64:	08 95       	ret

00000b66 <enterPassword>:

void enterPassword(uint8 *password1)
{
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	df 93       	push	r29
     b6c:	cf 93       	push	r28
     b6e:	00 d0       	rcall	.+0      	; 0xb70 <enterPassword+0xa>
     b70:	0f 92       	push	r0
     b72:	cd b7       	in	r28, 0x3d	; 61
     b74:	de b7       	in	r29, 0x3e	; 62
     b76:	9b 83       	std	Y+3, r25	; 0x03
     b78:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0; i<5; i++)
     b7a:	19 82       	std	Y+1, r1	; 0x01
     b7c:	12 c0       	rjmp	.+36     	; 0xba2 <enterPassword+0x3c>
	{
		password1[i] = KEYPAD_getPressedKey();
     b7e:	89 81       	ldd	r24, Y+1	; 0x01
     b80:	28 2f       	mov	r18, r24
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	8a 81       	ldd	r24, Y+2	; 0x02
     b86:	9b 81       	ldd	r25, Y+3	; 0x03
     b88:	8c 01       	movw	r16, r24
     b8a:	02 0f       	add	r16, r18
     b8c:	13 1f       	adc	r17, r19
     b8e:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <KEYPAD_getPressedKey>
     b92:	f8 01       	movw	r30, r16
     b94:	80 83       	st	Z, r24
		//_delay_ms(1000);
		LCD_displayCharacter('*');
     b96:	8a e2       	ldi	r24, 0x2A	; 42
     b98:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayCharacter>
	g_tick++;
}

void enterPassword(uint8 *password1)
{
	for(uint8 i=0; i<5; i++)
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	8f 5f       	subi	r24, 0xFF	; 255
     ba0:	89 83       	std	Y+1, r24	; 0x01
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	85 30       	cpi	r24, 0x05	; 5
     ba6:	58 f3       	brcs	.-42     	; 0xb7e <enterPassword+0x18>
		//_delay_ms(1000);
		LCD_displayCharacter('*');
		//_delay_ms(500);
	}
	/*wait for enter button to be pressed*/
	while(KEYPAD_getPressedKey() != '=');
     ba8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <KEYPAD_getPressedKey>
     bac:	8d 33       	cpi	r24, 0x3D	; 61
     bae:	e1 f7       	brne	.-8      	; 0xba8 <enterPassword+0x42>
	//_delay_ms(1000);
}
     bb0:	0f 90       	pop	r0
     bb2:	0f 90       	pop	r0
     bb4:	0f 90       	pop	r0
     bb6:	cf 91       	pop	r28
     bb8:	df 91       	pop	r29
     bba:	1f 91       	pop	r17
     bbc:	0f 91       	pop	r16
     bbe:	08 95       	ret

00000bc0 <sendPassword>:

void sendPassword(uint8 *pass)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	00 d0       	rcall	.+0      	; 0xbc6 <sendPassword+0x6>
     bc6:	0f 92       	push	r0
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	9b 83       	std	Y+3, r25	; 0x03
     bce:	8a 83       	std	Y+2, r24	; 0x02
	for(uint8 i=0; i < 5;i++)/*loop for send the password*/
     bd0:	19 82       	std	Y+1, r1	; 0x01
     bd2:	0e c0       	rjmp	.+28     	; 0xbf0 <sendPassword+0x30>
	{
		UART_sendByte(pass[i]);/* send the password by U-ART byte by byte */
     bd4:	89 81       	ldd	r24, Y+1	; 0x01
     bd6:	28 2f       	mov	r18, r24
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	8a 81       	ldd	r24, Y+2	; 0x02
     bdc:	9b 81       	ldd	r25, Y+3	; 0x03
     bde:	fc 01       	movw	r30, r24
     be0:	e2 0f       	add	r30, r18
     be2:	f3 1f       	adc	r31, r19
     be4:	80 81       	ld	r24, Z
     be6:	0e 94 de 1a 	call	0x35bc	; 0x35bc <UART_sendByte>
	//_delay_ms(1000);
}

void sendPassword(uint8 *pass)
{
	for(uint8 i=0; i < 5;i++)/*loop for send the password*/
     bea:	89 81       	ldd	r24, Y+1	; 0x01
     bec:	8f 5f       	subi	r24, 0xFF	; 255
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	89 81       	ldd	r24, Y+1	; 0x01
     bf2:	85 30       	cpi	r24, 0x05	; 5
     bf4:	78 f3       	brcs	.-34     	; 0xbd4 <sendPassword+0x14>
	{
		UART_sendByte(pass[i]);/* send the password by U-ART byte by byte */
	}
	//UART_sendString(pass);
}
     bf6:	0f 90       	pop	r0
     bf8:	0f 90       	pop	r0
     bfa:	0f 90       	pop	r0
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <main>:


int main(void)
{
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	cd 56       	subi	r28, 0x6D	; 109
     c10:	d0 40       	sbci	r29, 0x00	; 0
     c12:	0f b6       	in	r0, 0x3f	; 63
     c14:	f8 94       	cli
     c16:	de bf       	out	0x3e, r29	; 62
     c18:	0f be       	out	0x3f, r0	; 63
     c1a:	cd bf       	out	0x3d, r28	; 61
	uint8 key_hmi;
	uint8 false_attempts=0;
     c1c:	fe 01       	movw	r30, r28
     c1e:	eb 5a       	subi	r30, 0xAB	; 171
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	10 82       	st	Z, r1

	SREG |= (1<<7); //enable i_bit
     c24:	af e5       	ldi	r26, 0x5F	; 95
     c26:	b0 e0       	ldi	r27, 0x00	; 0
     c28:	ef e5       	ldi	r30, 0x5F	; 95
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	80 68       	ori	r24, 0x80	; 128
     c30:	8c 93       	st	X, r24

	Timer1_ConfigType timer1_config_type = {0,0,F_CPU_1024,NORMAL};
     c32:	ce 01       	movw	r24, r28
     c34:	89 5a       	subi	r24, 0xA9	; 169
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	a6 96       	adiw	r28, 0x26	; 38
     c3a:	9f af       	std	Y+63, r25	; 0x3f
     c3c:	8e af       	std	Y+62, r24	; 0x3e
     c3e:	a6 97       	sbiw	r28, 0x26	; 38
     c40:	8f e0       	ldi	r24, 0x0F	; 15
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	a8 96       	adiw	r28, 0x28	; 40
     c46:	9f af       	std	Y+63, r25	; 0x3f
     c48:	8e af       	std	Y+62, r24	; 0x3e
     c4a:	a8 97       	sbiw	r28, 0x28	; 40
     c4c:	96 e0       	ldi	r25, 0x06	; 6
     c4e:	a9 96       	adiw	r28, 0x29	; 41
     c50:	9f af       	std	Y+63, r25	; 0x3f
     c52:	a9 97       	sbiw	r28, 0x29	; 41
     c54:	a8 96       	adiw	r28, 0x28	; 40
     c56:	ee ad       	ldd	r30, Y+62	; 0x3e
     c58:	ff ad       	ldd	r31, Y+63	; 0x3f
     c5a:	a8 97       	sbiw	r28, 0x28	; 40
     c5c:	00 80       	ld	r0, Z
     c5e:	a8 96       	adiw	r28, 0x28	; 40
     c60:	8e ad       	ldd	r24, Y+62	; 0x3e
     c62:	9f ad       	ldd	r25, Y+63	; 0x3f
     c64:	a8 97       	sbiw	r28, 0x28	; 40
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	a8 96       	adiw	r28, 0x28	; 40
     c6a:	9f af       	std	Y+63, r25	; 0x3f
     c6c:	8e af       	std	Y+62, r24	; 0x3e
     c6e:	a8 97       	sbiw	r28, 0x28	; 40
     c70:	a6 96       	adiw	r28, 0x26	; 38
     c72:	ee ad       	ldd	r30, Y+62	; 0x3e
     c74:	ff ad       	ldd	r31, Y+63	; 0x3f
     c76:	a6 97       	sbiw	r28, 0x26	; 38
     c78:	00 82       	st	Z, r0
     c7a:	a6 96       	adiw	r28, 0x26	; 38
     c7c:	8e ad       	ldd	r24, Y+62	; 0x3e
     c7e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c80:	a6 97       	sbiw	r28, 0x26	; 38
     c82:	01 96       	adiw	r24, 0x01	; 1
     c84:	a6 96       	adiw	r28, 0x26	; 38
     c86:	9f af       	std	Y+63, r25	; 0x3f
     c88:	8e af       	std	Y+62, r24	; 0x3e
     c8a:	a6 97       	sbiw	r28, 0x26	; 38
     c8c:	a9 96       	adiw	r28, 0x29	; 41
     c8e:	9f ad       	ldd	r25, Y+63	; 0x3f
     c90:	a9 97       	sbiw	r28, 0x29	; 41
     c92:	91 50       	subi	r25, 0x01	; 1
     c94:	a9 96       	adiw	r28, 0x29	; 41
     c96:	9f af       	std	Y+63, r25	; 0x3f
     c98:	a9 97       	sbiw	r28, 0x29	; 41
     c9a:	a9 96       	adiw	r28, 0x29	; 41
     c9c:	ef ad       	ldd	r30, Y+63	; 0x3f
     c9e:	a9 97       	sbiw	r28, 0x29	; 41
     ca0:	ee 23       	and	r30, r30
     ca2:	c1 f6       	brne	.-80     	; 0xc54 <main+0x52>

	UART_ConfigType uart_config_type = {eight_bits,disabled,one_bit,9600};
     ca4:	ce 01       	movw	r24, r28
     ca6:	83 5a       	subi	r24, 0xA3	; 163
     ca8:	9f 4f       	sbci	r25, 0xFF	; 255
     caa:	ab 96       	adiw	r28, 0x2b	; 43
     cac:	9f af       	std	Y+63, r25	; 0x3f
     cae:	8e af       	std	Y+62, r24	; 0x3e
     cb0:	ab 97       	sbiw	r28, 0x2b	; 43
     cb2:	88 e0       	ldi	r24, 0x08	; 8
     cb4:	91 e0       	ldi	r25, 0x01	; 1
     cb6:	ad 96       	adiw	r28, 0x2d	; 45
     cb8:	9f af       	std	Y+63, r25	; 0x3f
     cba:	8e af       	std	Y+62, r24	; 0x3e
     cbc:	ad 97       	sbiw	r28, 0x2d	; 45
     cbe:	97 e0       	ldi	r25, 0x07	; 7
     cc0:	ae 96       	adiw	r28, 0x2e	; 46
     cc2:	9f af       	std	Y+63, r25	; 0x3f
     cc4:	ae 97       	sbiw	r28, 0x2e	; 46
     cc6:	ad 96       	adiw	r28, 0x2d	; 45
     cc8:	ee ad       	ldd	r30, Y+62	; 0x3e
     cca:	ff ad       	ldd	r31, Y+63	; 0x3f
     ccc:	ad 97       	sbiw	r28, 0x2d	; 45
     cce:	00 80       	ld	r0, Z
     cd0:	ad 96       	adiw	r28, 0x2d	; 45
     cd2:	8e ad       	ldd	r24, Y+62	; 0x3e
     cd4:	9f ad       	ldd	r25, Y+63	; 0x3f
     cd6:	ad 97       	sbiw	r28, 0x2d	; 45
     cd8:	01 96       	adiw	r24, 0x01	; 1
     cda:	ad 96       	adiw	r28, 0x2d	; 45
     cdc:	9f af       	std	Y+63, r25	; 0x3f
     cde:	8e af       	std	Y+62, r24	; 0x3e
     ce0:	ad 97       	sbiw	r28, 0x2d	; 45
     ce2:	ab 96       	adiw	r28, 0x2b	; 43
     ce4:	ee ad       	ldd	r30, Y+62	; 0x3e
     ce6:	ff ad       	ldd	r31, Y+63	; 0x3f
     ce8:	ab 97       	sbiw	r28, 0x2b	; 43
     cea:	00 82       	st	Z, r0
     cec:	ab 96       	adiw	r28, 0x2b	; 43
     cee:	8e ad       	ldd	r24, Y+62	; 0x3e
     cf0:	9f ad       	ldd	r25, Y+63	; 0x3f
     cf2:	ab 97       	sbiw	r28, 0x2b	; 43
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	ab 96       	adiw	r28, 0x2b	; 43
     cf8:	9f af       	std	Y+63, r25	; 0x3f
     cfa:	8e af       	std	Y+62, r24	; 0x3e
     cfc:	ab 97       	sbiw	r28, 0x2b	; 43
     cfe:	ae 96       	adiw	r28, 0x2e	; 46
     d00:	9f ad       	ldd	r25, Y+63	; 0x3f
     d02:	ae 97       	sbiw	r28, 0x2e	; 46
     d04:	91 50       	subi	r25, 0x01	; 1
     d06:	ae 96       	adiw	r28, 0x2e	; 46
     d08:	9f af       	std	Y+63, r25	; 0x3f
     d0a:	ae 97       	sbiw	r28, 0x2e	; 46
     d0c:	ae 96       	adiw	r28, 0x2e	; 46
     d0e:	ef ad       	ldd	r30, Y+63	; 0x3f
     d10:	ae 97       	sbiw	r28, 0x2e	; 46
     d12:	ee 23       	and	r30, r30
     d14:	c1 f6       	brne	.-80     	; 0xcc6 <main+0xc4>
	LCD_init();
     d16:	0e 94 23 0f 	call	0x1e46	; 0x1e46 <LCD_init>
	UART_init(&uart_config_type);
     d1a:	ce 01       	movw	r24, r28
     d1c:	83 5a       	subi	r24, 0xA3	; 163
     d1e:	9f 4f       	sbci	r25, 0xFF	; 255
     d20:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <UART_init>
	while(1)
    {
		do
		{
			/*entering pass for first time*/
			LCD_clearScreen();
     d24:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
			LCD_displayString("Plz enter pass:");
     d28:	80 e6       	ldi	r24, 0x60	; 96
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
			LCD_moveCursor(1,0);
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <LCD_moveCursor>
			enterPassword(pass1);
     d38:	80 91 1c 01 	lds	r24, 0x011C
     d3c:	90 91 1d 01 	lds	r25, 0x011D
     d40:	0e 94 b3 05 	call	0xb66	; 0xb66 <enterPassword>
			sendPassword(pass1);
     d44:	80 91 1c 01 	lds	r24, 0x011C
     d48:	90 91 1d 01 	lds	r25, 0x011D
     d4c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sendPassword>

			LCD_clearScreen();
     d50:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>

			LCD_displayString("Plz re-enter the same pass:");
     d54:	80 e7       	ldi	r24, 0x70	; 112
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
			LCD_moveCursor(1,12);
     d5c:	81 e0       	ldi	r24, 0x01	; 1
     d5e:	6c e0       	ldi	r22, 0x0C	; 12
     d60:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <LCD_moveCursor>
			enterPassword(pass2);
     d64:	80 91 1a 01 	lds	r24, 0x011A
     d68:	90 91 1b 01 	lds	r25, 0x011B
     d6c:	0e 94 b3 05 	call	0xb66	; 0xb66 <enterPassword>
			sendPassword(pass2);
     d70:	80 91 1a 01 	lds	r24, 0x011A
     d74:	90 91 1b 01 	lds	r25, 0x011B
     d78:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sendPassword>

			if(UART_recieveByte() == NOT_MATCHING)
     d7c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
     d80:	88 23       	and	r24, r24
     d82:	31 f4       	brne	.+12     	; 0xd90 <main+0x18e>
			{
				LCD_clearScreen();
     d84:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
				LCD_displayString("NOT MATCHING");
     d88:	8c e8       	ldi	r24, 0x8C	; 140
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
				continue;
			}
		}
		while(UART_recieveByte() == NOT_MATCHING);
     d90:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
     d94:	88 23       	and	r24, r24
     d96:	31 f2       	breq	.-116    	; 0xd24 <main+0x122>
     d98:	fe 01       	movw	r30, r28
     d9a:	ef 5a       	subi	r30, 0xAF	; 175
     d9c:	ff 4f       	sbci	r31, 0xFF	; 255
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	a0 ea       	ldi	r26, 0xA0	; 160
     da4:	b1 e4       	ldi	r27, 0x41	; 65
     da6:	80 83       	st	Z, r24
     da8:	91 83       	std	Z+1, r25	; 0x01
     daa:	a2 83       	std	Z+2, r26	; 0x02
     dac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dae:	8e 01       	movw	r16, r28
     db0:	03 5b       	subi	r16, 0xB3	; 179
     db2:	1f 4f       	sbci	r17, 0xFF	; 255
     db4:	fe 01       	movw	r30, r28
     db6:	ef 5a       	subi	r30, 0xAF	; 175
     db8:	ff 4f       	sbci	r31, 0xFF	; 255
     dba:	60 81       	ld	r22, Z
     dbc:	71 81       	ldd	r23, Z+1	; 0x01
     dbe:	82 81       	ldd	r24, Z+2	; 0x02
     dc0:	93 81       	ldd	r25, Z+3	; 0x03
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	4a ef       	ldi	r20, 0xFA	; 250
     dc8:	54 e4       	ldi	r21, 0x44	; 68
     dca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	f8 01       	movw	r30, r16
     dd4:	80 83       	st	Z, r24
     dd6:	91 83       	std	Z+1, r25	; 0x01
     dd8:	a2 83       	std	Z+2, r26	; 0x02
     dda:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ddc:	fe 01       	movw	r30, r28
     dde:	e3 5b       	subi	r30, 0xB3	; 179
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	40 e8       	ldi	r20, 0x80	; 128
     df0:	5f e3       	ldi	r21, 0x3F	; 63
     df2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     df6:	88 23       	and	r24, r24
     df8:	44 f4       	brge	.+16     	; 0xe0a <main+0x208>
		__ticks = 1;
     dfa:	fe 01       	movw	r30, r28
     dfc:	e5 5b       	subi	r30, 0xB5	; 181
     dfe:	ff 4f       	sbci	r31, 0xFF	; 255
     e00:	81 e0       	ldi	r24, 0x01	; 1
     e02:	90 e0       	ldi	r25, 0x00	; 0
     e04:	91 83       	std	Z+1, r25	; 0x01
     e06:	80 83       	st	Z, r24
     e08:	64 c0       	rjmp	.+200    	; 0xed2 <main+0x2d0>
	else if (__tmp > 65535)
     e0a:	fe 01       	movw	r30, r28
     e0c:	e3 5b       	subi	r30, 0xB3	; 179
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	3f ef       	ldi	r19, 0xFF	; 255
     e1c:	4f e7       	ldi	r20, 0x7F	; 127
     e1e:	57 e4       	ldi	r21, 0x47	; 71
     e20:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e24:	18 16       	cp	r1, r24
     e26:	0c f0       	brlt	.+2      	; 0xe2a <main+0x228>
     e28:	43 c0       	rjmp	.+134    	; 0xeb0 <main+0x2ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e2a:	fe 01       	movw	r30, r28
     e2c:	ef 5a       	subi	r30, 0xAF	; 175
     e2e:	ff 4f       	sbci	r31, 0xFF	; 255
     e30:	60 81       	ld	r22, Z
     e32:	71 81       	ldd	r23, Z+1	; 0x01
     e34:	82 81       	ldd	r24, Z+2	; 0x02
     e36:	93 81       	ldd	r25, Z+3	; 0x03
     e38:	20 e0       	ldi	r18, 0x00	; 0
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	40 e2       	ldi	r20, 0x20	; 32
     e3e:	51 e4       	ldi	r21, 0x41	; 65
     e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e44:	dc 01       	movw	r26, r24
     e46:	cb 01       	movw	r24, r22
     e48:	8e 01       	movw	r16, r28
     e4a:	05 5b       	subi	r16, 0xB5	; 181
     e4c:	1f 4f       	sbci	r17, 0xFF	; 255
     e4e:	bc 01       	movw	r22, r24
     e50:	cd 01       	movw	r24, r26
     e52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e56:	dc 01       	movw	r26, r24
     e58:	cb 01       	movw	r24, r22
     e5a:	f8 01       	movw	r30, r16
     e5c:	91 83       	std	Z+1, r25	; 0x01
     e5e:	80 83       	st	Z, r24
     e60:	1f c0       	rjmp	.+62     	; 0xea0 <main+0x29e>
     e62:	fe 01       	movw	r30, r28
     e64:	e7 5b       	subi	r30, 0xB7	; 183
     e66:	ff 4f       	sbci	r31, 0xFF	; 255
     e68:	88 ec       	ldi	r24, 0xC8	; 200
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	91 83       	std	Z+1, r25	; 0x01
     e6e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e70:	fe 01       	movw	r30, r28
     e72:	e7 5b       	subi	r30, 0xB7	; 183
     e74:	ff 4f       	sbci	r31, 0xFF	; 255
     e76:	80 81       	ld	r24, Z
     e78:	91 81       	ldd	r25, Z+1	; 0x01
     e7a:	01 97       	sbiw	r24, 0x01	; 1
     e7c:	f1 f7       	brne	.-4      	; 0xe7a <main+0x278>
     e7e:	fe 01       	movw	r30, r28
     e80:	e7 5b       	subi	r30, 0xB7	; 183
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	91 83       	std	Z+1, r25	; 0x01
     e86:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e88:	de 01       	movw	r26, r28
     e8a:	a5 5b       	subi	r26, 0xB5	; 181
     e8c:	bf 4f       	sbci	r27, 0xFF	; 255
     e8e:	fe 01       	movw	r30, r28
     e90:	e5 5b       	subi	r30, 0xB5	; 181
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	80 81       	ld	r24, Z
     e96:	91 81       	ldd	r25, Z+1	; 0x01
     e98:	01 97       	sbiw	r24, 0x01	; 1
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	9c 93       	st	X, r25
     e9e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea0:	fe 01       	movw	r30, r28
     ea2:	e5 5b       	subi	r30, 0xB5	; 181
     ea4:	ff 4f       	sbci	r31, 0xFF	; 255
     ea6:	80 81       	ld	r24, Z
     ea8:	91 81       	ldd	r25, Z+1	; 0x01
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	d1 f6       	brne	.-76     	; 0xe62 <main+0x260>
     eae:	27 c0       	rjmp	.+78     	; 0xefe <main+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eb0:	8e 01       	movw	r16, r28
     eb2:	05 5b       	subi	r16, 0xB5	; 181
     eb4:	1f 4f       	sbci	r17, 0xFF	; 255
     eb6:	fe 01       	movw	r30, r28
     eb8:	e3 5b       	subi	r30, 0xB3	; 179
     eba:	ff 4f       	sbci	r31, 0xFF	; 255
     ebc:	60 81       	ld	r22, Z
     ebe:	71 81       	ldd	r23, Z+1	; 0x01
     ec0:	82 81       	ldd	r24, Z+2	; 0x02
     ec2:	93 81       	ldd	r25, Z+3	; 0x03
     ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	f8 01       	movw	r30, r16
     ece:	91 83       	std	Z+1, r25	; 0x01
     ed0:	80 83       	st	Z, r24
     ed2:	de 01       	movw	r26, r28
     ed4:	a9 5b       	subi	r26, 0xB9	; 185
     ed6:	bf 4f       	sbci	r27, 0xFF	; 255
     ed8:	fe 01       	movw	r30, r28
     eda:	e5 5b       	subi	r30, 0xB5	; 181
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	80 81       	ld	r24, Z
     ee0:	91 81       	ldd	r25, Z+1	; 0x01
     ee2:	8d 93       	st	X+, r24
     ee4:	9c 93       	st	X, r25
     ee6:	fe 01       	movw	r30, r28
     ee8:	e9 5b       	subi	r30, 0xB9	; 185
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 81       	ld	r24, Z
     eee:	91 81       	ldd	r25, Z+1	; 0x01
     ef0:	01 97       	sbiw	r24, 0x01	; 1
     ef2:	f1 f7       	brne	.-4      	; 0xef0 <main+0x2ee>
     ef4:	fe 01       	movw	r30, r28
     ef6:	e9 5b       	subi	r30, 0xB9	; 185
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	91 83       	std	Z+1, r25	; 0x01
     efc:	80 83       	st	Z, r24
		_delay_ms(20);

		while(1)
		{
			/*STEP 2: Main Options*/
			LCD_clearScreen();
     efe:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
			LCD_displayString("+ : Open Door");
     f02:	89 e9       	ldi	r24, 0x99	; 153
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
			LCD_moveCursor(1,0);
     f0a:	81 e0       	ldi	r24, 0x01	; 1
     f0c:	60 e0       	ldi	r22, 0x00	; 0
     f0e:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <LCD_moveCursor>
			LCD_displayString("- : Change Pass");
     f12:	87 ea       	ldi	r24, 0xA7	; 167
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>

			key_hmi = KEYPAD_getPressedKey();
     f1a:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <KEYPAD_getPressedKey>
     f1e:	fe 01       	movw	r30, r28
     f20:	ea 5a       	subi	r30, 0xAA	; 170
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 83       	st	Z, r24
     f26:	fe 01       	movw	r30, r28
     f28:	ed 5b       	subi	r30, 0xBD	; 189
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 e0       	ldi	r24, 0x00	; 0
     f2e:	90 e0       	ldi	r25, 0x00	; 0
     f30:	aa e7       	ldi	r26, 0x7A	; 122
     f32:	b4 e4       	ldi	r27, 0x44	; 68
     f34:	80 83       	st	Z, r24
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	a2 83       	std	Z+2, r26	; 0x02
     f3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3c:	8e 01       	movw	r16, r28
     f3e:	01 5c       	subi	r16, 0xC1	; 193
     f40:	1f 4f       	sbci	r17, 0xFF	; 255
     f42:	fe 01       	movw	r30, r28
     f44:	ed 5b       	subi	r30, 0xBD	; 189
     f46:	ff 4f       	sbci	r31, 0xFF	; 255
     f48:	60 81       	ld	r22, Z
     f4a:	71 81       	ldd	r23, Z+1	; 0x01
     f4c:	82 81       	ldd	r24, Z+2	; 0x02
     f4e:	93 81       	ldd	r25, Z+3	; 0x03
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	4a ef       	ldi	r20, 0xFA	; 250
     f56:	54 e4       	ldi	r21, 0x44	; 68
     f58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	f8 01       	movw	r30, r16
     f62:	80 83       	st	Z, r24
     f64:	91 83       	std	Z+1, r25	; 0x01
     f66:	a2 83       	std	Z+2, r26	; 0x02
     f68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f6a:	fe 01       	movw	r30, r28
     f6c:	ff 96       	adiw	r30, 0x3f	; 63
     f6e:	60 81       	ld	r22, Z
     f70:	71 81       	ldd	r23, Z+1	; 0x01
     f72:	82 81       	ldd	r24, Z+2	; 0x02
     f74:	93 81       	ldd	r25, Z+3	; 0x03
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e8       	ldi	r20, 0x80	; 128
     f7c:	5f e3       	ldi	r21, 0x3F	; 63
     f7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f82:	88 23       	and	r24, r24
     f84:	2c f4       	brge	.+10     	; 0xf90 <main+0x38e>
		__ticks = 1;
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9e af       	std	Y+62, r25	; 0x3e
     f8c:	8d af       	std	Y+61, r24	; 0x3d
     f8e:	46 c0       	rjmp	.+140    	; 0x101c <main+0x41a>
	else if (__tmp > 65535)
     f90:	fe 01       	movw	r30, r28
     f92:	ff 96       	adiw	r30, 0x3f	; 63
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	4f e7       	ldi	r20, 0x7F	; 127
     fa2:	57 e4       	ldi	r21, 0x47	; 71
     fa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fa8:	18 16       	cp	r1, r24
     faa:	64 f5       	brge	.+88     	; 0x1004 <main+0x402>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fac:	fe 01       	movw	r30, r28
     fae:	ed 5b       	subi	r30, 0xBD	; 189
     fb0:	ff 4f       	sbci	r31, 0xFF	; 255
     fb2:	60 81       	ld	r22, Z
     fb4:	71 81       	ldd	r23, Z+1	; 0x01
     fb6:	82 81       	ldd	r24, Z+2	; 0x02
     fb8:	93 81       	ldd	r25, Z+3	; 0x03
     fba:	20 e0       	ldi	r18, 0x00	; 0
     fbc:	30 e0       	ldi	r19, 0x00	; 0
     fbe:	40 e2       	ldi	r20, 0x20	; 32
     fc0:	51 e4       	ldi	r21, 0x41	; 65
     fc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc6:	dc 01       	movw	r26, r24
     fc8:	cb 01       	movw	r24, r22
     fca:	bc 01       	movw	r22, r24
     fcc:	cd 01       	movw	r24, r26
     fce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd2:	dc 01       	movw	r26, r24
     fd4:	cb 01       	movw	r24, r22
     fd6:	9e af       	std	Y+62, r25	; 0x3e
     fd8:	8d af       	std	Y+61, r24	; 0x3d
     fda:	0f c0       	rjmp	.+30     	; 0xffa <main+0x3f8>
     fdc:	88 ec       	ldi	r24, 0xC8	; 200
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	9c af       	std	Y+60, r25	; 0x3c
     fe2:	8b af       	std	Y+59, r24	; 0x3b
     fe4:	8b ad       	ldd	r24, Y+59	; 0x3b
     fe6:	9c ad       	ldd	r25, Y+60	; 0x3c
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <main+0x3e6>
     fec:	9c af       	std	Y+60, r25	; 0x3c
     fee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ff0:	8d ad       	ldd	r24, Y+61	; 0x3d
     ff2:	9e ad       	ldd	r25, Y+62	; 0x3e
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	9e af       	std	Y+62, r25	; 0x3e
     ff8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ffa:	8d ad       	ldd	r24, Y+61	; 0x3d
     ffc:	9e ad       	ldd	r25, Y+62	; 0x3e
     ffe:	00 97       	sbiw	r24, 0x00	; 0
    1000:	69 f7       	brne	.-38     	; 0xfdc <main+0x3da>
    1002:	16 c0       	rjmp	.+44     	; 0x1030 <main+0x42e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1004:	fe 01       	movw	r30, r28
    1006:	ff 96       	adiw	r30, 0x3f	; 63
    1008:	60 81       	ld	r22, Z
    100a:	71 81       	ldd	r23, Z+1	; 0x01
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	93 81       	ldd	r25, Z+3	; 0x03
    1010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1014:	dc 01       	movw	r26, r24
    1016:	cb 01       	movw	r24, r22
    1018:	9e af       	std	Y+62, r25	; 0x3e
    101a:	8d af       	std	Y+61, r24	; 0x3d
    101c:	8d ad       	ldd	r24, Y+61	; 0x3d
    101e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1020:	9a af       	std	Y+58, r25	; 0x3a
    1022:	89 af       	std	Y+57, r24	; 0x39
    1024:	89 ad       	ldd	r24, Y+57	; 0x39
    1026:	9a ad       	ldd	r25, Y+58	; 0x3a
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	f1 f7       	brne	.-4      	; 0x1028 <main+0x426>
    102c:	9a af       	std	Y+58, r25	; 0x3a
    102e:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			while((key_hmi != '+') || (key_hmi != '-'));
    1030:	fe 01       	movw	r30, r28
    1032:	ea 5a       	subi	r30, 0xAA	; 170
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	80 81       	ld	r24, Z
    1038:	8b 32       	cpi	r24, 0x2B	; 43
    103a:	d1 f7       	brne	.-12     	; 0x1030 <main+0x42e>
    103c:	fe 01       	movw	r30, r28
    103e:	ea 5a       	subi	r30, 0xAA	; 170
    1040:	ff 4f       	sbci	r31, 0xFF	; 255
    1042:	80 81       	ld	r24, Z
    1044:	8d 32       	cpi	r24, 0x2D	; 45
    1046:	a1 f7       	brne	.-24     	; 0x1030 <main+0x42e>
			UART_sendByte(key_hmi);
    1048:	fe 01       	movw	r30, r28
    104a:	ea 5a       	subi	r30, 0xAA	; 170
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	80 81       	ld	r24, Z
    1050:	0e 94 de 1a 	call	0x35bc	; 0x35bc <UART_sendByte>

			if(key_hmi == '+')
    1054:	fe 01       	movw	r30, r28
    1056:	ea 5a       	subi	r30, 0xAA	; 170
    1058:	ff 4f       	sbci	r31, 0xFF	; 255
    105a:	80 81       	ld	r24, Z
    105c:	8b 32       	cpi	r24, 0x2B	; 43
    105e:	09 f0       	breq	.+2      	; 0x1062 <main+0x460>
    1060:	44 c1       	rjmp	.+648    	; 0x12ea <main+0x6e8>
			{
				while(1)
				{
					LCD_clearScreen();
    1062:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
					LCD_displayString("plz enter pass:");
    1066:	87 eb       	ldi	r24, 0xB7	; 183
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
					enterPassword(pass1);
    106e:	80 91 1c 01 	lds	r24, 0x011C
    1072:	90 91 1d 01 	lds	r25, 0x011D
    1076:	0e 94 b3 05 	call	0xb66	; 0xb66 <enterPassword>
					sendPassword(pass1);
    107a:	80 91 1c 01 	lds	r24, 0x011C
    107e:	90 91 1d 01 	lds	r25, 0x011D
    1082:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sendPassword>

					if(UART_recieveByte() == NOT_MATCHING)
    1086:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
    108a:	88 23       	and	r24, r24
    108c:	09 f0       	breq	.+2      	; 0x1090 <main+0x48e>
    108e:	28 c1       	rjmp	.+592    	; 0x12e0 <main+0x6de>
					{
						LCD_clearScreen();
    1090:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"Wrong Pass");
    1094:	27 ec       	ldi	r18, 0xC7	; 199
    1096:	30 e0       	ldi	r19, 0x00	; 0
    1098:	80 e0       	ldi	r24, 0x00	; 0
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	a9 01       	movw	r20, r18
    109e:	0e 94 36 19 	call	0x326c	; 0x326c <LCD_displayStringRowColumn>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	aa e7       	ldi	r26, 0x7A	; 122
    10a8:	b4 e4       	ldi	r27, 0x44	; 68
    10aa:	8d ab       	std	Y+53, r24	; 0x35
    10ac:	9e ab       	std	Y+54, r25	; 0x36
    10ae:	af ab       	std	Y+55, r26	; 0x37
    10b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b2:	6d a9       	ldd	r22, Y+53	; 0x35
    10b4:	7e a9       	ldd	r23, Y+54	; 0x36
    10b6:	8f a9       	ldd	r24, Y+55	; 0x37
    10b8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	4a ef       	ldi	r20, 0xFA	; 250
    10c0:	54 e4       	ldi	r21, 0x44	; 68
    10c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	89 ab       	std	Y+49, r24	; 0x31
    10cc:	9a ab       	std	Y+50, r25	; 0x32
    10ce:	ab ab       	std	Y+51, r26	; 0x33
    10d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10d2:	69 a9       	ldd	r22, Y+49	; 0x31
    10d4:	7a a9       	ldd	r23, Y+50	; 0x32
    10d6:	8b a9       	ldd	r24, Y+51	; 0x33
    10d8:	9c a9       	ldd	r25, Y+52	; 0x34
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e8       	ldi	r20, 0x80	; 128
    10e0:	5f e3       	ldi	r21, 0x3F	; 63
    10e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e6:	88 23       	and	r24, r24
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <main+0x4f2>
		__ticks = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	98 ab       	std	Y+48, r25	; 0x30
    10f0:	8f a7       	std	Y+47, r24	; 0x2f
    10f2:	3f c0       	rjmp	.+126    	; 0x1172 <main+0x570>
	else if (__tmp > 65535)
    10f4:	69 a9       	ldd	r22, Y+49	; 0x31
    10f6:	7a a9       	ldd	r23, Y+50	; 0x32
    10f8:	8b a9       	ldd	r24, Y+51	; 0x33
    10fa:	9c a9       	ldd	r25, Y+52	; 0x34
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	3f ef       	ldi	r19, 0xFF	; 255
    1100:	4f e7       	ldi	r20, 0x7F	; 127
    1102:	57 e4       	ldi	r21, 0x47	; 71
    1104:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1108:	18 16       	cp	r1, r24
    110a:	4c f5       	brge	.+82     	; 0x115e <main+0x55c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110c:	6d a9       	ldd	r22, Y+53	; 0x35
    110e:	7e a9       	ldd	r23, Y+54	; 0x36
    1110:	8f a9       	ldd	r24, Y+55	; 0x37
    1112:	98 ad       	ldd	r25, Y+56	; 0x38
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e2       	ldi	r20, 0x20	; 32
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	98 ab       	std	Y+48, r25	; 0x30
    1132:	8f a7       	std	Y+47, r24	; 0x2f
    1134:	0f c0       	rjmp	.+30     	; 0x1154 <main+0x552>
    1136:	88 ec       	ldi	r24, 0xC8	; 200
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9e a7       	std	Y+46, r25	; 0x2e
    113c:	8d a7       	std	Y+45, r24	; 0x2d
    113e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1140:	9e a5       	ldd	r25, Y+46	; 0x2e
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <main+0x540>
    1146:	9e a7       	std	Y+46, r25	; 0x2e
    1148:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114a:	8f a5       	ldd	r24, Y+47	; 0x2f
    114c:	98 a9       	ldd	r25, Y+48	; 0x30
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	98 ab       	std	Y+48, r25	; 0x30
    1152:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1154:	8f a5       	ldd	r24, Y+47	; 0x2f
    1156:	98 a9       	ldd	r25, Y+48	; 0x30
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	69 f7       	brne	.-38     	; 0x1136 <main+0x534>
    115c:	14 c0       	rjmp	.+40     	; 0x1186 <main+0x584>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115e:	69 a9       	ldd	r22, Y+49	; 0x31
    1160:	7a a9       	ldd	r23, Y+50	; 0x32
    1162:	8b a9       	ldd	r24, Y+51	; 0x33
    1164:	9c a9       	ldd	r25, Y+52	; 0x34
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	98 ab       	std	Y+48, r25	; 0x30
    1170:	8f a7       	std	Y+47, r24	; 0x2f
    1172:	8f a5       	ldd	r24, Y+47	; 0x2f
    1174:	98 a9       	ldd	r25, Y+48	; 0x30
    1176:	9c a7       	std	Y+44, r25	; 0x2c
    1178:	8b a7       	std	Y+43, r24	; 0x2b
    117a:	8b a5       	ldd	r24, Y+43	; 0x2b
    117c:	9c a5       	ldd	r25, Y+44	; 0x2c
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <main+0x57c>
    1182:	9c a7       	std	Y+44, r25	; 0x2c
    1184:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(1000);
						false_attempts++;
    1186:	de 01       	movw	r26, r28
    1188:	ab 5a       	subi	r26, 0xAB	; 171
    118a:	bf 4f       	sbci	r27, 0xFF	; 255
    118c:	fe 01       	movw	r30, r28
    118e:	eb 5a       	subi	r30, 0xAB	; 171
    1190:	ff 4f       	sbci	r31, 0xFF	; 255
    1192:	80 81       	ld	r24, Z
    1194:	8f 5f       	subi	r24, 0xFF	; 255
    1196:	8c 93       	st	X, r24

						if(false_attempts == 3)
    1198:	fe 01       	movw	r30, r28
    119a:	eb 5a       	subi	r30, 0xAB	; 171
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	80 81       	ld	r24, Z
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <main+0x5a4>
    11a4:	5e cf       	rjmp	.-324    	; 0x1062 <main+0x460>
						{
							LCD_clearScreen();
    11a6:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
							LCD_displayString("ERROR");
    11aa:	82 ed       	ldi	r24, 0xD2	; 210
    11ac:	90 e0       	ldi	r25, 0x00	; 0
    11ae:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
							false_attempts = 0;
    11b2:	fe 01       	movw	r30, r28
    11b4:	eb 5a       	subi	r30, 0xAB	; 171
    11b6:	ff 4f       	sbci	r31, 0xFF	; 255
    11b8:	10 82       	st	Z, r1
    11ba:	80 e0       	ldi	r24, 0x00	; 0
    11bc:	90 e6       	ldi	r25, 0x60	; 96
    11be:	aa e6       	ldi	r26, 0x6A	; 106
    11c0:	b7 e4       	ldi	r27, 0x47	; 71
    11c2:	8f a3       	std	Y+39, r24	; 0x27
    11c4:	98 a7       	std	Y+40, r25	; 0x28
    11c6:	a9 a7       	std	Y+41, r26	; 0x29
    11c8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11ca:	6f a1       	ldd	r22, Y+39	; 0x27
    11cc:	78 a5       	ldd	r23, Y+40	; 0x28
    11ce:	89 a5       	ldd	r24, Y+41	; 0x29
    11d0:	9a a5       	ldd	r25, Y+42	; 0x2a
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	30 e0       	ldi	r19, 0x00	; 0
    11d6:	4a ef       	ldi	r20, 0xFA	; 250
    11d8:	54 e4       	ldi	r21, 0x44	; 68
    11da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11de:	dc 01       	movw	r26, r24
    11e0:	cb 01       	movw	r24, r22
    11e2:	8b a3       	std	Y+35, r24	; 0x23
    11e4:	9c a3       	std	Y+36, r25	; 0x24
    11e6:	ad a3       	std	Y+37, r26	; 0x25
    11e8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11ea:	6b a1       	ldd	r22, Y+35	; 0x23
    11ec:	7c a1       	ldd	r23, Y+36	; 0x24
    11ee:	8d a1       	ldd	r24, Y+37	; 0x25
    11f0:	9e a1       	ldd	r25, Y+38	; 0x26
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	40 e8       	ldi	r20, 0x80	; 128
    11f8:	5f e3       	ldi	r21, 0x3F	; 63
    11fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11fe:	88 23       	and	r24, r24
    1200:	2c f4       	brge	.+10     	; 0x120c <main+0x60a>
		__ticks = 1;
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	9a a3       	std	Y+34, r25	; 0x22
    1208:	89 a3       	std	Y+33, r24	; 0x21
    120a:	3f c0       	rjmp	.+126    	; 0x128a <main+0x688>
	else if (__tmp > 65535)
    120c:	6b a1       	ldd	r22, Y+35	; 0x23
    120e:	7c a1       	ldd	r23, Y+36	; 0x24
    1210:	8d a1       	ldd	r24, Y+37	; 0x25
    1212:	9e a1       	ldd	r25, Y+38	; 0x26
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	3f ef       	ldi	r19, 0xFF	; 255
    1218:	4f e7       	ldi	r20, 0x7F	; 127
    121a:	57 e4       	ldi	r21, 0x47	; 71
    121c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1220:	18 16       	cp	r1, r24
    1222:	4c f5       	brge	.+82     	; 0x1276 <main+0x674>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1224:	6f a1       	ldd	r22, Y+39	; 0x27
    1226:	78 a5       	ldd	r23, Y+40	; 0x28
    1228:	89 a5       	ldd	r24, Y+41	; 0x29
    122a:	9a a5       	ldd	r25, Y+42	; 0x2a
    122c:	20 e0       	ldi	r18, 0x00	; 0
    122e:	30 e0       	ldi	r19, 0x00	; 0
    1230:	40 e2       	ldi	r20, 0x20	; 32
    1232:	51 e4       	ldi	r21, 0x41	; 65
    1234:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1238:	dc 01       	movw	r26, r24
    123a:	cb 01       	movw	r24, r22
    123c:	bc 01       	movw	r22, r24
    123e:	cd 01       	movw	r24, r26
    1240:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1244:	dc 01       	movw	r26, r24
    1246:	cb 01       	movw	r24, r22
    1248:	9a a3       	std	Y+34, r25	; 0x22
    124a:	89 a3       	std	Y+33, r24	; 0x21
    124c:	0f c0       	rjmp	.+30     	; 0x126c <main+0x66a>
    124e:	88 ec       	ldi	r24, 0xC8	; 200
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	98 a3       	std	Y+32, r25	; 0x20
    1254:	8f 8f       	std	Y+31, r24	; 0x1f
    1256:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1258:	98 a1       	ldd	r25, Y+32	; 0x20
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <main+0x658>
    125e:	98 a3       	std	Y+32, r25	; 0x20
    1260:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1262:	89 a1       	ldd	r24, Y+33	; 0x21
    1264:	9a a1       	ldd	r25, Y+34	; 0x22
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	9a a3       	std	Y+34, r25	; 0x22
    126a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126c:	89 a1       	ldd	r24, Y+33	; 0x21
    126e:	9a a1       	ldd	r25, Y+34	; 0x22
    1270:	00 97       	sbiw	r24, 0x00	; 0
    1272:	69 f7       	brne	.-38     	; 0x124e <main+0x64c>
    1274:	44 ce       	rjmp	.-888    	; 0xefe <main+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1276:	6b a1       	ldd	r22, Y+35	; 0x23
    1278:	7c a1       	ldd	r23, Y+36	; 0x24
    127a:	8d a1       	ldd	r24, Y+37	; 0x25
    127c:	9e a1       	ldd	r25, Y+38	; 0x26
    127e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	9a a3       	std	Y+34, r25	; 0x22
    1288:	89 a3       	std	Y+33, r24	; 0x21
    128a:	89 a1       	ldd	r24, Y+33	; 0x21
    128c:	9a a1       	ldd	r25, Y+34	; 0x22
    128e:	9e 8f       	std	Y+30, r25	; 0x1e
    1290:	8d 8f       	std	Y+29, r24	; 0x1d
    1292:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1294:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	f1 f7       	brne	.-4      	; 0x1296 <main+0x694>
    129a:	9e 8f       	std	Y+30, r25	; 0x1e
    129c:	8d 8f       	std	Y+29, r24	; 0x1d
    129e:	2f ce       	rjmp	.-930    	; 0xefe <main+0x2fc>
					}
					else
					{
						while(UART_recieveByte() != (DOOR_DONE))
						{
							if(UART_recieveByte() == (DOOR_OPENING))
    12a0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	39 f4       	brne	.+14     	; 0x12b6 <main+0x6b4>
							{
								LCD_clearScreen();
    12a8:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
								LCD_displayString("Unlocking Door");
    12ac:	88 ed       	ldi	r24, 0xD8	; 216
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
    12b4:	15 c0       	rjmp	.+42     	; 0x12e0 <main+0x6de>
							}
							else if(UART_recieveByte() == (DOOR_OPENED))
    12b6:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
    12ba:	81 3c       	cpi	r24, 0xC1	; 193
    12bc:	39 f4       	brne	.+14     	; 0x12cc <main+0x6ca>
							{
								LCD_clearScreen();
    12be:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
								LCD_displayString("Door Opened");
    12c2:	87 ee       	ldi	r24, 0xE7	; 231
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
    12ca:	0a c0       	rjmp	.+20     	; 0x12e0 <main+0x6de>
							}
							else if(UART_recieveByte() == (DOOR_CLOSING))
    12cc:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
    12d0:	82 3c       	cpi	r24, 0xC2	; 194
    12d2:	31 f4       	brne	.+12     	; 0x12e0 <main+0x6de>
							{
								LCD_clearScreen();
    12d4:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
								LCD_displayString("Locking Door");
    12d8:	83 ef       	ldi	r24, 0xF3	; 243
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
							continue;
						}
					}
					else
					{
						while(UART_recieveByte() != (DOOR_DONE))
    12e0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
    12e4:	8f 3f       	cpi	r24, 0xFF	; 255
    12e6:	e1 f6       	brne	.-72     	; 0x12a0 <main+0x69e>
    12e8:	0a ce       	rjmp	.-1004   	; 0xefe <main+0x2fc>
						}
					}
					break;
				}
			}
			else if(key_hmi == '-')
    12ea:	fe 01       	movw	r30, r28
    12ec:	ea 5a       	subi	r30, 0xAA	; 170
    12ee:	ff 4f       	sbci	r31, 0xFF	; 255
    12f0:	80 81       	ld	r24, Z
    12f2:	8d 32       	cpi	r24, 0x2D	; 45
    12f4:	09 f0       	breq	.+2      	; 0x12f8 <main+0x6f6>
    12f6:	03 ce       	rjmp	.-1018   	; 0xefe <main+0x2fc>
			{
				while(1)
				{
					LCD_clearScreen();
    12f8:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
					LCD_displayString("plz enter pass:");
    12fc:	87 eb       	ldi	r24, 0xB7	; 183
    12fe:	90 e0       	ldi	r25, 0x00	; 0
    1300:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
					enterPassword(pass1);
    1304:	80 91 1c 01 	lds	r24, 0x011C
    1308:	90 91 1d 01 	lds	r25, 0x011D
    130c:	0e 94 b3 05 	call	0xb66	; 0xb66 <enterPassword>
					sendPassword(pass1);
    1310:	80 91 1c 01 	lds	r24, 0x011C
    1314:	90 91 1d 01 	lds	r25, 0x011D
    1318:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sendPassword>

					if(UART_recieveByte() == NOT_MATCHING)
    131c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
    1320:	88 23       	and	r24, r24
    1322:	09 f0       	breq	.+2      	; 0x1326 <main+0x724>
    1324:	08 c1       	rjmp	.+528    	; 0x1536 <main+0x934>
					{
						LCD_clearScreen();
    1326:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
						LCD_displayStringRowColumn(0,0,"Wrong Pass");
    132a:	27 ec       	ldi	r18, 0xC7	; 199
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	60 e0       	ldi	r22, 0x00	; 0
    1332:	a9 01       	movw	r20, r18
    1334:	0e 94 36 19 	call	0x326c	; 0x326c <LCD_displayStringRowColumn>
    1338:	80 e0       	ldi	r24, 0x00	; 0
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	aa e7       	ldi	r26, 0x7A	; 122
    133e:	b4 e4       	ldi	r27, 0x44	; 68
    1340:	89 8f       	std	Y+25, r24	; 0x19
    1342:	9a 8f       	std	Y+26, r25	; 0x1a
    1344:	ab 8f       	std	Y+27, r26	; 0x1b
    1346:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1348:	69 8d       	ldd	r22, Y+25	; 0x19
    134a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    134c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    134e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	4a ef       	ldi	r20, 0xFA	; 250
    1356:	54 e4       	ldi	r21, 0x44	; 68
    1358:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    135c:	dc 01       	movw	r26, r24
    135e:	cb 01       	movw	r24, r22
    1360:	8d 8b       	std	Y+21, r24	; 0x15
    1362:	9e 8b       	std	Y+22, r25	; 0x16
    1364:	af 8b       	std	Y+23, r26	; 0x17
    1366:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1368:	6d 89       	ldd	r22, Y+21	; 0x15
    136a:	7e 89       	ldd	r23, Y+22	; 0x16
    136c:	8f 89       	ldd	r24, Y+23	; 0x17
    136e:	98 8d       	ldd	r25, Y+24	; 0x18
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e8       	ldi	r20, 0x80	; 128
    1376:	5f e3       	ldi	r21, 0x3F	; 63
    1378:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    137c:	88 23       	and	r24, r24
    137e:	2c f4       	brge	.+10     	; 0x138a <main+0x788>
		__ticks = 1;
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	9c 8b       	std	Y+20, r25	; 0x14
    1386:	8b 8b       	std	Y+19, r24	; 0x13
    1388:	3f c0       	rjmp	.+126    	; 0x1408 <main+0x806>
	else if (__tmp > 65535)
    138a:	6d 89       	ldd	r22, Y+21	; 0x15
    138c:	7e 89       	ldd	r23, Y+22	; 0x16
    138e:	8f 89       	ldd	r24, Y+23	; 0x17
    1390:	98 8d       	ldd	r25, Y+24	; 0x18
    1392:	20 e0       	ldi	r18, 0x00	; 0
    1394:	3f ef       	ldi	r19, 0xFF	; 255
    1396:	4f e7       	ldi	r20, 0x7F	; 127
    1398:	57 e4       	ldi	r21, 0x47	; 71
    139a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    139e:	18 16       	cp	r1, r24
    13a0:	4c f5       	brge	.+82     	; 0x13f4 <main+0x7f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13a2:	69 8d       	ldd	r22, Y+25	; 0x19
    13a4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13a6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13a8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	40 e2       	ldi	r20, 0x20	; 32
    13b0:	51 e4       	ldi	r21, 0x41	; 65
    13b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13b6:	dc 01       	movw	r26, r24
    13b8:	cb 01       	movw	r24, r22
    13ba:	bc 01       	movw	r22, r24
    13bc:	cd 01       	movw	r24, r26
    13be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c2:	dc 01       	movw	r26, r24
    13c4:	cb 01       	movw	r24, r22
    13c6:	9c 8b       	std	Y+20, r25	; 0x14
    13c8:	8b 8b       	std	Y+19, r24	; 0x13
    13ca:	0f c0       	rjmp	.+30     	; 0x13ea <main+0x7e8>
    13cc:	88 ec       	ldi	r24, 0xC8	; 200
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	9a 8b       	std	Y+18, r25	; 0x12
    13d2:	89 8b       	std	Y+17, r24	; 0x11
    13d4:	89 89       	ldd	r24, Y+17	; 0x11
    13d6:	9a 89       	ldd	r25, Y+18	; 0x12
    13d8:	01 97       	sbiw	r24, 0x01	; 1
    13da:	f1 f7       	brne	.-4      	; 0x13d8 <main+0x7d6>
    13dc:	9a 8b       	std	Y+18, r25	; 0x12
    13de:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13e0:	8b 89       	ldd	r24, Y+19	; 0x13
    13e2:	9c 89       	ldd	r25, Y+20	; 0x14
    13e4:	01 97       	sbiw	r24, 0x01	; 1
    13e6:	9c 8b       	std	Y+20, r25	; 0x14
    13e8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13ea:	8b 89       	ldd	r24, Y+19	; 0x13
    13ec:	9c 89       	ldd	r25, Y+20	; 0x14
    13ee:	00 97       	sbiw	r24, 0x00	; 0
    13f0:	69 f7       	brne	.-38     	; 0x13cc <main+0x7ca>
    13f2:	14 c0       	rjmp	.+40     	; 0x141c <main+0x81a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13f4:	6d 89       	ldd	r22, Y+21	; 0x15
    13f6:	7e 89       	ldd	r23, Y+22	; 0x16
    13f8:	8f 89       	ldd	r24, Y+23	; 0x17
    13fa:	98 8d       	ldd	r25, Y+24	; 0x18
    13fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1400:	dc 01       	movw	r26, r24
    1402:	cb 01       	movw	r24, r22
    1404:	9c 8b       	std	Y+20, r25	; 0x14
    1406:	8b 8b       	std	Y+19, r24	; 0x13
    1408:	8b 89       	ldd	r24, Y+19	; 0x13
    140a:	9c 89       	ldd	r25, Y+20	; 0x14
    140c:	98 8b       	std	Y+16, r25	; 0x10
    140e:	8f 87       	std	Y+15, r24	; 0x0f
    1410:	8f 85       	ldd	r24, Y+15	; 0x0f
    1412:	98 89       	ldd	r25, Y+16	; 0x10
    1414:	01 97       	sbiw	r24, 0x01	; 1
    1416:	f1 f7       	brne	.-4      	; 0x1414 <main+0x812>
    1418:	98 8b       	std	Y+16, r25	; 0x10
    141a:	8f 87       	std	Y+15, r24	; 0x0f
						_delay_ms(1000);
						false_attempts++;
    141c:	de 01       	movw	r26, r28
    141e:	ab 5a       	subi	r26, 0xAB	; 171
    1420:	bf 4f       	sbci	r27, 0xFF	; 255
    1422:	fe 01       	movw	r30, r28
    1424:	eb 5a       	subi	r30, 0xAB	; 171
    1426:	ff 4f       	sbci	r31, 0xFF	; 255
    1428:	80 81       	ld	r24, Z
    142a:	8f 5f       	subi	r24, 0xFF	; 255
    142c:	8c 93       	st	X, r24

						if(false_attempts == 3)
    142e:	fe 01       	movw	r30, r28
    1430:	eb 5a       	subi	r30, 0xAB	; 171
    1432:	ff 4f       	sbci	r31, 0xFF	; 255
    1434:	80 81       	ld	r24, Z
    1436:	83 30       	cpi	r24, 0x03	; 3
    1438:	09 f0       	breq	.+2      	; 0x143c <main+0x83a>
    143a:	5e cf       	rjmp	.-324    	; 0x12f8 <main+0x6f6>
						{
							LCD_clearScreen();
    143c:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
							LCD_displayString("ERROR");
    1440:	82 ed       	ldi	r24, 0xD2	; 210
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
							false_attempts = 0;
    1448:	fe 01       	movw	r30, r28
    144a:	eb 5a       	subi	r30, 0xAB	; 171
    144c:	ff 4f       	sbci	r31, 0xFF	; 255
    144e:	10 82       	st	Z, r1
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e6       	ldi	r25, 0x60	; 96
    1454:	aa e6       	ldi	r26, 0x6A	; 106
    1456:	b7 e4       	ldi	r27, 0x47	; 71
    1458:	8b 87       	std	Y+11, r24	; 0x0b
    145a:	9c 87       	std	Y+12, r25	; 0x0c
    145c:	ad 87       	std	Y+13, r26	; 0x0d
    145e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1460:	6b 85       	ldd	r22, Y+11	; 0x0b
    1462:	7c 85       	ldd	r23, Y+12	; 0x0c
    1464:	8d 85       	ldd	r24, Y+13	; 0x0d
    1466:	9e 85       	ldd	r25, Y+14	; 0x0e
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	4a ef       	ldi	r20, 0xFA	; 250
    146e:	54 e4       	ldi	r21, 0x44	; 68
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	8f 83       	std	Y+7, r24	; 0x07
    147a:	98 87       	std	Y+8, r25	; 0x08
    147c:	a9 87       	std	Y+9, r26	; 0x09
    147e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1480:	6f 81       	ldd	r22, Y+7	; 0x07
    1482:	78 85       	ldd	r23, Y+8	; 0x08
    1484:	89 85       	ldd	r24, Y+9	; 0x09
    1486:	9a 85       	ldd	r25, Y+10	; 0x0a
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1494:	88 23       	and	r24, r24
    1496:	2c f4       	brge	.+10     	; 0x14a2 <main+0x8a0>
		__ticks = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9e 83       	std	Y+6, r25	; 0x06
    149e:	8d 83       	std	Y+5, r24	; 0x05
    14a0:	3f c0       	rjmp	.+126    	; 0x1520 <main+0x91e>
	else if (__tmp > 65535)
    14a2:	6f 81       	ldd	r22, Y+7	; 0x07
    14a4:	78 85       	ldd	r23, Y+8	; 0x08
    14a6:	89 85       	ldd	r24, Y+9	; 0x09
    14a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	57 e4       	ldi	r21, 0x47	; 71
    14b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	4c f5       	brge	.+82     	; 0x150c <main+0x90a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ba:	6b 85       	ldd	r22, Y+11	; 0x0b
    14bc:	7c 85       	ldd	r23, Y+12	; 0x0c
    14be:	8d 85       	ldd	r24, Y+13	; 0x0d
    14c0:	9e 85       	ldd	r25, Y+14	; 0x0e
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e2       	ldi	r20, 0x20	; 32
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9e 83       	std	Y+6, r25	; 0x06
    14e0:	8d 83       	std	Y+5, r24	; 0x05
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <main+0x900>
    14e4:	88 ec       	ldi	r24, 0xC8	; 200
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <main+0x8ee>
    14f4:	9c 83       	std	Y+4, r25	; 0x04
    14f6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	9e 83       	std	Y+6, r25	; 0x06
    1500:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1502:	8d 81       	ldd	r24, Y+5	; 0x05
    1504:	9e 81       	ldd	r25, Y+6	; 0x06
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	69 f7       	brne	.-38     	; 0x14e4 <main+0x8e2>
    150a:	f9 cc       	rjmp	.-1550   	; 0xefe <main+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150c:	6f 81       	ldd	r22, Y+7	; 0x07
    150e:	78 85       	ldd	r23, Y+8	; 0x08
    1510:	89 85       	ldd	r24, Y+9	; 0x09
    1512:	9a 85       	ldd	r25, Y+10	; 0x0a
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9e 83       	std	Y+6, r25	; 0x06
    151e:	8d 83       	std	Y+5, r24	; 0x05
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	9a 83       	std	Y+2, r25	; 0x02
    1526:	89 83       	std	Y+1, r24	; 0x01
    1528:	89 81       	ldd	r24, Y+1	; 0x01
    152a:	9a 81       	ldd	r25, Y+2	; 0x02
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <main+0x92a>
    1530:	9a 83       	std	Y+2, r25	; 0x02
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	e4 cc       	rjmp	.-1592   	; 0xefe <main+0x2fc>
					}
					else
					{
						do
						{
							LCD_clearScreen();
    1536:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
							LCD_displayString("Plz enter pass:");
    153a:	80 e6       	ldi	r24, 0x60	; 96
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
							LCD_moveCursor(1,0);
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	60 e0       	ldi	r22, 0x00	; 0
    1546:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <LCD_moveCursor>
							enterPassword(pass1);
    154a:	80 91 1c 01 	lds	r24, 0x011C
    154e:	90 91 1d 01 	lds	r25, 0x011D
    1552:	0e 94 b3 05 	call	0xb66	; 0xb66 <enterPassword>
							sendPassword(pass1);
    1556:	80 91 1c 01 	lds	r24, 0x011C
    155a:	90 91 1d 01 	lds	r25, 0x011D
    155e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sendPassword>

							LCD_clearScreen();
    1562:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>

							/*re-entering pass*/
							LCD_displayString("Plz re-enter the same pass:");
    1566:	80 e7       	ldi	r24, 0x70	; 112
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
							LCD_moveCursor(1,12);
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	6c e0       	ldi	r22, 0x0C	; 12
    1572:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <LCD_moveCursor>
							enterPassword(pass2);
    1576:	80 91 1a 01 	lds	r24, 0x011A
    157a:	90 91 1b 01 	lds	r25, 0x011B
    157e:	0e 94 b3 05 	call	0xb66	; 0xb66 <enterPassword>
							sendPassword(pass2);
    1582:	80 91 1a 01 	lds	r24, 0x011A
    1586:	90 91 1b 01 	lds	r25, 0x011B
    158a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <sendPassword>

							if(UART_recieveByte() == NOT_MATCHING)
    158e:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
    1592:	88 23       	and	r24, r24
    1594:	31 f4       	brne	.+12     	; 0x15a2 <main+0x9a0>
							{
								LCD_clearScreen();
    1596:	0e 94 4f 19 	call	0x329e	; 0x329e <LCD_clearScreen>
								LCD_displayString("NOT MATCHING");
    159a:	8c e8       	ldi	r24, 0x8C	; 140
    159c:	90 e0       	ldi	r25, 0x00	; 0
    159e:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
								continue;
							}
						}
						while(UART_recieveByte() == NOT_MATCHING);
    15a2:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
    15a6:	88 23       	and	r24, r24
    15a8:	31 f2       	breq	.-116    	; 0x1536 <main+0x934>
    15aa:	a9 cc       	rjmp	.-1710   	; 0xefe <main+0x2fc>

000015ac <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15ac:	df 93       	push	r29
    15ae:	cf 93       	push	r28
    15b0:	00 d0       	rcall	.+0      	; 0x15b2 <GPIO_setupPinDirection+0x6>
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <GPIO_setupPinDirection+0x8>
    15b4:	0f 92       	push	r0
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	89 83       	std	Y+1, r24	; 0x01
    15bc:	6a 83       	std	Y+2, r22	; 0x02
    15be:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	88 30       	cpi	r24, 0x08	; 8
    15c4:	08 f0       	brcs	.+2      	; 0x15c8 <GPIO_setupPinDirection+0x1c>
    15c6:	d5 c0       	rjmp	.+426    	; 0x1772 <GPIO_setupPinDirection+0x1c6>
    15c8:	89 81       	ldd	r24, Y+1	; 0x01
    15ca:	84 30       	cpi	r24, 0x04	; 4
    15cc:	08 f0       	brcs	.+2      	; 0x15d0 <GPIO_setupPinDirection+0x24>
    15ce:	d1 c0       	rjmp	.+418    	; 0x1772 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    15d0:	89 81       	ldd	r24, Y+1	; 0x01
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	3d 83       	std	Y+5, r19	; 0x05
    15d8:	2c 83       	std	Y+4, r18	; 0x04
    15da:	8c 81       	ldd	r24, Y+4	; 0x04
    15dc:	9d 81       	ldd	r25, Y+5	; 0x05
    15de:	81 30       	cpi	r24, 0x01	; 1
    15e0:	91 05       	cpc	r25, r1
    15e2:	09 f4       	brne	.+2      	; 0x15e6 <GPIO_setupPinDirection+0x3a>
    15e4:	43 c0       	rjmp	.+134    	; 0x166c <GPIO_setupPinDirection+0xc0>
    15e6:	2c 81       	ldd	r18, Y+4	; 0x04
    15e8:	3d 81       	ldd	r19, Y+5	; 0x05
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	2c f4       	brge	.+10     	; 0x15fa <GPIO_setupPinDirection+0x4e>
    15f0:	8c 81       	ldd	r24, Y+4	; 0x04
    15f2:	9d 81       	ldd	r25, Y+5	; 0x05
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	71 f0       	breq	.+28     	; 0x1614 <GPIO_setupPinDirection+0x68>
    15f8:	bc c0       	rjmp	.+376    	; 0x1772 <GPIO_setupPinDirection+0x1c6>
    15fa:	2c 81       	ldd	r18, Y+4	; 0x04
    15fc:	3d 81       	ldd	r19, Y+5	; 0x05
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <GPIO_setupPinDirection+0x5a>
    1604:	5f c0       	rjmp	.+190    	; 0x16c4 <GPIO_setupPinDirection+0x118>
    1606:	8c 81       	ldd	r24, Y+4	; 0x04
    1608:	9d 81       	ldd	r25, Y+5	; 0x05
    160a:	83 30       	cpi	r24, 0x03	; 3
    160c:	91 05       	cpc	r25, r1
    160e:	09 f4       	brne	.+2      	; 0x1612 <GPIO_setupPinDirection+0x66>
    1610:	85 c0       	rjmp	.+266    	; 0x171c <GPIO_setupPinDirection+0x170>
    1612:	af c0       	rjmp	.+350    	; 0x1772 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	81 30       	cpi	r24, 0x01	; 1
    1618:	a1 f4       	brne	.+40     	; 0x1642 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    161a:	aa e3       	ldi	r26, 0x3A	; 58
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	ea e3       	ldi	r30, 0x3A	; 58
    1620:	f0 e0       	ldi	r31, 0x00	; 0
    1622:	80 81       	ld	r24, Z
    1624:	48 2f       	mov	r20, r24
    1626:	8a 81       	ldd	r24, Y+2	; 0x02
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	81 e0       	ldi	r24, 0x01	; 1
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	02 2e       	mov	r0, r18
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <GPIO_setupPinDirection+0x8c>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	0a 94       	dec	r0
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <GPIO_setupPinDirection+0x88>
    163c:	84 2b       	or	r24, r20
    163e:	8c 93       	st	X, r24
    1640:	98 c0       	rjmp	.+304    	; 0x1772 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1642:	aa e3       	ldi	r26, 0x3A	; 58
    1644:	b0 e0       	ldi	r27, 0x00	; 0
    1646:	ea e3       	ldi	r30, 0x3A	; 58
    1648:	f0 e0       	ldi	r31, 0x00	; 0
    164a:	80 81       	ld	r24, Z
    164c:	48 2f       	mov	r20, r24
    164e:	8a 81       	ldd	r24, Y+2	; 0x02
    1650:	28 2f       	mov	r18, r24
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	81 e0       	ldi	r24, 0x01	; 1
    1656:	90 e0       	ldi	r25, 0x00	; 0
    1658:	02 2e       	mov	r0, r18
    165a:	02 c0       	rjmp	.+4      	; 0x1660 <GPIO_setupPinDirection+0xb4>
    165c:	88 0f       	add	r24, r24
    165e:	99 1f       	adc	r25, r25
    1660:	0a 94       	dec	r0
    1662:	e2 f7       	brpl	.-8      	; 0x165c <GPIO_setupPinDirection+0xb0>
    1664:	80 95       	com	r24
    1666:	84 23       	and	r24, r20
    1668:	8c 93       	st	X, r24
    166a:	83 c0       	rjmp	.+262    	; 0x1772 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    166c:	8b 81       	ldd	r24, Y+3	; 0x03
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	a1 f4       	brne	.+40     	; 0x169a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1672:	a7 e3       	ldi	r26, 0x37	; 55
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	e7 e3       	ldi	r30, 0x37	; 55
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <GPIO_setupPinDirection+0xe4>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <GPIO_setupPinDirection+0xe0>
    1694:	84 2b       	or	r24, r20
    1696:	8c 93       	st	X, r24
    1698:	6c c0       	rjmp	.+216    	; 0x1772 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    169a:	a7 e3       	ldi	r26, 0x37	; 55
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e7 e3       	ldi	r30, 0x37	; 55
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	48 2f       	mov	r20, r24
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	28 2f       	mov	r18, r24
    16aa:	30 e0       	ldi	r19, 0x00	; 0
    16ac:	81 e0       	ldi	r24, 0x01	; 1
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	02 2e       	mov	r0, r18
    16b2:	02 c0       	rjmp	.+4      	; 0x16b8 <GPIO_setupPinDirection+0x10c>
    16b4:	88 0f       	add	r24, r24
    16b6:	99 1f       	adc	r25, r25
    16b8:	0a 94       	dec	r0
    16ba:	e2 f7       	brpl	.-8      	; 0x16b4 <GPIO_setupPinDirection+0x108>
    16bc:	80 95       	com	r24
    16be:	84 23       	and	r24, r20
    16c0:	8c 93       	st	X, r24
    16c2:	57 c0       	rjmp	.+174    	; 0x1772 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16c4:	8b 81       	ldd	r24, Y+3	; 0x03
    16c6:	81 30       	cpi	r24, 0x01	; 1
    16c8:	a1 f4       	brne	.+40     	; 0x16f2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    16ca:	a4 e3       	ldi	r26, 0x34	; 52
    16cc:	b0 e0       	ldi	r27, 0x00	; 0
    16ce:	e4 e3       	ldi	r30, 0x34	; 52
    16d0:	f0 e0       	ldi	r31, 0x00	; 0
    16d2:	80 81       	ld	r24, Z
    16d4:	48 2f       	mov	r20, r24
    16d6:	8a 81       	ldd	r24, Y+2	; 0x02
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 2e       	mov	r0, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <GPIO_setupPinDirection+0x13c>
    16e4:	88 0f       	add	r24, r24
    16e6:	99 1f       	adc	r25, r25
    16e8:	0a 94       	dec	r0
    16ea:	e2 f7       	brpl	.-8      	; 0x16e4 <GPIO_setupPinDirection+0x138>
    16ec:	84 2b       	or	r24, r20
    16ee:	8c 93       	st	X, r24
    16f0:	40 c0       	rjmp	.+128    	; 0x1772 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    16f2:	a4 e3       	ldi	r26, 0x34	; 52
    16f4:	b0 e0       	ldi	r27, 0x00	; 0
    16f6:	e4 e3       	ldi	r30, 0x34	; 52
    16f8:	f0 e0       	ldi	r31, 0x00	; 0
    16fa:	80 81       	ld	r24, Z
    16fc:	48 2f       	mov	r20, r24
    16fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1700:	28 2f       	mov	r18, r24
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	81 e0       	ldi	r24, 0x01	; 1
    1706:	90 e0       	ldi	r25, 0x00	; 0
    1708:	02 2e       	mov	r0, r18
    170a:	02 c0       	rjmp	.+4      	; 0x1710 <GPIO_setupPinDirection+0x164>
    170c:	88 0f       	add	r24, r24
    170e:	99 1f       	adc	r25, r25
    1710:	0a 94       	dec	r0
    1712:	e2 f7       	brpl	.-8      	; 0x170c <GPIO_setupPinDirection+0x160>
    1714:	80 95       	com	r24
    1716:	84 23       	and	r24, r20
    1718:	8c 93       	st	X, r24
    171a:	2b c0       	rjmp	.+86     	; 0x1772 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	81 30       	cpi	r24, 0x01	; 1
    1720:	a1 f4       	brne	.+40     	; 0x174a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1722:	a1 e3       	ldi	r26, 0x31	; 49
    1724:	b0 e0       	ldi	r27, 0x00	; 0
    1726:	e1 e3       	ldi	r30, 0x31	; 49
    1728:	f0 e0       	ldi	r31, 0x00	; 0
    172a:	80 81       	ld	r24, Z
    172c:	48 2f       	mov	r20, r24
    172e:	8a 81       	ldd	r24, Y+2	; 0x02
    1730:	28 2f       	mov	r18, r24
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	81 e0       	ldi	r24, 0x01	; 1
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	02 2e       	mov	r0, r18
    173a:	02 c0       	rjmp	.+4      	; 0x1740 <GPIO_setupPinDirection+0x194>
    173c:	88 0f       	add	r24, r24
    173e:	99 1f       	adc	r25, r25
    1740:	0a 94       	dec	r0
    1742:	e2 f7       	brpl	.-8      	; 0x173c <GPIO_setupPinDirection+0x190>
    1744:	84 2b       	or	r24, r20
    1746:	8c 93       	st	X, r24
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    174a:	a1 e3       	ldi	r26, 0x31	; 49
    174c:	b0 e0       	ldi	r27, 0x00	; 0
    174e:	e1 e3       	ldi	r30, 0x31	; 49
    1750:	f0 e0       	ldi	r31, 0x00	; 0
    1752:	80 81       	ld	r24, Z
    1754:	48 2f       	mov	r20, r24
    1756:	8a 81       	ldd	r24, Y+2	; 0x02
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	81 e0       	ldi	r24, 0x01	; 1
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	02 2e       	mov	r0, r18
    1762:	02 c0       	rjmp	.+4      	; 0x1768 <GPIO_setupPinDirection+0x1bc>
    1764:	88 0f       	add	r24, r24
    1766:	99 1f       	adc	r25, r25
    1768:	0a 94       	dec	r0
    176a:	e2 f7       	brpl	.-8      	; 0x1764 <GPIO_setupPinDirection+0x1b8>
    176c:	80 95       	com	r24
    176e:	84 23       	and	r24, r20
    1770:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	08 95       	ret

00001782 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1782:	df 93       	push	r29
    1784:	cf 93       	push	r28
    1786:	00 d0       	rcall	.+0      	; 0x1788 <GPIO_writePin+0x6>
    1788:	00 d0       	rcall	.+0      	; 0x178a <GPIO_writePin+0x8>
    178a:	0f 92       	push	r0
    178c:	cd b7       	in	r28, 0x3d	; 61
    178e:	de b7       	in	r29, 0x3e	; 62
    1790:	89 83       	std	Y+1, r24	; 0x01
    1792:	6a 83       	std	Y+2, r22	; 0x02
    1794:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1796:	8a 81       	ldd	r24, Y+2	; 0x02
    1798:	88 30       	cpi	r24, 0x08	; 8
    179a:	08 f0       	brcs	.+2      	; 0x179e <GPIO_writePin+0x1c>
    179c:	d5 c0       	rjmp	.+426    	; 0x1948 <GPIO_writePin+0x1c6>
    179e:	89 81       	ldd	r24, Y+1	; 0x01
    17a0:	84 30       	cpi	r24, 0x04	; 4
    17a2:	08 f0       	brcs	.+2      	; 0x17a6 <GPIO_writePin+0x24>
    17a4:	d1 c0       	rjmp	.+418    	; 0x1948 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	3d 83       	std	Y+5, r19	; 0x05
    17ae:	2c 83       	std	Y+4, r18	; 0x04
    17b0:	8c 81       	ldd	r24, Y+4	; 0x04
    17b2:	9d 81       	ldd	r25, Y+5	; 0x05
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	91 05       	cpc	r25, r1
    17b8:	09 f4       	brne	.+2      	; 0x17bc <GPIO_writePin+0x3a>
    17ba:	43 c0       	rjmp	.+134    	; 0x1842 <GPIO_writePin+0xc0>
    17bc:	2c 81       	ldd	r18, Y+4	; 0x04
    17be:	3d 81       	ldd	r19, Y+5	; 0x05
    17c0:	22 30       	cpi	r18, 0x02	; 2
    17c2:	31 05       	cpc	r19, r1
    17c4:	2c f4       	brge	.+10     	; 0x17d0 <GPIO_writePin+0x4e>
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ca:	00 97       	sbiw	r24, 0x00	; 0
    17cc:	71 f0       	breq	.+28     	; 0x17ea <GPIO_writePin+0x68>
    17ce:	bc c0       	rjmp	.+376    	; 0x1948 <GPIO_writePin+0x1c6>
    17d0:	2c 81       	ldd	r18, Y+4	; 0x04
    17d2:	3d 81       	ldd	r19, Y+5	; 0x05
    17d4:	22 30       	cpi	r18, 0x02	; 2
    17d6:	31 05       	cpc	r19, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <GPIO_writePin+0x5a>
    17da:	5f c0       	rjmp	.+190    	; 0x189a <GPIO_writePin+0x118>
    17dc:	8c 81       	ldd	r24, Y+4	; 0x04
    17de:	9d 81       	ldd	r25, Y+5	; 0x05
    17e0:	83 30       	cpi	r24, 0x03	; 3
    17e2:	91 05       	cpc	r25, r1
    17e4:	09 f4       	brne	.+2      	; 0x17e8 <GPIO_writePin+0x66>
    17e6:	85 c0       	rjmp	.+266    	; 0x18f2 <GPIO_writePin+0x170>
    17e8:	af c0       	rjmp	.+350    	; 0x1948 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	a1 f4       	brne	.+40     	; 0x1818 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    17f0:	ab e3       	ldi	r26, 0x3B	; 59
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	eb e3       	ldi	r30, 0x3B	; 59
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	48 2f       	mov	r20, r24
    17fc:	8a 81       	ldd	r24, Y+2	; 0x02
    17fe:	28 2f       	mov	r18, r24
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	02 2e       	mov	r0, r18
    1808:	02 c0       	rjmp	.+4      	; 0x180e <GPIO_writePin+0x8c>
    180a:	88 0f       	add	r24, r24
    180c:	99 1f       	adc	r25, r25
    180e:	0a 94       	dec	r0
    1810:	e2 f7       	brpl	.-8      	; 0x180a <GPIO_writePin+0x88>
    1812:	84 2b       	or	r24, r20
    1814:	8c 93       	st	X, r24
    1816:	98 c0       	rjmp	.+304    	; 0x1948 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1818:	ab e3       	ldi	r26, 0x3B	; 59
    181a:	b0 e0       	ldi	r27, 0x00	; 0
    181c:	eb e3       	ldi	r30, 0x3B	; 59
    181e:	f0 e0       	ldi	r31, 0x00	; 0
    1820:	80 81       	ld	r24, Z
    1822:	48 2f       	mov	r20, r24
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	28 2f       	mov	r18, r24
    1828:	30 e0       	ldi	r19, 0x00	; 0
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	02 2e       	mov	r0, r18
    1830:	02 c0       	rjmp	.+4      	; 0x1836 <GPIO_writePin+0xb4>
    1832:	88 0f       	add	r24, r24
    1834:	99 1f       	adc	r25, r25
    1836:	0a 94       	dec	r0
    1838:	e2 f7       	brpl	.-8      	; 0x1832 <GPIO_writePin+0xb0>
    183a:	80 95       	com	r24
    183c:	84 23       	and	r24, r20
    183e:	8c 93       	st	X, r24
    1840:	83 c0       	rjmp	.+262    	; 0x1948 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1842:	8b 81       	ldd	r24, Y+3	; 0x03
    1844:	81 30       	cpi	r24, 0x01	; 1
    1846:	a1 f4       	brne	.+40     	; 0x1870 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1848:	a8 e3       	ldi	r26, 0x38	; 56
    184a:	b0 e0       	ldi	r27, 0x00	; 0
    184c:	e8 e3       	ldi	r30, 0x38	; 56
    184e:	f0 e0       	ldi	r31, 0x00	; 0
    1850:	80 81       	ld	r24, Z
    1852:	48 2f       	mov	r20, r24
    1854:	8a 81       	ldd	r24, Y+2	; 0x02
    1856:	28 2f       	mov	r18, r24
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	81 e0       	ldi	r24, 0x01	; 1
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	02 2e       	mov	r0, r18
    1860:	02 c0       	rjmp	.+4      	; 0x1866 <GPIO_writePin+0xe4>
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	0a 94       	dec	r0
    1868:	e2 f7       	brpl	.-8      	; 0x1862 <GPIO_writePin+0xe0>
    186a:	84 2b       	or	r24, r20
    186c:	8c 93       	st	X, r24
    186e:	6c c0       	rjmp	.+216    	; 0x1948 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1870:	a8 e3       	ldi	r26, 0x38	; 56
    1872:	b0 e0       	ldi	r27, 0x00	; 0
    1874:	e8 e3       	ldi	r30, 0x38	; 56
    1876:	f0 e0       	ldi	r31, 0x00	; 0
    1878:	80 81       	ld	r24, Z
    187a:	48 2f       	mov	r20, r24
    187c:	8a 81       	ldd	r24, Y+2	; 0x02
    187e:	28 2f       	mov	r18, r24
    1880:	30 e0       	ldi	r19, 0x00	; 0
    1882:	81 e0       	ldi	r24, 0x01	; 1
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	02 2e       	mov	r0, r18
    1888:	02 c0       	rjmp	.+4      	; 0x188e <GPIO_writePin+0x10c>
    188a:	88 0f       	add	r24, r24
    188c:	99 1f       	adc	r25, r25
    188e:	0a 94       	dec	r0
    1890:	e2 f7       	brpl	.-8      	; 0x188a <GPIO_writePin+0x108>
    1892:	80 95       	com	r24
    1894:	84 23       	and	r24, r20
    1896:	8c 93       	st	X, r24
    1898:	57 c0       	rjmp	.+174    	; 0x1948 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	81 30       	cpi	r24, 0x01	; 1
    189e:	a1 f4       	brne	.+40     	; 0x18c8 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18a0:	a5 e3       	ldi	r26, 0x35	; 53
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e5 e3       	ldi	r30, 0x35	; 53
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	80 81       	ld	r24, Z
    18aa:	48 2f       	mov	r20, r24
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	28 2f       	mov	r18, r24
    18b0:	30 e0       	ldi	r19, 0x00	; 0
    18b2:	81 e0       	ldi	r24, 0x01	; 1
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	02 2e       	mov	r0, r18
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <GPIO_writePin+0x13c>
    18ba:	88 0f       	add	r24, r24
    18bc:	99 1f       	adc	r25, r25
    18be:	0a 94       	dec	r0
    18c0:	e2 f7       	brpl	.-8      	; 0x18ba <GPIO_writePin+0x138>
    18c2:	84 2b       	or	r24, r20
    18c4:	8c 93       	st	X, r24
    18c6:	40 c0       	rjmp	.+128    	; 0x1948 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    18c8:	a5 e3       	ldi	r26, 0x35	; 53
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e3       	ldi	r30, 0x35	; 53
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	48 2f       	mov	r20, r24
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	81 e0       	ldi	r24, 0x01	; 1
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	02 2e       	mov	r0, r18
    18e0:	02 c0       	rjmp	.+4      	; 0x18e6 <GPIO_writePin+0x164>
    18e2:	88 0f       	add	r24, r24
    18e4:	99 1f       	adc	r25, r25
    18e6:	0a 94       	dec	r0
    18e8:	e2 f7       	brpl	.-8      	; 0x18e2 <GPIO_writePin+0x160>
    18ea:	80 95       	com	r24
    18ec:	84 23       	and	r24, r20
    18ee:	8c 93       	st	X, r24
    18f0:	2b c0       	rjmp	.+86     	; 0x1948 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    18f2:	8b 81       	ldd	r24, Y+3	; 0x03
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	a1 f4       	brne	.+40     	; 0x1920 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    18f8:	a2 e3       	ldi	r26, 0x32	; 50
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e2 e3       	ldi	r30, 0x32	; 50
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <GPIO_writePin+0x194>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <GPIO_writePin+0x190>
    191a:	84 2b       	or	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	14 c0       	rjmp	.+40     	; 0x1948 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1920:	a2 e3       	ldi	r26, 0x32	; 50
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	e2 e3       	ldi	r30, 0x32	; 50
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	48 2f       	mov	r20, r24
    192c:	8a 81       	ldd	r24, Y+2	; 0x02
    192e:	28 2f       	mov	r18, r24
    1930:	30 e0       	ldi	r19, 0x00	; 0
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	02 2e       	mov	r0, r18
    1938:	02 c0       	rjmp	.+4      	; 0x193e <GPIO_writePin+0x1bc>
    193a:	88 0f       	add	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	0a 94       	dec	r0
    1940:	e2 f7       	brpl	.-8      	; 0x193a <GPIO_writePin+0x1b8>
    1942:	80 95       	com	r24
    1944:	84 23       	and	r24, r20
    1946:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1948:	0f 90       	pop	r0
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	cf 91       	pop	r28
    1954:	df 91       	pop	r29
    1956:	08 95       	ret

00001958 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1958:	df 93       	push	r29
    195a:	cf 93       	push	r28
    195c:	00 d0       	rcall	.+0      	; 0x195e <GPIO_readPin+0x6>
    195e:	00 d0       	rcall	.+0      	; 0x1960 <GPIO_readPin+0x8>
    1960:	0f 92       	push	r0
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	8a 83       	std	Y+2, r24	; 0x02
    1968:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    196a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    196c:	8b 81       	ldd	r24, Y+3	; 0x03
    196e:	88 30       	cpi	r24, 0x08	; 8
    1970:	08 f0       	brcs	.+2      	; 0x1974 <GPIO_readPin+0x1c>
    1972:	84 c0       	rjmp	.+264    	; 0x1a7c <GPIO_readPin+0x124>
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	84 30       	cpi	r24, 0x04	; 4
    1978:	08 f0       	brcs	.+2      	; 0x197c <GPIO_readPin+0x24>
    197a:	80 c0       	rjmp	.+256    	; 0x1a7c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    197c:	8a 81       	ldd	r24, Y+2	; 0x02
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	3d 83       	std	Y+5, r19	; 0x05
    1984:	2c 83       	std	Y+4, r18	; 0x04
    1986:	4c 81       	ldd	r20, Y+4	; 0x04
    1988:	5d 81       	ldd	r21, Y+5	; 0x05
    198a:	41 30       	cpi	r20, 0x01	; 1
    198c:	51 05       	cpc	r21, r1
    198e:	79 f1       	breq	.+94     	; 0x19ee <GPIO_readPin+0x96>
    1990:	8c 81       	ldd	r24, Y+4	; 0x04
    1992:	9d 81       	ldd	r25, Y+5	; 0x05
    1994:	82 30       	cpi	r24, 0x02	; 2
    1996:	91 05       	cpc	r25, r1
    1998:	34 f4       	brge	.+12     	; 0x19a6 <GPIO_readPin+0x4e>
    199a:	2c 81       	ldd	r18, Y+4	; 0x04
    199c:	3d 81       	ldd	r19, Y+5	; 0x05
    199e:	21 15       	cp	r18, r1
    19a0:	31 05       	cpc	r19, r1
    19a2:	69 f0       	breq	.+26     	; 0x19be <GPIO_readPin+0x66>
    19a4:	6b c0       	rjmp	.+214    	; 0x1a7c <GPIO_readPin+0x124>
    19a6:	4c 81       	ldd	r20, Y+4	; 0x04
    19a8:	5d 81       	ldd	r21, Y+5	; 0x05
    19aa:	42 30       	cpi	r20, 0x02	; 2
    19ac:	51 05       	cpc	r21, r1
    19ae:	b9 f1       	breq	.+110    	; 0x1a1e <GPIO_readPin+0xc6>
    19b0:	8c 81       	ldd	r24, Y+4	; 0x04
    19b2:	9d 81       	ldd	r25, Y+5	; 0x05
    19b4:	83 30       	cpi	r24, 0x03	; 3
    19b6:	91 05       	cpc	r25, r1
    19b8:	09 f4       	brne	.+2      	; 0x19bc <GPIO_readPin+0x64>
    19ba:	49 c0       	rjmp	.+146    	; 0x1a4e <GPIO_readPin+0xf6>
    19bc:	5f c0       	rjmp	.+190    	; 0x1a7c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19be:	e9 e3       	ldi	r30, 0x39	; 57
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	28 2f       	mov	r18, r24
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ca:	88 2f       	mov	r24, r24
    19cc:	90 e0       	ldi	r25, 0x00	; 0
    19ce:	a9 01       	movw	r20, r18
    19d0:	02 c0       	rjmp	.+4      	; 0x19d6 <GPIO_readPin+0x7e>
    19d2:	55 95       	asr	r21
    19d4:	47 95       	ror	r20
    19d6:	8a 95       	dec	r24
    19d8:	e2 f7       	brpl	.-8      	; 0x19d2 <GPIO_readPin+0x7a>
    19da:	ca 01       	movw	r24, r20
    19dc:	81 70       	andi	r24, 0x01	; 1
    19de:	90 70       	andi	r25, 0x00	; 0
    19e0:	88 23       	and	r24, r24
    19e2:	19 f0       	breq	.+6      	; 0x19ea <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	89 83       	std	Y+1, r24	; 0x01
    19e8:	49 c0       	rjmp	.+146    	; 0x1a7c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    19ea:	19 82       	std	Y+1, r1	; 0x01
    19ec:	47 c0       	rjmp	.+142    	; 0x1a7c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    19ee:	e6 e3       	ldi	r30, 0x36	; 54
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 81       	ld	r24, Z
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	8b 81       	ldd	r24, Y+3	; 0x03
    19fa:	88 2f       	mov	r24, r24
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	a9 01       	movw	r20, r18
    1a00:	02 c0       	rjmp	.+4      	; 0x1a06 <GPIO_readPin+0xae>
    1a02:	55 95       	asr	r21
    1a04:	47 95       	ror	r20
    1a06:	8a 95       	dec	r24
    1a08:	e2 f7       	brpl	.-8      	; 0x1a02 <GPIO_readPin+0xaa>
    1a0a:	ca 01       	movw	r24, r20
    1a0c:	81 70       	andi	r24, 0x01	; 1
    1a0e:	90 70       	andi	r25, 0x00	; 0
    1a10:	88 23       	and	r24, r24
    1a12:	19 f0       	breq	.+6      	; 0x1a1a <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	89 83       	std	Y+1, r24	; 0x01
    1a18:	31 c0       	rjmp	.+98     	; 0x1a7c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a1a:	19 82       	std	Y+1, r1	; 0x01
    1a1c:	2f c0       	rjmp	.+94     	; 0x1a7c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a1e:	e3 e3       	ldi	r30, 0x33	; 51
    1a20:	f0 e0       	ldi	r31, 0x00	; 0
    1a22:	80 81       	ld	r24, Z
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	88 2f       	mov	r24, r24
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	a9 01       	movw	r20, r18
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <GPIO_readPin+0xde>
    1a32:	55 95       	asr	r21
    1a34:	47 95       	ror	r20
    1a36:	8a 95       	dec	r24
    1a38:	e2 f7       	brpl	.-8      	; 0x1a32 <GPIO_readPin+0xda>
    1a3a:	ca 01       	movw	r24, r20
    1a3c:	81 70       	andi	r24, 0x01	; 1
    1a3e:	90 70       	andi	r25, 0x00	; 0
    1a40:	88 23       	and	r24, r24
    1a42:	19 f0       	breq	.+6      	; 0x1a4a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a44:	81 e0       	ldi	r24, 0x01	; 1
    1a46:	89 83       	std	Y+1, r24	; 0x01
    1a48:	19 c0       	rjmp	.+50     	; 0x1a7c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a4a:	19 82       	std	Y+1, r1	; 0x01
    1a4c:	17 c0       	rjmp	.+46     	; 0x1a7c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a4e:	e0 e3       	ldi	r30, 0x30	; 48
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	80 81       	ld	r24, Z
    1a54:	28 2f       	mov	r18, r24
    1a56:	30 e0       	ldi	r19, 0x00	; 0
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	88 2f       	mov	r24, r24
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a9 01       	movw	r20, r18
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <GPIO_readPin+0x10e>
    1a62:	55 95       	asr	r21
    1a64:	47 95       	ror	r20
    1a66:	8a 95       	dec	r24
    1a68:	e2 f7       	brpl	.-8      	; 0x1a62 <GPIO_readPin+0x10a>
    1a6a:	ca 01       	movw	r24, r20
    1a6c:	81 70       	andi	r24, 0x01	; 1
    1a6e:	90 70       	andi	r25, 0x00	; 0
    1a70:	88 23       	and	r24, r24
    1a72:	19 f0       	breq	.+6      	; 0x1a7a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1a74:	81 e0       	ldi	r24, 0x01	; 1
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	01 c0       	rjmp	.+2      	; 0x1a7c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a7a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	08 95       	ret

00001a8e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1a8e:	df 93       	push	r29
    1a90:	cf 93       	push	r28
    1a92:	00 d0       	rcall	.+0      	; 0x1a94 <GPIO_setupPortDirection+0x6>
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <GPIO_setupPortDirection+0x8>
    1a96:	cd b7       	in	r28, 0x3d	; 61
    1a98:	de b7       	in	r29, 0x3e	; 62
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	84 30       	cpi	r24, 0x04	; 4
    1aa2:	90 f5       	brcc	.+100    	; 0x1b08 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1aa4:	89 81       	ldd	r24, Y+1	; 0x01
    1aa6:	28 2f       	mov	r18, r24
    1aa8:	30 e0       	ldi	r19, 0x00	; 0
    1aaa:	3c 83       	std	Y+4, r19	; 0x04
    1aac:	2b 83       	std	Y+3, r18	; 0x03
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	81 30       	cpi	r24, 0x01	; 1
    1ab4:	91 05       	cpc	r25, r1
    1ab6:	d1 f0       	breq	.+52     	; 0x1aec <GPIO_setupPortDirection+0x5e>
    1ab8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aba:	3c 81       	ldd	r19, Y+4	; 0x04
    1abc:	22 30       	cpi	r18, 0x02	; 2
    1abe:	31 05       	cpc	r19, r1
    1ac0:	2c f4       	brge	.+10     	; 0x1acc <GPIO_setupPortDirection+0x3e>
    1ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac6:	00 97       	sbiw	r24, 0x00	; 0
    1ac8:	61 f0       	breq	.+24     	; 0x1ae2 <GPIO_setupPortDirection+0x54>
    1aca:	1e c0       	rjmp	.+60     	; 0x1b08 <GPIO_setupPortDirection+0x7a>
    1acc:	2b 81       	ldd	r18, Y+3	; 0x03
    1ace:	3c 81       	ldd	r19, Y+4	; 0x04
    1ad0:	22 30       	cpi	r18, 0x02	; 2
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	81 f0       	breq	.+32     	; 0x1af6 <GPIO_setupPortDirection+0x68>
    1ad6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad8:	9c 81       	ldd	r25, Y+4	; 0x04
    1ada:	83 30       	cpi	r24, 0x03	; 3
    1adc:	91 05       	cpc	r25, r1
    1ade:	81 f0       	breq	.+32     	; 0x1b00 <GPIO_setupPortDirection+0x72>
    1ae0:	13 c0       	rjmp	.+38     	; 0x1b08 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1ae2:	ea e3       	ldi	r30, 0x3A	; 58
    1ae4:	f0 e0       	ldi	r31, 0x00	; 0
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	80 83       	st	Z, r24
    1aea:	0e c0       	rjmp	.+28     	; 0x1b08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1aec:	e7 e3       	ldi	r30, 0x37	; 55
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	8a 81       	ldd	r24, Y+2	; 0x02
    1af2:	80 83       	st	Z, r24
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1af6:	e4 e3       	ldi	r30, 0x34	; 52
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	80 83       	st	Z, r24
    1afe:	04 c0       	rjmp	.+8      	; 0x1b08 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b00:	e1 e3       	ldi	r30, 0x31	; 49
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b08:	0f 90       	pop	r0
    1b0a:	0f 90       	pop	r0
    1b0c:	0f 90       	pop	r0
    1b0e:	0f 90       	pop	r0
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <GPIO_writePort+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <GPIO_writePort+0x8>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	84 30       	cpi	r24, 0x04	; 4
    1b2a:	90 f5       	brcc	.+100    	; 0x1b90 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	28 2f       	mov	r18, r24
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	3c 83       	std	Y+4, r19	; 0x04
    1b34:	2b 83       	std	Y+3, r18	; 0x03
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	81 30       	cpi	r24, 0x01	; 1
    1b3c:	91 05       	cpc	r25, r1
    1b3e:	d1 f0       	breq	.+52     	; 0x1b74 <GPIO_writePort+0x5e>
    1b40:	2b 81       	ldd	r18, Y+3	; 0x03
    1b42:	3c 81       	ldd	r19, Y+4	; 0x04
    1b44:	22 30       	cpi	r18, 0x02	; 2
    1b46:	31 05       	cpc	r19, r1
    1b48:	2c f4       	brge	.+10     	; 0x1b54 <GPIO_writePort+0x3e>
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	00 97       	sbiw	r24, 0x00	; 0
    1b50:	61 f0       	breq	.+24     	; 0x1b6a <GPIO_writePort+0x54>
    1b52:	1e c0       	rjmp	.+60     	; 0x1b90 <GPIO_writePort+0x7a>
    1b54:	2b 81       	ldd	r18, Y+3	; 0x03
    1b56:	3c 81       	ldd	r19, Y+4	; 0x04
    1b58:	22 30       	cpi	r18, 0x02	; 2
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	81 f0       	breq	.+32     	; 0x1b7e <GPIO_writePort+0x68>
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	9c 81       	ldd	r25, Y+4	; 0x04
    1b62:	83 30       	cpi	r24, 0x03	; 3
    1b64:	91 05       	cpc	r25, r1
    1b66:	81 f0       	breq	.+32     	; 0x1b88 <GPIO_writePort+0x72>
    1b68:	13 c0       	rjmp	.+38     	; 0x1b90 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1b6a:	eb e3       	ldi	r30, 0x3B	; 59
    1b6c:	f0 e0       	ldi	r31, 0x00	; 0
    1b6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b70:	80 83       	st	Z, r24
    1b72:	0e c0       	rjmp	.+28     	; 0x1b90 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1b74:	e8 e3       	ldi	r30, 0x38	; 56
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7a:	80 83       	st	Z, r24
    1b7c:	09 c0       	rjmp	.+18     	; 0x1b90 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1b7e:	e5 e3       	ldi	r30, 0x35	; 53
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	80 83       	st	Z, r24
    1b86:	04 c0       	rjmp	.+8      	; 0x1b90 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1b88:	e2 e3       	ldi	r30, 0x32	; 50
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b8e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b90:	0f 90       	pop	r0
    1b92:	0f 90       	pop	r0
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	00 d0       	rcall	.+0      	; 0x1ba4 <GPIO_readPort+0x6>
    1ba4:	00 d0       	rcall	.+0      	; 0x1ba6 <GPIO_readPort+0x8>
    1ba6:	cd b7       	in	r28, 0x3d	; 61
    1ba8:	de b7       	in	r29, 0x3e	; 62
    1baa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1bac:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bae:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb0:	84 30       	cpi	r24, 0x04	; 4
    1bb2:	90 f5       	brcc	.+100    	; 0x1c18 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1bb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	3c 83       	std	Y+4, r19	; 0x04
    1bbc:	2b 83       	std	Y+3, r18	; 0x03
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	81 30       	cpi	r24, 0x01	; 1
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	d1 f0       	breq	.+52     	; 0x1bfc <GPIO_readPort+0x5e>
    1bc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bca:	3c 81       	ldd	r19, Y+4	; 0x04
    1bcc:	22 30       	cpi	r18, 0x02	; 2
    1bce:	31 05       	cpc	r19, r1
    1bd0:	2c f4       	brge	.+10     	; 0x1bdc <GPIO_readPort+0x3e>
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	00 97       	sbiw	r24, 0x00	; 0
    1bd8:	61 f0       	breq	.+24     	; 0x1bf2 <GPIO_readPort+0x54>
    1bda:	1e c0       	rjmp	.+60     	; 0x1c18 <GPIO_readPort+0x7a>
    1bdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bde:	3c 81       	ldd	r19, Y+4	; 0x04
    1be0:	22 30       	cpi	r18, 0x02	; 2
    1be2:	31 05       	cpc	r19, r1
    1be4:	81 f0       	breq	.+32     	; 0x1c06 <GPIO_readPort+0x68>
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	83 30       	cpi	r24, 0x03	; 3
    1bec:	91 05       	cpc	r25, r1
    1bee:	81 f0       	breq	.+32     	; 0x1c10 <GPIO_readPort+0x72>
    1bf0:	13 c0       	rjmp	.+38     	; 0x1c18 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1bf2:	e9 e3       	ldi	r30, 0x39	; 57
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	80 81       	ld	r24, Z
    1bf8:	89 83       	std	Y+1, r24	; 0x01
    1bfa:	0e c0       	rjmp	.+28     	; 0x1c18 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1bfc:	e6 e3       	ldi	r30, 0x36	; 54
    1bfe:	f0 e0       	ldi	r31, 0x00	; 0
    1c00:	80 81       	ld	r24, Z
    1c02:	89 83       	std	Y+1, r24	; 0x01
    1c04:	09 c0       	rjmp	.+18     	; 0x1c18 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c06:	e3 e3       	ldi	r30, 0x33	; 51
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	04 c0       	rjmp	.+8      	; 0x1c18 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c10:	e0 e3       	ldi	r30, 0x30	; 48
    1c12:	f0 e0       	ldi	r31, 0x00	; 0
    1c14:	80 81       	ld	r24, Z
    1c16:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <KEYPAD_getPressedKey>:
/*
 * Description :
 * Get the pressed key of the keypad.
 */
uint8 KEYPAD_getPressedKey(void)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <KEYPAD_getPressedKey+0x6>
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;

	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	60 e0       	ldi	r22, 0x00	; 0
    1c36:	40 e0       	ldi	r20, 0x00	; 0
    1c38:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1c3c:	81 e0       	ldi	r24, 0x01	; 1
    1c3e:	61 e0       	ldi	r22, 0x01	; 1
    1c40:	40 e0       	ldi	r20, 0x00	; 0
    1c42:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	62 e0       	ldi	r22, 0x02	; 2
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1c50:	81 e0       	ldi	r24, 0x01	; 1
    1c52:	63 e0       	ldi	r22, 0x03	; 3
    1c54:	40 e0       	ldi	r20, 0x00	; 0
    1c56:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	64 e0       	ldi	r22, 0x04	; 4
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	65 e0       	ldi	r22, 0x05	; 5
    1c68:	40 e0       	ldi	r20, 0x00	; 0
    1c6a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1c6e:	81 e0       	ldi	r24, 0x01	; 1
    1c70:	66 e0       	ldi	r22, 0x06	; 6
    1c72:	40 e0       	ldi	r20, 0x00	; 0
    1c74:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>

#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	67 e0       	ldi	r22, 0x07	; 7
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
#endif

	while(1)
	{
		for(row = 0; row < KEYPAD_NUM_ROWS; row++)
    1c82:	19 82       	std	Y+1, r1	; 0x01
    1c84:	35 c0       	rjmp	.+106    	; 0x1cf0 <KEYPAD_getPressedKey+0xc8>
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	69 81       	ldd	r22, Y+1	; 0x01
    1c8a:	41 e0       	ldi	r20, 0x01	; 1
    1c8c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, LOGIC_LOW);
    1c90:	81 e0       	ldi	r24, 0x01	; 1
    1c92:	69 81       	ldd	r22, Y+1	; 0x01
    1c94:	40 e0       	ldi	r20, 0x00	; 0
    1c96:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
			for(col = 0; col < KEYPAD_NUM_COLS; col++)
    1c9a:	1a 82       	std	Y+2, r1	; 0x02
    1c9c:	1e c0       	rjmp	.+60     	; 0x1cda <KEYPAD_getPressedKey+0xb2>
			{
				if(GPIO_readPin(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+col) == LOGIC_LOW)
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	98 2f       	mov	r25, r24
    1ca2:	9c 5f       	subi	r25, 0xFC	; 252
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	69 2f       	mov	r22, r25
    1ca8:	0e 94 ac 0c 	call	0x1958	; 0x1958 <GPIO_readPin>
    1cac:	88 23       	and	r24, r24
    1cae:	91 f4       	brne	.+36     	; 0x1cd4 <KEYPAD_getPressedKey+0xac>
#endif
#elif (KEYPAD_NUM_COLS == 4)
#ifdef STANDARD_KEYPAD
					return ((row*KEYPAD_NUM_COLS)+col+1);
#else
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1cb0:	89 81       	ldd	r24, Y+1	; 0x01
    1cb2:	88 2f       	mov	r24, r24
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	98 2f       	mov	r25, r24
    1cc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc2:	89 0f       	add	r24, r25
    1cc4:	8f 5f       	subi	r24, 0xFF	; 255
    1cc6:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}
}
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	cf 91       	pop	r28
    1cd0:	df 91       	pop	r29
    1cd2:	08 95       	ret
	{
		for(row = 0; row < KEYPAD_NUM_ROWS; row++)
		{
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, PIN_OUTPUT);
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, LOGIC_LOW);
			for(col = 0; col < KEYPAD_NUM_COLS; col++)
    1cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd6:	8f 5f       	subi	r24, 0xFF	; 255
    1cd8:	8a 83       	std	Y+2, r24	; 0x02
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	84 30       	cpi	r24, 0x04	; 4
    1cde:	f8 f2       	brcs	.-66     	; 0x1c9e <KEYPAD_getPressedKey+0x76>
					return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
#endif
#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	69 81       	ldd	r22, Y+1	; 0x01
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif

	while(1)
	{
		for(row = 0; row < KEYPAD_NUM_ROWS; row++)
    1cea:	89 81       	ldd	r24, Y+1	; 0x01
    1cec:	8f 5f       	subi	r24, 0xFF	; 255
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	89 81       	ldd	r24, Y+1	; 0x01
    1cf2:	84 30       	cpi	r24, 0x04	; 4
    1cf4:	40 f2       	brcs	.-112    	; 0x1c86 <KEYPAD_getPressedKey+0x5e>
    1cf6:	c5 cf       	rjmp	.-118    	; 0x1c82 <KEYPAD_getPressedKey+0x5a>

00001cf8 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <KEYPAD_4x4_adjustKeyNumber+0x6>
    1cfe:	00 d0       	rcall	.+0      	; 0x1d00 <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d06:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	3c 83       	std	Y+4, r19	; 0x04
    1d10:	2b 83       	std	Y+3, r18	; 0x03
    1d12:	8b 81       	ldd	r24, Y+3	; 0x03
    1d14:	9c 81       	ldd	r25, Y+4	; 0x04
    1d16:	88 30       	cpi	r24, 0x08	; 8
    1d18:	91 05       	cpc	r25, r1
    1d1a:	09 f4       	brne	.+2      	; 0x1d1e <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d1c:	70 c0       	rjmp	.+224    	; 0x1dfe <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d1e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d20:	3c 81       	ldd	r19, Y+4	; 0x04
    1d22:	29 30       	cpi	r18, 0x09	; 9
    1d24:	31 05       	cpc	r19, r1
    1d26:	5c f5       	brge	.+86     	; 0x1d7e <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	84 30       	cpi	r24, 0x04	; 4
    1d2e:	91 05       	cpc	r25, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d32:	59 c0       	rjmp	.+178    	; 0x1de6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d34:	2b 81       	ldd	r18, Y+3	; 0x03
    1d36:	3c 81       	ldd	r19, Y+4	; 0x04
    1d38:	25 30       	cpi	r18, 0x05	; 5
    1d3a:	31 05       	cpc	r19, r1
    1d3c:	9c f4       	brge	.+38     	; 0x1d64 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	9c 81       	ldd	r25, Y+4	; 0x04
    1d42:	82 30       	cpi	r24, 0x02	; 2
    1d44:	91 05       	cpc	r25, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d48:	48 c0       	rjmp	.+144    	; 0x1dda <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4e:	23 30       	cpi	r18, 0x03	; 3
    1d50:	31 05       	cpc	r19, r1
    1d52:	0c f0       	brlt	.+2      	; 0x1d56 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d54:	45 c0       	rjmp	.+138    	; 0x1de0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d56:	8b 81       	ldd	r24, Y+3	; 0x03
    1d58:	9c 81       	ldd	r25, Y+4	; 0x04
    1d5a:	81 30       	cpi	r24, 0x01	; 1
    1d5c:	91 05       	cpc	r25, r1
    1d5e:	09 f4       	brne	.+2      	; 0x1d62 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d60:	39 c0       	rjmp	.+114    	; 0x1dd4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d62:	67 c0       	rjmp	.+206    	; 0x1e32 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d64:	2b 81       	ldd	r18, Y+3	; 0x03
    1d66:	3c 81       	ldd	r19, Y+4	; 0x04
    1d68:	26 30       	cpi	r18, 0x06	; 6
    1d6a:	31 05       	cpc	r19, r1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d6e:	41 c0       	rjmp	.+130    	; 0x1df2 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	9c 81       	ldd	r25, Y+4	; 0x04
    1d74:	87 30       	cpi	r24, 0x07	; 7
    1d76:	91 05       	cpc	r25, r1
    1d78:	0c f0       	brlt	.+2      	; 0x1d7c <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d7a:	3e c0       	rjmp	.+124    	; 0x1df8 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d7c:	37 c0       	rjmp	.+110    	; 0x1dec <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d80:	3c 81       	ldd	r19, Y+4	; 0x04
    1d82:	2c 30       	cpi	r18, 0x0C	; 12
    1d84:	31 05       	cpc	r19, r1
    1d86:	09 f4       	brne	.+2      	; 0x1d8a <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d88:	46 c0       	rjmp	.+140    	; 0x1e16 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8e:	8d 30       	cpi	r24, 0x0D	; 13
    1d90:	91 05       	cpc	r25, r1
    1d92:	5c f4       	brge	.+22     	; 0x1daa <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1d94:	2b 81       	ldd	r18, Y+3	; 0x03
    1d96:	3c 81       	ldd	r19, Y+4	; 0x04
    1d98:	2a 30       	cpi	r18, 0x0A	; 10
    1d9a:	31 05       	cpc	r19, r1
    1d9c:	b1 f1       	breq	.+108    	; 0x1e0a <KEYPAD_4x4_adjustKeyNumber+0x112>
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	8b 30       	cpi	r24, 0x0B	; 11
    1da4:	91 05       	cpc	r25, r1
    1da6:	a4 f5       	brge	.+104    	; 0x1e10 <KEYPAD_4x4_adjustKeyNumber+0x118>
    1da8:	2d c0       	rjmp	.+90     	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1daa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dac:	3c 81       	ldd	r19, Y+4	; 0x04
    1dae:	2e 30       	cpi	r18, 0x0E	; 14
    1db0:	31 05       	cpc	r19, r1
    1db2:	b9 f1       	breq	.+110    	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	8e 30       	cpi	r24, 0x0E	; 14
    1dba:	91 05       	cpc	r25, r1
    1dbc:	7c f1       	brlt	.+94     	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x124>
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	2f 30       	cpi	r18, 0x0F	; 15
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	79 f1       	breq	.+94     	; 0x1e26 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	80 31       	cpi	r24, 0x10	; 16
    1dce:	91 05       	cpc	r25, r1
    1dd0:	69 f1       	breq	.+90     	; 0x1e2c <KEYPAD_4x4_adjustKeyNumber+0x134>
    1dd2:	2f c0       	rjmp	.+94     	; 0x1e32 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1dd4:	87 e0       	ldi	r24, 0x07	; 7
    1dd6:	89 83       	std	Y+1, r24	; 0x01
    1dd8:	2e c0       	rjmp	.+92     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1dda:	88 e0       	ldi	r24, 0x08	; 8
    1ddc:	89 83       	std	Y+1, r24	; 0x01
    1dde:	2b c0       	rjmp	.+86     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1de0:	89 e0       	ldi	r24, 0x09	; 9
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	28 c0       	rjmp	.+80     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1de6:	85 e2       	ldi	r24, 0x25	; 37
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	25 c0       	rjmp	.+74     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1dec:	84 e0       	ldi	r24, 0x04	; 4
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	22 c0       	rjmp	.+68     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1df2:	85 e0       	ldi	r24, 0x05	; 5
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	1f c0       	rjmp	.+62     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1df8:	86 e0       	ldi	r24, 0x06	; 6
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	1c c0       	rjmp	.+56     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1dfe:	8a e2       	ldi	r24, 0x2A	; 42
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	19 c0       	rjmp	.+50     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	16 c0       	rjmp	.+44     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e0a:	82 e0       	ldi	r24, 0x02	; 2
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	13 c0       	rjmp	.+38     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e10:	83 e0       	ldi	r24, 0x03	; 3
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	10 c0       	rjmp	.+32     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e16:	8d e2       	ldi	r24, 0x2D	; 45
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	0d c0       	rjmp	.+26     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e1c:	8d e0       	ldi	r24, 0x0D	; 13
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	0a c0       	rjmp	.+20     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1e22:	19 82       	std	Y+1, r1	; 0x01
    1e24:	08 c0       	rjmp	.+16     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e26:	8d e3       	ldi	r24, 0x3D	; 61
    1e28:	89 83       	std	Y+1, r24	; 0x01
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e2c:	8b e2       	ldi	r24, 0x2B	; 43
    1e2e:	89 83       	std	Y+1, r24	; 0x01
    1e30:	02 c0       	rjmp	.+4      	; 0x1e36 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e38:	0f 90       	pop	r0
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	0f 90       	pop	r0
    1e40:	cf 91       	pop	r28
    1e42:	df 91       	pop	r29
    1e44:	08 95       	ret

00001e46 <LCD_init>:
/*
 * Description :
 * initialize the LCD and setup its mode
 */
void LCD_init()
{
    1e46:	df 93       	push	r29
    1e48:	cf 93       	push	r28
    1e4a:	cd b7       	in	r28, 0x3d	; 61
    1e4c:	de b7       	in	r29, 0x3e	; 62
    1e4e:	2e 97       	sbiw	r28, 0x0e	; 14
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	de bf       	out	0x3e, r29	; 62
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT_ID, LCD_RS_PIN_ID, PIN_OUTPUT); //RS output
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	61 e0       	ldi	r22, 0x01	; 1
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID, LCD_E_PIN_ID, PIN_OUTPUT);  //Enable output
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	62 e0       	ldi	r22, 0x02	; 2
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	a0 ea       	ldi	r26, 0xA0	; 160
    1e74:	b1 e4       	ldi	r27, 0x41	; 65
    1e76:	8b 87       	std	Y+11, r24	; 0x0b
    1e78:	9c 87       	std	Y+12, r25	; 0x0c
    1e7a:	ad 87       	std	Y+13, r26	; 0x0d
    1e7c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	4a ef       	ldi	r20, 0xFA	; 250
    1e8c:	54 e4       	ldi	r21, 0x44	; 68
    1e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e92:	dc 01       	movw	r26, r24
    1e94:	cb 01       	movw	r24, r22
    1e96:	8f 83       	std	Y+7, r24	; 0x07
    1e98:	98 87       	std	Y+8, r25	; 0x08
    1e9a:	a9 87       	std	Y+9, r26	; 0x09
    1e9c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1ea0:	78 85       	ldd	r23, Y+8	; 0x08
    1ea2:	89 85       	ldd	r24, Y+9	; 0x09
    1ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e8       	ldi	r20, 0x80	; 128
    1eac:	5f e3       	ldi	r21, 0x3F	; 63
    1eae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eb2:	88 23       	and	r24, r24
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <LCD_init+0x7a>
		__ticks = 1;
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	9e 83       	std	Y+6, r25	; 0x06
    1ebc:	8d 83       	std	Y+5, r24	; 0x05
    1ebe:	3f c0       	rjmp	.+126    	; 0x1f3e <LCD_init+0xf8>
	else if (__tmp > 65535)
    1ec0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ec2:	78 85       	ldd	r23, Y+8	; 0x08
    1ec4:	89 85       	ldd	r24, Y+9	; 0x09
    1ec6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	3f ef       	ldi	r19, 0xFF	; 255
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	57 e4       	ldi	r21, 0x47	; 71
    1ed0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	4c f5       	brge	.+82     	; 0x1f2a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ed8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eda:	7c 85       	ldd	r23, Y+12	; 0x0c
    1edc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ede:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ee0:	20 e0       	ldi	r18, 0x00	; 0
    1ee2:	30 e0       	ldi	r19, 0x00	; 0
    1ee4:	40 e2       	ldi	r20, 0x20	; 32
    1ee6:	51 e4       	ldi	r21, 0x41	; 65
    1ee8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eec:	dc 01       	movw	r26, r24
    1eee:	cb 01       	movw	r24, r22
    1ef0:	bc 01       	movw	r22, r24
    1ef2:	cd 01       	movw	r24, r26
    1ef4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ef8:	dc 01       	movw	r26, r24
    1efa:	cb 01       	movw	r24, r22
    1efc:	9e 83       	std	Y+6, r25	; 0x06
    1efe:	8d 83       	std	Y+5, r24	; 0x05
    1f00:	0f c0       	rjmp	.+30     	; 0x1f20 <LCD_init+0xda>
    1f02:	88 ec       	ldi	r24, 0xC8	; 200
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	9c 83       	std	Y+4, r25	; 0x04
    1f08:	8b 83       	std	Y+3, r24	; 0x03
    1f0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	f1 f7       	brne	.-4      	; 0x1f0e <LCD_init+0xc8>
    1f12:	9c 83       	std	Y+4, r25	; 0x04
    1f14:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	9e 83       	std	Y+6, r25	; 0x06
    1f1e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	9e 81       	ldd	r25, Y+6	; 0x06
    1f24:	00 97       	sbiw	r24, 0x00	; 0
    1f26:	69 f7       	brne	.-38     	; 0x1f02 <LCD_init+0xbc>
    1f28:	14 c0       	rjmp	.+40     	; 0x1f52 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f2a:	6f 81       	ldd	r22, Y+7	; 0x07
    1f2c:	78 85       	ldd	r23, Y+8	; 0x08
    1f2e:	89 85       	ldd	r24, Y+9	; 0x09
    1f30:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9e 83       	std	Y+6, r25	; 0x06
    1f3c:	8d 83       	std	Y+5, r24	; 0x05
    1f3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1f40:	9e 81       	ldd	r25, Y+6	; 0x06
    1f42:	9a 83       	std	Y+2, r25	; 0x02
    1f44:	89 83       	std	Y+1, r24	; 0x01
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_init+0x104>
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1f52:	80 e0       	ldi	r24, 0x00	; 0
    1f54:	63 e0       	ldi	r22, 0x03	; 3
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	64 e0       	ldi	r22, 0x04	; 4
    1f60:	41 e0       	ldi	r20, 0x01	; 1
    1f62:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1f66:	80 e0       	ldi	r24, 0x00	; 0
    1f68:	65 e0       	ldi	r22, 0x05	; 5
    1f6a:	41 e0       	ldi	r20, 0x01	; 1
    1f6c:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1f70:	80 e0       	ldi	r24, 0x00	; 0
    1f72:	66 e0       	ldi	r22, 0x06	; 6
    1f74:	41 e0       	ldi	r20, 0x01	; 1
    1f76:	0e 94 d6 0a 	call	0x15ac	; 0x15ac <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1f7a:	83 e3       	ldi	r24, 0x33	; 51
    1f7c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1f80:	82 e3       	ldi	r24, 0x32	; 50
    1f82:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1f86:	88 e2       	ldi	r24, 0x28	; 40
    1f88:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_sendCommand>
	GPIO_setupPortDirection(LCD_DATA_PORT_ID, PORT_OUTPUT);   //Data

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#endif

	LCD_sendCommand(LCD_CURSOR_OFF);
    1f8c:	8c e0       	ldi	r24, 0x0C	; 12
    1f8e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_sendCommand>

}
    1f98:	2e 96       	adiw	r28, 0x0e	; 14
    1f9a:	0f b6       	in	r0, 0x3f	; 63
    1f9c:	f8 94       	cli
    1f9e:	de bf       	out	0x3e, r29	; 62
    1fa0:	0f be       	out	0x3f, r0	; 63
    1fa2:	cd bf       	out	0x3d, r28	; 61
    1fa4:	cf 91       	pop	r28
    1fa6:	df 91       	pop	r29
    1fa8:	08 95       	ret

00001faa <LCD_sendCommand>:
/*
 * Description :
 * send command to LCD
 */
void LCD_sendCommand(uint8 command)
{
    1faa:	0f 93       	push	r16
    1fac:	1f 93       	push	r17
    1fae:	df 93       	push	r29
    1fb0:	cf 93       	push	r28
    1fb2:	cd b7       	in	r28, 0x3d	; 61
    1fb4:	de b7       	in	r29, 0x3e	; 62
    1fb6:	c3 56       	subi	r28, 0x63	; 99
    1fb8:	d0 40       	sbci	r29, 0x00	; 0
    1fba:	0f b6       	in	r0, 0x3f	; 63
    1fbc:	f8 94       	cli
    1fbe:	de bf       	out	0x3e, r29	; 62
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	cd bf       	out	0x3d, r28	; 61
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	ed 59       	subi	r30, 0x9D	; 157
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_LOW); //RS
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	61 e0       	ldi	r22, 0x01	; 1
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e1 5a       	subi	r30, 0xA1	; 161
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 e0       	ldi	r24, 0x00	; 0
    1fde:	90 e0       	ldi	r25, 0x00	; 0
    1fe0:	a0 e8       	ldi	r26, 0x80	; 128
    1fe2:	bf e3       	ldi	r27, 0x3F	; 63
    1fe4:	80 83       	st	Z, r24
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	a2 83       	std	Z+2, r26	; 0x02
    1fea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fec:	8e 01       	movw	r16, r28
    1fee:	05 5a       	subi	r16, 0xA5	; 165
    1ff0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff2:	fe 01       	movw	r30, r28
    1ff4:	e1 5a       	subi	r30, 0xA1	; 161
    1ff6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff8:	60 81       	ld	r22, Z
    1ffa:	71 81       	ldd	r23, Z+1	; 0x01
    1ffc:	82 81       	ldd	r24, Z+2	; 0x02
    1ffe:	93 81       	ldd	r25, Z+3	; 0x03
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	4a ef       	ldi	r20, 0xFA	; 250
    2006:	54 e4       	ldi	r21, 0x44	; 68
    2008:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	f8 01       	movw	r30, r16
    2012:	80 83       	st	Z, r24
    2014:	91 83       	std	Z+1, r25	; 0x01
    2016:	a2 83       	std	Z+2, r26	; 0x02
    2018:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    201a:	fe 01       	movw	r30, r28
    201c:	e5 5a       	subi	r30, 0xA5	; 165
    201e:	ff 4f       	sbci	r31, 0xFF	; 255
    2020:	60 81       	ld	r22, Z
    2022:	71 81       	ldd	r23, Z+1	; 0x01
    2024:	82 81       	ldd	r24, Z+2	; 0x02
    2026:	93 81       	ldd	r25, Z+3	; 0x03
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 e8       	ldi	r20, 0x80	; 128
    202e:	5f e3       	ldi	r21, 0x3F	; 63
    2030:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2034:	88 23       	and	r24, r24
    2036:	44 f4       	brge	.+16     	; 0x2048 <LCD_sendCommand+0x9e>
		__ticks = 1;
    2038:	fe 01       	movw	r30, r28
    203a:	e7 5a       	subi	r30, 0xA7	; 167
    203c:	ff 4f       	sbci	r31, 0xFF	; 255
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	91 83       	std	Z+1, r25	; 0x01
    2044:	80 83       	st	Z, r24
    2046:	64 c0       	rjmp	.+200    	; 0x2110 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    2048:	fe 01       	movw	r30, r28
    204a:	e5 5a       	subi	r30, 0xA5	; 165
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	60 81       	ld	r22, Z
    2050:	71 81       	ldd	r23, Z+1	; 0x01
    2052:	82 81       	ldd	r24, Z+2	; 0x02
    2054:	93 81       	ldd	r25, Z+3	; 0x03
    2056:	20 e0       	ldi	r18, 0x00	; 0
    2058:	3f ef       	ldi	r19, 0xFF	; 255
    205a:	4f e7       	ldi	r20, 0x7F	; 127
    205c:	57 e4       	ldi	r21, 0x47	; 71
    205e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2062:	18 16       	cp	r1, r24
    2064:	0c f0       	brlt	.+2      	; 0x2068 <LCD_sendCommand+0xbe>
    2066:	43 c0       	rjmp	.+134    	; 0x20ee <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2068:	fe 01       	movw	r30, r28
    206a:	e1 5a       	subi	r30, 0xA1	; 161
    206c:	ff 4f       	sbci	r31, 0xFF	; 255
    206e:	60 81       	ld	r22, Z
    2070:	71 81       	ldd	r23, Z+1	; 0x01
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	93 81       	ldd	r25, Z+3	; 0x03
    2076:	20 e0       	ldi	r18, 0x00	; 0
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	40 e2       	ldi	r20, 0x20	; 32
    207c:	51 e4       	ldi	r21, 0x41	; 65
    207e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	8e 01       	movw	r16, r28
    2088:	07 5a       	subi	r16, 0xA7	; 167
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	bc 01       	movw	r22, r24
    208e:	cd 01       	movw	r24, r26
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	f8 01       	movw	r30, r16
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	80 83       	st	Z, r24
    209e:	1f c0       	rjmp	.+62     	; 0x20de <LCD_sendCommand+0x134>
    20a0:	fe 01       	movw	r30, r28
    20a2:	e9 5a       	subi	r30, 0xA9	; 169
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	88 ec       	ldi	r24, 0xC8	; 200
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	80 83       	st	Z, r24
    20ae:	fe 01       	movw	r30, r28
    20b0:	e9 5a       	subi	r30, 0xA9	; 169
    20b2:	ff 4f       	sbci	r31, 0xFF	; 255
    20b4:	80 81       	ld	r24, Z
    20b6:	91 81       	ldd	r25, Z+1	; 0x01
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	f1 f7       	brne	.-4      	; 0x20b8 <LCD_sendCommand+0x10e>
    20bc:	fe 01       	movw	r30, r28
    20be:	e9 5a       	subi	r30, 0xA9	; 169
    20c0:	ff 4f       	sbci	r31, 0xFF	; 255
    20c2:	91 83       	std	Z+1, r25	; 0x01
    20c4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20c6:	de 01       	movw	r26, r28
    20c8:	a7 5a       	subi	r26, 0xA7	; 167
    20ca:	bf 4f       	sbci	r27, 0xFF	; 255
    20cc:	fe 01       	movw	r30, r28
    20ce:	e7 5a       	subi	r30, 0xA7	; 167
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	80 81       	ld	r24, Z
    20d4:	91 81       	ldd	r25, Z+1	; 0x01
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	11 96       	adiw	r26, 0x01	; 1
    20da:	9c 93       	st	X, r25
    20dc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20de:	fe 01       	movw	r30, r28
    20e0:	e7 5a       	subi	r30, 0xA7	; 167
    20e2:	ff 4f       	sbci	r31, 0xFF	; 255
    20e4:	80 81       	ld	r24, Z
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	d1 f6       	brne	.-76     	; 0x20a0 <LCD_sendCommand+0xf6>
    20ec:	27 c0       	rjmp	.+78     	; 0x213c <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ee:	8e 01       	movw	r16, r28
    20f0:	07 5a       	subi	r16, 0xA7	; 167
    20f2:	1f 4f       	sbci	r17, 0xFF	; 255
    20f4:	fe 01       	movw	r30, r28
    20f6:	e5 5a       	subi	r30, 0xA5	; 165
    20f8:	ff 4f       	sbci	r31, 0xFF	; 255
    20fa:	60 81       	ld	r22, Z
    20fc:	71 81       	ldd	r23, Z+1	; 0x01
    20fe:	82 81       	ldd	r24, Z+2	; 0x02
    2100:	93 81       	ldd	r25, Z+3	; 0x03
    2102:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2106:	dc 01       	movw	r26, r24
    2108:	cb 01       	movw	r24, r22
    210a:	f8 01       	movw	r30, r16
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	80 83       	st	Z, r24
    2110:	de 01       	movw	r26, r28
    2112:	ab 5a       	subi	r26, 0xAB	; 171
    2114:	bf 4f       	sbci	r27, 0xFF	; 255
    2116:	fe 01       	movw	r30, r28
    2118:	e7 5a       	subi	r30, 0xA7	; 167
    211a:	ff 4f       	sbci	r31, 0xFF	; 255
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	8d 93       	st	X+, r24
    2122:	9c 93       	st	X, r25
    2124:	fe 01       	movw	r30, r28
    2126:	eb 5a       	subi	r30, 0xAB	; 171
    2128:	ff 4f       	sbci	r31, 0xFF	; 255
    212a:	80 81       	ld	r24, Z
    212c:	91 81       	ldd	r25, Z+1	; 0x01
    212e:	01 97       	sbiw	r24, 0x01	; 1
    2130:	f1 f7       	brne	.-4      	; 0x212e <LCD_sendCommand+0x184>
    2132:	fe 01       	movw	r30, r28
    2134:	eb 5a       	subi	r30, 0xAB	; 171
    2136:	ff 4f       	sbci	r31, 0xFF	; 255
    2138:	91 83       	std	Z+1, r25	; 0x01
    213a:	80 83       	st	Z, r24
	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); //Enable
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	62 e0       	ldi	r22, 0x02	; 2
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    2146:	fe 01       	movw	r30, r28
    2148:	ef 5a       	subi	r30, 0xAF	; 175
    214a:	ff 4f       	sbci	r31, 0xFF	; 255
    214c:	80 e0       	ldi	r24, 0x00	; 0
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	a0 e8       	ldi	r26, 0x80	; 128
    2152:	bf e3       	ldi	r27, 0x3F	; 63
    2154:	80 83       	st	Z, r24
    2156:	91 83       	std	Z+1, r25	; 0x01
    2158:	a2 83       	std	Z+2, r26	; 0x02
    215a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    215c:	8e 01       	movw	r16, r28
    215e:	03 5b       	subi	r16, 0xB3	; 179
    2160:	1f 4f       	sbci	r17, 0xFF	; 255
    2162:	fe 01       	movw	r30, r28
    2164:	ef 5a       	subi	r30, 0xAF	; 175
    2166:	ff 4f       	sbci	r31, 0xFF	; 255
    2168:	60 81       	ld	r22, Z
    216a:	71 81       	ldd	r23, Z+1	; 0x01
    216c:	82 81       	ldd	r24, Z+2	; 0x02
    216e:	93 81       	ldd	r25, Z+3	; 0x03
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	30 e0       	ldi	r19, 0x00	; 0
    2174:	4a ef       	ldi	r20, 0xFA	; 250
    2176:	54 e4       	ldi	r21, 0x44	; 68
    2178:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	f8 01       	movw	r30, r16
    2182:	80 83       	st	Z, r24
    2184:	91 83       	std	Z+1, r25	; 0x01
    2186:	a2 83       	std	Z+2, r26	; 0x02
    2188:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    218a:	fe 01       	movw	r30, r28
    218c:	e3 5b       	subi	r30, 0xB3	; 179
    218e:	ff 4f       	sbci	r31, 0xFF	; 255
    2190:	60 81       	ld	r22, Z
    2192:	71 81       	ldd	r23, Z+1	; 0x01
    2194:	82 81       	ldd	r24, Z+2	; 0x02
    2196:	93 81       	ldd	r25, Z+3	; 0x03
    2198:	20 e0       	ldi	r18, 0x00	; 0
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e8       	ldi	r20, 0x80	; 128
    219e:	5f e3       	ldi	r21, 0x3F	; 63
    21a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a4:	88 23       	and	r24, r24
    21a6:	44 f4       	brge	.+16     	; 0x21b8 <LCD_sendCommand+0x20e>
		__ticks = 1;
    21a8:	fe 01       	movw	r30, r28
    21aa:	e5 5b       	subi	r30, 0xB5	; 181
    21ac:	ff 4f       	sbci	r31, 0xFF	; 255
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	91 83       	std	Z+1, r25	; 0x01
    21b4:	80 83       	st	Z, r24
    21b6:	64 c0       	rjmp	.+200    	; 0x2280 <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    21b8:	fe 01       	movw	r30, r28
    21ba:	e3 5b       	subi	r30, 0xB3	; 179
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	60 81       	ld	r22, Z
    21c0:	71 81       	ldd	r23, Z+1	; 0x01
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	93 81       	ldd	r25, Z+3	; 0x03
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	3f ef       	ldi	r19, 0xFF	; 255
    21ca:	4f e7       	ldi	r20, 0x7F	; 127
    21cc:	57 e4       	ldi	r21, 0x47	; 71
    21ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21d2:	18 16       	cp	r1, r24
    21d4:	0c f0       	brlt	.+2      	; 0x21d8 <LCD_sendCommand+0x22e>
    21d6:	43 c0       	rjmp	.+134    	; 0x225e <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	fe 01       	movw	r30, r28
    21da:	ef 5a       	subi	r30, 0xAF	; 175
    21dc:	ff 4f       	sbci	r31, 0xFF	; 255
    21de:	60 81       	ld	r22, Z
    21e0:	71 81       	ldd	r23, Z+1	; 0x01
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	93 81       	ldd	r25, Z+3	; 0x03
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	40 e2       	ldi	r20, 0x20	; 32
    21ec:	51 e4       	ldi	r21, 0x41	; 65
    21ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21f2:	dc 01       	movw	r26, r24
    21f4:	cb 01       	movw	r24, r22
    21f6:	8e 01       	movw	r16, r28
    21f8:	05 5b       	subi	r16, 0xB5	; 181
    21fa:	1f 4f       	sbci	r17, 0xFF	; 255
    21fc:	bc 01       	movw	r22, r24
    21fe:	cd 01       	movw	r24, r26
    2200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	f8 01       	movw	r30, r16
    220a:	91 83       	std	Z+1, r25	; 0x01
    220c:	80 83       	st	Z, r24
    220e:	1f c0       	rjmp	.+62     	; 0x224e <LCD_sendCommand+0x2a4>
    2210:	fe 01       	movw	r30, r28
    2212:	e7 5b       	subi	r30, 0xB7	; 183
    2214:	ff 4f       	sbci	r31, 0xFF	; 255
    2216:	88 ec       	ldi	r24, 0xC8	; 200
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	91 83       	std	Z+1, r25	; 0x01
    221c:	80 83       	st	Z, r24
    221e:	fe 01       	movw	r30, r28
    2220:	e7 5b       	subi	r30, 0xB7	; 183
    2222:	ff 4f       	sbci	r31, 0xFF	; 255
    2224:	80 81       	ld	r24, Z
    2226:	91 81       	ldd	r25, Z+1	; 0x01
    2228:	01 97       	sbiw	r24, 0x01	; 1
    222a:	f1 f7       	brne	.-4      	; 0x2228 <LCD_sendCommand+0x27e>
    222c:	fe 01       	movw	r30, r28
    222e:	e7 5b       	subi	r30, 0xB7	; 183
    2230:	ff 4f       	sbci	r31, 0xFF	; 255
    2232:	91 83       	std	Z+1, r25	; 0x01
    2234:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	de 01       	movw	r26, r28
    2238:	a5 5b       	subi	r26, 0xB5	; 181
    223a:	bf 4f       	sbci	r27, 0xFF	; 255
    223c:	fe 01       	movw	r30, r28
    223e:	e5 5b       	subi	r30, 0xB5	; 181
    2240:	ff 4f       	sbci	r31, 0xFF	; 255
    2242:	80 81       	ld	r24, Z
    2244:	91 81       	ldd	r25, Z+1	; 0x01
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	11 96       	adiw	r26, 0x01	; 1
    224a:	9c 93       	st	X, r25
    224c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224e:	fe 01       	movw	r30, r28
    2250:	e5 5b       	subi	r30, 0xB5	; 181
    2252:	ff 4f       	sbci	r31, 0xFF	; 255
    2254:	80 81       	ld	r24, Z
    2256:	91 81       	ldd	r25, Z+1	; 0x01
    2258:	00 97       	sbiw	r24, 0x00	; 0
    225a:	d1 f6       	brne	.-76     	; 0x2210 <LCD_sendCommand+0x266>
    225c:	27 c0       	rjmp	.+78     	; 0x22ac <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    225e:	8e 01       	movw	r16, r28
    2260:	05 5b       	subi	r16, 0xB5	; 181
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	fe 01       	movw	r30, r28
    2266:	e3 5b       	subi	r30, 0xB3	; 179
    2268:	ff 4f       	sbci	r31, 0xFF	; 255
    226a:	60 81       	ld	r22, Z
    226c:	71 81       	ldd	r23, Z+1	; 0x01
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2276:	dc 01       	movw	r26, r24
    2278:	cb 01       	movw	r24, r22
    227a:	f8 01       	movw	r30, r16
    227c:	91 83       	std	Z+1, r25	; 0x01
    227e:	80 83       	st	Z, r24
    2280:	de 01       	movw	r26, r28
    2282:	a9 5b       	subi	r26, 0xB9	; 185
    2284:	bf 4f       	sbci	r27, 0xFF	; 255
    2286:	fe 01       	movw	r30, r28
    2288:	e5 5b       	subi	r30, 0xB5	; 181
    228a:	ff 4f       	sbci	r31, 0xFF	; 255
    228c:	80 81       	ld	r24, Z
    228e:	91 81       	ldd	r25, Z+1	; 0x01
    2290:	8d 93       	st	X+, r24
    2292:	9c 93       	st	X, r25
    2294:	fe 01       	movw	r30, r28
    2296:	e9 5b       	subi	r30, 0xB9	; 185
    2298:	ff 4f       	sbci	r31, 0xFF	; 255
    229a:	80 81       	ld	r24, Z
    229c:	91 81       	ldd	r25, Z+1	; 0x01
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_sendCommand+0x2f4>
    22a2:	fe 01       	movw	r30, r28
    22a4:	e9 5b       	subi	r30, 0xB9	; 185
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	91 83       	std	Z+1, r25	; 0x01
    22aa:	80 83       	st	Z, r24
	_delay_ms(1);


#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    22ac:	fe 01       	movw	r30, r28
    22ae:	ed 59       	subi	r30, 0x9D	; 157
    22b0:	ff 4f       	sbci	r31, 0xFF	; 255
    22b2:	80 81       	ld	r24, Z
    22b4:	88 2f       	mov	r24, r24
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	80 71       	andi	r24, 0x10	; 16
    22ba:	90 70       	andi	r25, 0x00	; 0
    22bc:	95 95       	asr	r25
    22be:	87 95       	ror	r24
    22c0:	95 95       	asr	r25
    22c2:	87 95       	ror	r24
    22c4:	95 95       	asr	r25
    22c6:	87 95       	ror	r24
    22c8:	95 95       	asr	r25
    22ca:	87 95       	ror	r24
    22cc:	98 2f       	mov	r25, r24
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	63 e0       	ldi	r22, 0x03	; 3
    22d2:	49 2f       	mov	r20, r25
    22d4:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    22d8:	fe 01       	movw	r30, r28
    22da:	ed 59       	subi	r30, 0x9D	; 157
    22dc:	ff 4f       	sbci	r31, 0xFF	; 255
    22de:	80 81       	ld	r24, Z
    22e0:	88 2f       	mov	r24, r24
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	80 72       	andi	r24, 0x20	; 32
    22e6:	90 70       	andi	r25, 0x00	; 0
    22e8:	95 95       	asr	r25
    22ea:	87 95       	ror	r24
    22ec:	95 95       	asr	r25
    22ee:	87 95       	ror	r24
    22f0:	95 95       	asr	r25
    22f2:	87 95       	ror	r24
    22f4:	95 95       	asr	r25
    22f6:	87 95       	ror	r24
    22f8:	95 95       	asr	r25
    22fa:	87 95       	ror	r24
    22fc:	98 2f       	mov	r25, r24
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	64 e0       	ldi	r22, 0x04	; 4
    2302:	49 2f       	mov	r20, r25
    2304:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    2308:	fe 01       	movw	r30, r28
    230a:	ed 59       	subi	r30, 0x9D	; 157
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	80 81       	ld	r24, Z
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	80 74       	andi	r24, 0x40	; 64
    2316:	90 70       	andi	r25, 0x00	; 0
    2318:	08 2e       	mov	r0, r24
    231a:	89 2f       	mov	r24, r25
    231c:	00 0c       	add	r0, r0
    231e:	88 1f       	adc	r24, r24
    2320:	99 0b       	sbc	r25, r25
    2322:	00 0c       	add	r0, r0
    2324:	88 1f       	adc	r24, r24
    2326:	99 1f       	adc	r25, r25
    2328:	98 2f       	mov	r25, r24
    232a:	80 e0       	ldi	r24, 0x00	; 0
    232c:	65 e0       	ldi	r22, 0x05	; 5
    232e:	49 2f       	mov	r20, r25
    2330:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    2334:	fe 01       	movw	r30, r28
    2336:	ed 59       	subi	r30, 0x9D	; 157
    2338:	ff 4f       	sbci	r31, 0xFF	; 255
    233a:	80 81       	ld	r24, Z
    233c:	98 2f       	mov	r25, r24
    233e:	99 1f       	adc	r25, r25
    2340:	99 27       	eor	r25, r25
    2342:	99 1f       	adc	r25, r25
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	66 e0       	ldi	r22, 0x06	; 6
    2348:	49 2f       	mov	r20, r25
    234a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    234e:	fe 01       	movw	r30, r28
    2350:	ed 5b       	subi	r30, 0xBD	; 189
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	80 e0       	ldi	r24, 0x00	; 0
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e8       	ldi	r26, 0x80	; 128
    235a:	bf e3       	ldi	r27, 0x3F	; 63
    235c:	80 83       	st	Z, r24
    235e:	91 83       	std	Z+1, r25	; 0x01
    2360:	a2 83       	std	Z+2, r26	; 0x02
    2362:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2364:	8e 01       	movw	r16, r28
    2366:	01 5c       	subi	r16, 0xC1	; 193
    2368:	1f 4f       	sbci	r17, 0xFF	; 255
    236a:	fe 01       	movw	r30, r28
    236c:	ed 5b       	subi	r30, 0xBD	; 189
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	4a ef       	ldi	r20, 0xFA	; 250
    237e:	54 e4       	ldi	r21, 0x44	; 68
    2380:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2384:	dc 01       	movw	r26, r24
    2386:	cb 01       	movw	r24, r22
    2388:	f8 01       	movw	r30, r16
    238a:	80 83       	st	Z, r24
    238c:	91 83       	std	Z+1, r25	; 0x01
    238e:	a2 83       	std	Z+2, r26	; 0x02
    2390:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2392:	fe 01       	movw	r30, r28
    2394:	ff 96       	adiw	r30, 0x3f	; 63
    2396:	60 81       	ld	r22, Z
    2398:	71 81       	ldd	r23, Z+1	; 0x01
    239a:	82 81       	ldd	r24, Z+2	; 0x02
    239c:	93 81       	ldd	r25, Z+3	; 0x03
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	40 e8       	ldi	r20, 0x80	; 128
    23a4:	5f e3       	ldi	r21, 0x3F	; 63
    23a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23aa:	88 23       	and	r24, r24
    23ac:	2c f4       	brge	.+10     	; 0x23b8 <LCD_sendCommand+0x40e>
		__ticks = 1;
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	9e af       	std	Y+62, r25	; 0x3e
    23b4:	8d af       	std	Y+61, r24	; 0x3d
    23b6:	46 c0       	rjmp	.+140    	; 0x2444 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    23b8:	fe 01       	movw	r30, r28
    23ba:	ff 96       	adiw	r30, 0x3f	; 63
    23bc:	60 81       	ld	r22, Z
    23be:	71 81       	ldd	r23, Z+1	; 0x01
    23c0:	82 81       	ldd	r24, Z+2	; 0x02
    23c2:	93 81       	ldd	r25, Z+3	; 0x03
    23c4:	20 e0       	ldi	r18, 0x00	; 0
    23c6:	3f ef       	ldi	r19, 0xFF	; 255
    23c8:	4f e7       	ldi	r20, 0x7F	; 127
    23ca:	57 e4       	ldi	r21, 0x47	; 71
    23cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23d0:	18 16       	cp	r1, r24
    23d2:	64 f5       	brge	.+88     	; 0x242c <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d4:	fe 01       	movw	r30, r28
    23d6:	ed 5b       	subi	r30, 0xBD	; 189
    23d8:	ff 4f       	sbci	r31, 0xFF	; 255
    23da:	60 81       	ld	r22, Z
    23dc:	71 81       	ldd	r23, Z+1	; 0x01
    23de:	82 81       	ldd	r24, Z+2	; 0x02
    23e0:	93 81       	ldd	r25, Z+3	; 0x03
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	40 e2       	ldi	r20, 0x20	; 32
    23e8:	51 e4       	ldi	r21, 0x41	; 65
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	bc 01       	movw	r22, r24
    23f4:	cd 01       	movw	r24, r26
    23f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fa:	dc 01       	movw	r26, r24
    23fc:	cb 01       	movw	r24, r22
    23fe:	9e af       	std	Y+62, r25	; 0x3e
    2400:	8d af       	std	Y+61, r24	; 0x3d
    2402:	0f c0       	rjmp	.+30     	; 0x2422 <LCD_sendCommand+0x478>
    2404:	88 ec       	ldi	r24, 0xC8	; 200
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	9c af       	std	Y+60, r25	; 0x3c
    240a:	8b af       	std	Y+59, r24	; 0x3b
    240c:	8b ad       	ldd	r24, Y+59	; 0x3b
    240e:	9c ad       	ldd	r25, Y+60	; 0x3c
    2410:	01 97       	sbiw	r24, 0x01	; 1
    2412:	f1 f7       	brne	.-4      	; 0x2410 <LCD_sendCommand+0x466>
    2414:	9c af       	std	Y+60, r25	; 0x3c
    2416:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2418:	8d ad       	ldd	r24, Y+61	; 0x3d
    241a:	9e ad       	ldd	r25, Y+62	; 0x3e
    241c:	01 97       	sbiw	r24, 0x01	; 1
    241e:	9e af       	std	Y+62, r25	; 0x3e
    2420:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2422:	8d ad       	ldd	r24, Y+61	; 0x3d
    2424:	9e ad       	ldd	r25, Y+62	; 0x3e
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	69 f7       	brne	.-38     	; 0x2404 <LCD_sendCommand+0x45a>
    242a:	16 c0       	rjmp	.+44     	; 0x2458 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242c:	fe 01       	movw	r30, r28
    242e:	ff 96       	adiw	r30, 0x3f	; 63
    2430:	60 81       	ld	r22, Z
    2432:	71 81       	ldd	r23, Z+1	; 0x01
    2434:	82 81       	ldd	r24, Z+2	; 0x02
    2436:	93 81       	ldd	r25, Z+3	; 0x03
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9e af       	std	Y+62, r25	; 0x3e
    2442:	8d af       	std	Y+61, r24	; 0x3d
    2444:	8d ad       	ldd	r24, Y+61	; 0x3d
    2446:	9e ad       	ldd	r25, Y+62	; 0x3e
    2448:	9a af       	std	Y+58, r25	; 0x3a
    244a:	89 af       	std	Y+57, r24	; 0x39
    244c:	89 ad       	ldd	r24, Y+57	; 0x39
    244e:	9a ad       	ldd	r25, Y+58	; 0x3a
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_sendCommand+0x4a6>
    2454:	9a af       	std	Y+58, r25	; 0x3a
    2456:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2458:	80 e0       	ldi	r24, 0x00	; 0
    245a:	62 e0       	ldi	r22, 0x02	; 2
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e8       	ldi	r26, 0x80	; 128
    2468:	bf e3       	ldi	r27, 0x3F	; 63
    246a:	8d ab       	std	Y+53, r24	; 0x35
    246c:	9e ab       	std	Y+54, r25	; 0x36
    246e:	af ab       	std	Y+55, r26	; 0x37
    2470:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2472:	6d a9       	ldd	r22, Y+53	; 0x35
    2474:	7e a9       	ldd	r23, Y+54	; 0x36
    2476:	8f a9       	ldd	r24, Y+55	; 0x37
    2478:	98 ad       	ldd	r25, Y+56	; 0x38
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a ef       	ldi	r20, 0xFA	; 250
    2480:	54 e4       	ldi	r21, 0x44	; 68
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	89 ab       	std	Y+49, r24	; 0x31
    248c:	9a ab       	std	Y+50, r25	; 0x32
    248e:	ab ab       	std	Y+51, r26	; 0x33
    2490:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2492:	69 a9       	ldd	r22, Y+49	; 0x31
    2494:	7a a9       	ldd	r23, Y+50	; 0x32
    2496:	8b a9       	ldd	r24, Y+51	; 0x33
    2498:	9c a9       	ldd	r25, Y+52	; 0x34
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <LCD_sendCommand+0x50a>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	98 ab       	std	Y+48, r25	; 0x30
    24b0:	8f a7       	std	Y+47, r24	; 0x2f
    24b2:	3f c0       	rjmp	.+126    	; 0x2532 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    24b4:	69 a9       	ldd	r22, Y+49	; 0x31
    24b6:	7a a9       	ldd	r23, Y+50	; 0x32
    24b8:	8b a9       	ldd	r24, Y+51	; 0x33
    24ba:	9c a9       	ldd	r25, Y+52	; 0x34
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	4c f5       	brge	.+82     	; 0x251e <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	6d a9       	ldd	r22, Y+53	; 0x35
    24ce:	7e a9       	ldd	r23, Y+54	; 0x36
    24d0:	8f a9       	ldd	r24, Y+55	; 0x37
    24d2:	98 ad       	ldd	r25, Y+56	; 0x38
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	98 ab       	std	Y+48, r25	; 0x30
    24f2:	8f a7       	std	Y+47, r24	; 0x2f
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <LCD_sendCommand+0x56a>
    24f6:	88 ec       	ldi	r24, 0xC8	; 200
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9e a7       	std	Y+46, r25	; 0x2e
    24fc:	8d a7       	std	Y+45, r24	; 0x2d
    24fe:	8d a5       	ldd	r24, Y+45	; 0x2d
    2500:	9e a5       	ldd	r25, Y+46	; 0x2e
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_sendCommand+0x558>
    2506:	9e a7       	std	Y+46, r25	; 0x2e
    2508:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250a:	8f a5       	ldd	r24, Y+47	; 0x2f
    250c:	98 a9       	ldd	r25, Y+48	; 0x30
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	98 ab       	std	Y+48, r25	; 0x30
    2512:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2514:	8f a5       	ldd	r24, Y+47	; 0x2f
    2516:	98 a9       	ldd	r25, Y+48	; 0x30
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	69 f7       	brne	.-38     	; 0x24f6 <LCD_sendCommand+0x54c>
    251c:	14 c0       	rjmp	.+40     	; 0x2546 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251e:	69 a9       	ldd	r22, Y+49	; 0x31
    2520:	7a a9       	ldd	r23, Y+50	; 0x32
    2522:	8b a9       	ldd	r24, Y+51	; 0x33
    2524:	9c a9       	ldd	r25, Y+52	; 0x34
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	98 ab       	std	Y+48, r25	; 0x30
    2530:	8f a7       	std	Y+47, r24	; 0x2f
    2532:	8f a5       	ldd	r24, Y+47	; 0x2f
    2534:	98 a9       	ldd	r25, Y+48	; 0x30
    2536:	9c a7       	std	Y+44, r25	; 0x2c
    2538:	8b a7       	std	Y+43, r24	; 0x2b
    253a:	8b a5       	ldd	r24, Y+43	; 0x2b
    253c:	9c a5       	ldd	r25, Y+44	; 0x2c
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_sendCommand+0x594>
    2542:	9c a7       	std	Y+44, r25	; 0x2c
    2544:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2546:	80 e0       	ldi	r24, 0x00	; 0
    2548:	62 e0       	ldi	r22, 0x02	; 2
    254a:	41 e0       	ldi	r20, 0x01	; 1
    254c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    2550:	80 e0       	ldi	r24, 0x00	; 0
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	a0 e8       	ldi	r26, 0x80	; 128
    2556:	bf e3       	ldi	r27, 0x3F	; 63
    2558:	8f a3       	std	Y+39, r24	; 0x27
    255a:	98 a7       	std	Y+40, r25	; 0x28
    255c:	a9 a7       	std	Y+41, r26	; 0x29
    255e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2560:	6f a1       	ldd	r22, Y+39	; 0x27
    2562:	78 a5       	ldd	r23, Y+40	; 0x28
    2564:	89 a5       	ldd	r24, Y+41	; 0x29
    2566:	9a a5       	ldd	r25, Y+42	; 0x2a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	4a ef       	ldi	r20, 0xFA	; 250
    256e:	54 e4       	ldi	r21, 0x44	; 68
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	8b a3       	std	Y+35, r24	; 0x23
    257a:	9c a3       	std	Y+36, r25	; 0x24
    257c:	ad a3       	std	Y+37, r26	; 0x25
    257e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2580:	6b a1       	ldd	r22, Y+35	; 0x23
    2582:	7c a1       	ldd	r23, Y+36	; 0x24
    2584:	8d a1       	ldd	r24, Y+37	; 0x25
    2586:	9e a1       	ldd	r25, Y+38	; 0x26
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e8       	ldi	r20, 0x80	; 128
    258e:	5f e3       	ldi	r21, 0x3F	; 63
    2590:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2594:	88 23       	and	r24, r24
    2596:	2c f4       	brge	.+10     	; 0x25a2 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	9a a3       	std	Y+34, r25	; 0x22
    259e:	89 a3       	std	Y+33, r24	; 0x21
    25a0:	3f c0       	rjmp	.+126    	; 0x2620 <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    25a2:	6b a1       	ldd	r22, Y+35	; 0x23
    25a4:	7c a1       	ldd	r23, Y+36	; 0x24
    25a6:	8d a1       	ldd	r24, Y+37	; 0x25
    25a8:	9e a1       	ldd	r25, Y+38	; 0x26
    25aa:	20 e0       	ldi	r18, 0x00	; 0
    25ac:	3f ef       	ldi	r19, 0xFF	; 255
    25ae:	4f e7       	ldi	r20, 0x7F	; 127
    25b0:	57 e4       	ldi	r21, 0x47	; 71
    25b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25b6:	18 16       	cp	r1, r24
    25b8:	4c f5       	brge	.+82     	; 0x260c <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ba:	6f a1       	ldd	r22, Y+39	; 0x27
    25bc:	78 a5       	ldd	r23, Y+40	; 0x28
    25be:	89 a5       	ldd	r24, Y+41	; 0x29
    25c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c2:	20 e0       	ldi	r18, 0x00	; 0
    25c4:	30 e0       	ldi	r19, 0x00	; 0
    25c6:	40 e2       	ldi	r20, 0x20	; 32
    25c8:	51 e4       	ldi	r21, 0x41	; 65
    25ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	bc 01       	movw	r22, r24
    25d4:	cd 01       	movw	r24, r26
    25d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25da:	dc 01       	movw	r26, r24
    25dc:	cb 01       	movw	r24, r22
    25de:	9a a3       	std	Y+34, r25	; 0x22
    25e0:	89 a3       	std	Y+33, r24	; 0x21
    25e2:	0f c0       	rjmp	.+30     	; 0x2602 <LCD_sendCommand+0x658>
    25e4:	88 ec       	ldi	r24, 0xC8	; 200
    25e6:	90 e0       	ldi	r25, 0x00	; 0
    25e8:	98 a3       	std	Y+32, r25	; 0x20
    25ea:	8f 8f       	std	Y+31, r24	; 0x1f
    25ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25ee:	98 a1       	ldd	r25, Y+32	; 0x20
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	f1 f7       	brne	.-4      	; 0x25f0 <LCD_sendCommand+0x646>
    25f4:	98 a3       	std	Y+32, r25	; 0x20
    25f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f8:	89 a1       	ldd	r24, Y+33	; 0x21
    25fa:	9a a1       	ldd	r25, Y+34	; 0x22
    25fc:	01 97       	sbiw	r24, 0x01	; 1
    25fe:	9a a3       	std	Y+34, r25	; 0x22
    2600:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2602:	89 a1       	ldd	r24, Y+33	; 0x21
    2604:	9a a1       	ldd	r25, Y+34	; 0x22
    2606:	00 97       	sbiw	r24, 0x00	; 0
    2608:	69 f7       	brne	.-38     	; 0x25e4 <LCD_sendCommand+0x63a>
    260a:	14 c0       	rjmp	.+40     	; 0x2634 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260c:	6b a1       	ldd	r22, Y+35	; 0x23
    260e:	7c a1       	ldd	r23, Y+36	; 0x24
    2610:	8d a1       	ldd	r24, Y+37	; 0x25
    2612:	9e a1       	ldd	r25, Y+38	; 0x26
    2614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	9a a3       	std	Y+34, r25	; 0x22
    261e:	89 a3       	std	Y+33, r24	; 0x21
    2620:	89 a1       	ldd	r24, Y+33	; 0x21
    2622:	9a a1       	ldd	r25, Y+34	; 0x22
    2624:	9e 8f       	std	Y+30, r25	; 0x1e
    2626:	8d 8f       	std	Y+29, r24	; 0x1d
    2628:	8d 8d       	ldd	r24, Y+29	; 0x1d
    262a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    262c:	01 97       	sbiw	r24, 0x01	; 1
    262e:	f1 f7       	brne	.-4      	; 0x262c <LCD_sendCommand+0x682>
    2630:	9e 8f       	std	Y+30, r25	; 0x1e
    2632:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    2634:	fe 01       	movw	r30, r28
    2636:	ed 59       	subi	r30, 0x9D	; 157
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	80 81       	ld	r24, Z
    263c:	98 2f       	mov	r25, r24
    263e:	91 70       	andi	r25, 0x01	; 1
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	63 e0       	ldi	r22, 0x03	; 3
    2644:	49 2f       	mov	r20, r25
    2646:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    264a:	fe 01       	movw	r30, r28
    264c:	ed 59       	subi	r30, 0x9D	; 157
    264e:	ff 4f       	sbci	r31, 0xFF	; 255
    2650:	80 81       	ld	r24, Z
    2652:	88 2f       	mov	r24, r24
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	82 70       	andi	r24, 0x02	; 2
    2658:	90 70       	andi	r25, 0x00	; 0
    265a:	95 95       	asr	r25
    265c:	87 95       	ror	r24
    265e:	98 2f       	mov	r25, r24
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	64 e0       	ldi	r22, 0x04	; 4
    2664:	49 2f       	mov	r20, r25
    2666:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    266a:	fe 01       	movw	r30, r28
    266c:	ed 59       	subi	r30, 0x9D	; 157
    266e:	ff 4f       	sbci	r31, 0xFF	; 255
    2670:	80 81       	ld	r24, Z
    2672:	88 2f       	mov	r24, r24
    2674:	90 e0       	ldi	r25, 0x00	; 0
    2676:	84 70       	andi	r24, 0x04	; 4
    2678:	90 70       	andi	r25, 0x00	; 0
    267a:	95 95       	asr	r25
    267c:	87 95       	ror	r24
    267e:	95 95       	asr	r25
    2680:	87 95       	ror	r24
    2682:	98 2f       	mov	r25, r24
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	65 e0       	ldi	r22, 0x05	; 5
    2688:	49 2f       	mov	r20, r25
    268a:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    268e:	fe 01       	movw	r30, r28
    2690:	ed 59       	subi	r30, 0x9D	; 157
    2692:	ff 4f       	sbci	r31, 0xFF	; 255
    2694:	80 81       	ld	r24, Z
    2696:	88 2f       	mov	r24, r24
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	88 70       	andi	r24, 0x08	; 8
    269c:	90 70       	andi	r25, 0x00	; 0
    269e:	95 95       	asr	r25
    26a0:	87 95       	ror	r24
    26a2:	95 95       	asr	r25
    26a4:	87 95       	ror	r24
    26a6:	95 95       	asr	r25
    26a8:	87 95       	ror	r24
    26aa:	98 2f       	mov	r25, r24
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	66 e0       	ldi	r22, 0x06	; 6
    26b0:	49 2f       	mov	r20, r25
    26b2:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    26b6:	80 e0       	ldi	r24, 0x00	; 0
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	a0 e8       	ldi	r26, 0x80	; 128
    26bc:	bf e3       	ldi	r27, 0x3F	; 63
    26be:	89 8f       	std	Y+25, r24	; 0x19
    26c0:	9a 8f       	std	Y+26, r25	; 0x1a
    26c2:	ab 8f       	std	Y+27, r26	; 0x1b
    26c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c6:	69 8d       	ldd	r22, Y+25	; 0x19
    26c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26ce:	20 e0       	ldi	r18, 0x00	; 0
    26d0:	30 e0       	ldi	r19, 0x00	; 0
    26d2:	4a ef       	ldi	r20, 0xFA	; 250
    26d4:	54 e4       	ldi	r21, 0x44	; 68
    26d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26da:	dc 01       	movw	r26, r24
    26dc:	cb 01       	movw	r24, r22
    26de:	8d 8b       	std	Y+21, r24	; 0x15
    26e0:	9e 8b       	std	Y+22, r25	; 0x16
    26e2:	af 8b       	std	Y+23, r26	; 0x17
    26e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26e6:	6d 89       	ldd	r22, Y+21	; 0x15
    26e8:	7e 89       	ldd	r23, Y+22	; 0x16
    26ea:	8f 89       	ldd	r24, Y+23	; 0x17
    26ec:	98 8d       	ldd	r25, Y+24	; 0x18
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	40 e8       	ldi	r20, 0x80	; 128
    26f4:	5f e3       	ldi	r21, 0x3F	; 63
    26f6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26fa:	88 23       	and	r24, r24
    26fc:	2c f4       	brge	.+10     	; 0x2708 <LCD_sendCommand+0x75e>
		__ticks = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9c 8b       	std	Y+20, r25	; 0x14
    2704:	8b 8b       	std	Y+19, r24	; 0x13
    2706:	3f c0       	rjmp	.+126    	; 0x2786 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    2708:	6d 89       	ldd	r22, Y+21	; 0x15
    270a:	7e 89       	ldd	r23, Y+22	; 0x16
    270c:	8f 89       	ldd	r24, Y+23	; 0x17
    270e:	98 8d       	ldd	r25, Y+24	; 0x18
    2710:	20 e0       	ldi	r18, 0x00	; 0
    2712:	3f ef       	ldi	r19, 0xFF	; 255
    2714:	4f e7       	ldi	r20, 0x7F	; 127
    2716:	57 e4       	ldi	r21, 0x47	; 71
    2718:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    271c:	18 16       	cp	r1, r24
    271e:	4c f5       	brge	.+82     	; 0x2772 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2720:	69 8d       	ldd	r22, Y+25	; 0x19
    2722:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2724:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2726:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	40 e2       	ldi	r20, 0x20	; 32
    272e:	51 e4       	ldi	r21, 0x41	; 65
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	bc 01       	movw	r22, r24
    273a:	cd 01       	movw	r24, r26
    273c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2740:	dc 01       	movw	r26, r24
    2742:	cb 01       	movw	r24, r22
    2744:	9c 8b       	std	Y+20, r25	; 0x14
    2746:	8b 8b       	std	Y+19, r24	; 0x13
    2748:	0f c0       	rjmp	.+30     	; 0x2768 <LCD_sendCommand+0x7be>
    274a:	88 ec       	ldi	r24, 0xC8	; 200
    274c:	90 e0       	ldi	r25, 0x00	; 0
    274e:	9a 8b       	std	Y+18, r25	; 0x12
    2750:	89 8b       	std	Y+17, r24	; 0x11
    2752:	89 89       	ldd	r24, Y+17	; 0x11
    2754:	9a 89       	ldd	r25, Y+18	; 0x12
    2756:	01 97       	sbiw	r24, 0x01	; 1
    2758:	f1 f7       	brne	.-4      	; 0x2756 <LCD_sendCommand+0x7ac>
    275a:	9a 8b       	std	Y+18, r25	; 0x12
    275c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    275e:	8b 89       	ldd	r24, Y+19	; 0x13
    2760:	9c 89       	ldd	r25, Y+20	; 0x14
    2762:	01 97       	sbiw	r24, 0x01	; 1
    2764:	9c 8b       	std	Y+20, r25	; 0x14
    2766:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2768:	8b 89       	ldd	r24, Y+19	; 0x13
    276a:	9c 89       	ldd	r25, Y+20	; 0x14
    276c:	00 97       	sbiw	r24, 0x00	; 0
    276e:	69 f7       	brne	.-38     	; 0x274a <LCD_sendCommand+0x7a0>
    2770:	14 c0       	rjmp	.+40     	; 0x279a <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2772:	6d 89       	ldd	r22, Y+21	; 0x15
    2774:	7e 89       	ldd	r23, Y+22	; 0x16
    2776:	8f 89       	ldd	r24, Y+23	; 0x17
    2778:	98 8d       	ldd	r25, Y+24	; 0x18
    277a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9c 8b       	std	Y+20, r25	; 0x14
    2784:	8b 8b       	std	Y+19, r24	; 0x13
    2786:	8b 89       	ldd	r24, Y+19	; 0x13
    2788:	9c 89       	ldd	r25, Y+20	; 0x14
    278a:	98 8b       	std	Y+16, r25	; 0x10
    278c:	8f 87       	std	Y+15, r24	; 0x0f
    278e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2790:	98 89       	ldd	r25, Y+16	; 0x10
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	f1 f7       	brne	.-4      	; 0x2792 <LCD_sendCommand+0x7e8>
    2796:	98 8b       	std	Y+16, r25	; 0x10
    2798:	8f 87       	std	Y+15, r24	; 0x0f
#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
#endif
	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	62 e0       	ldi	r22, 0x02	; 2
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    27a4:	80 e0       	ldi	r24, 0x00	; 0
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	a0 e8       	ldi	r26, 0x80	; 128
    27aa:	bf e3       	ldi	r27, 0x3F	; 63
    27ac:	8b 87       	std	Y+11, r24	; 0x0b
    27ae:	9c 87       	std	Y+12, r25	; 0x0c
    27b0:	ad 87       	std	Y+13, r26	; 0x0d
    27b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    27b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    27b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    27ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	4a ef       	ldi	r20, 0xFA	; 250
    27c2:	54 e4       	ldi	r21, 0x44	; 68
    27c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c8:	dc 01       	movw	r26, r24
    27ca:	cb 01       	movw	r24, r22
    27cc:	8f 83       	std	Y+7, r24	; 0x07
    27ce:	98 87       	std	Y+8, r25	; 0x08
    27d0:	a9 87       	std	Y+9, r26	; 0x09
    27d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27d4:	6f 81       	ldd	r22, Y+7	; 0x07
    27d6:	78 85       	ldd	r23, Y+8	; 0x08
    27d8:	89 85       	ldd	r24, Y+9	; 0x09
    27da:	9a 85       	ldd	r25, Y+10	; 0x0a
    27dc:	20 e0       	ldi	r18, 0x00	; 0
    27de:	30 e0       	ldi	r19, 0x00	; 0
    27e0:	40 e8       	ldi	r20, 0x80	; 128
    27e2:	5f e3       	ldi	r21, 0x3F	; 63
    27e4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27e8:	88 23       	and	r24, r24
    27ea:	2c f4       	brge	.+10     	; 0x27f6 <LCD_sendCommand+0x84c>
		__ticks = 1;
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
    27f4:	3f c0       	rjmp	.+126    	; 0x2874 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    27f6:	6f 81       	ldd	r22, Y+7	; 0x07
    27f8:	78 85       	ldd	r23, Y+8	; 0x08
    27fa:	89 85       	ldd	r24, Y+9	; 0x09
    27fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	3f ef       	ldi	r19, 0xFF	; 255
    2802:	4f e7       	ldi	r20, 0x7F	; 127
    2804:	57 e4       	ldi	r21, 0x47	; 71
    2806:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    280a:	18 16       	cp	r1, r24
    280c:	4c f5       	brge	.+82     	; 0x2860 <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    280e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2810:	7c 85       	ldd	r23, Y+12	; 0x0c
    2812:	8d 85       	ldd	r24, Y+13	; 0x0d
    2814:	9e 85       	ldd	r25, Y+14	; 0x0e
    2816:	20 e0       	ldi	r18, 0x00	; 0
    2818:	30 e0       	ldi	r19, 0x00	; 0
    281a:	40 e2       	ldi	r20, 0x20	; 32
    281c:	51 e4       	ldi	r21, 0x41	; 65
    281e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2822:	dc 01       	movw	r26, r24
    2824:	cb 01       	movw	r24, r22
    2826:	bc 01       	movw	r22, r24
    2828:	cd 01       	movw	r24, r26
    282a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	9e 83       	std	Y+6, r25	; 0x06
    2834:	8d 83       	std	Y+5, r24	; 0x05
    2836:	0f c0       	rjmp	.+30     	; 0x2856 <LCD_sendCommand+0x8ac>
    2838:	88 ec       	ldi	r24, 0xC8	; 200
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	9c 83       	std	Y+4, r25	; 0x04
    283e:	8b 83       	std	Y+3, r24	; 0x03
    2840:	8b 81       	ldd	r24, Y+3	; 0x03
    2842:	9c 81       	ldd	r25, Y+4	; 0x04
    2844:	01 97       	sbiw	r24, 0x01	; 1
    2846:	f1 f7       	brne	.-4      	; 0x2844 <LCD_sendCommand+0x89a>
    2848:	9c 83       	std	Y+4, r25	; 0x04
    284a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    284c:	8d 81       	ldd	r24, Y+5	; 0x05
    284e:	9e 81       	ldd	r25, Y+6	; 0x06
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	9e 83       	std	Y+6, r25	; 0x06
    2854:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2856:	8d 81       	ldd	r24, Y+5	; 0x05
    2858:	9e 81       	ldd	r25, Y+6	; 0x06
    285a:	00 97       	sbiw	r24, 0x00	; 0
    285c:	69 f7       	brne	.-38     	; 0x2838 <LCD_sendCommand+0x88e>
    285e:	14 c0       	rjmp	.+40     	; 0x2888 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2860:	6f 81       	ldd	r22, Y+7	; 0x07
    2862:	78 85       	ldd	r23, Y+8	; 0x08
    2864:	89 85       	ldd	r24, Y+9	; 0x09
    2866:	9a 85       	ldd	r25, Y+10	; 0x0a
    2868:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	8d 83       	std	Y+5, r24	; 0x05
    2874:	8d 81       	ldd	r24, Y+5	; 0x05
    2876:	9e 81       	ldd	r25, Y+6	; 0x06
    2878:	9a 83       	std	Y+2, r25	; 0x02
    287a:	89 83       	std	Y+1, r24	; 0x01
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	9a 81       	ldd	r25, Y+2	; 0x02
    2880:	01 97       	sbiw	r24, 0x01	; 1
    2882:	f1 f7       	brne	.-4      	; 0x2880 <LCD_sendCommand+0x8d6>
    2884:	9a 83       	std	Y+2, r25	; 0x02
    2886:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2888:	cd 59       	subi	r28, 0x9D	; 157
    288a:	df 4f       	sbci	r29, 0xFF	; 255
    288c:	0f b6       	in	r0, 0x3f	; 63
    288e:	f8 94       	cli
    2890:	de bf       	out	0x3e, r29	; 62
    2892:	0f be       	out	0x3f, r0	; 63
    2894:	cd bf       	out	0x3d, r28	; 61
    2896:	cf 91       	pop	r28
    2898:	df 91       	pop	r29
    289a:	1f 91       	pop	r17
    289c:	0f 91       	pop	r16
    289e:	08 95       	ret

000028a0 <LCD_displayCharacter>:
/*
 * Description :
 * Display character on LCD
 */
void LCD_displayCharacter(uint8 data)
{
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	df 93       	push	r29
    28a6:	cf 93       	push	r28
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	c3 56       	subi	r28, 0x63	; 99
    28ae:	d0 40       	sbci	r29, 0x00	; 0
    28b0:	0f b6       	in	r0, 0x3f	; 63
    28b2:	f8 94       	cli
    28b4:	de bf       	out	0x3e, r29	; 62
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	cd bf       	out	0x3d, r28	; 61
    28ba:	fe 01       	movw	r30, r28
    28bc:	ed 59       	subi	r30, 0x9D	; 157
    28be:	ff 4f       	sbci	r31, 0xFF	; 255
    28c0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID, LCD_RS_PIN_ID, LOGIC_HIGH); //RS
    28c2:	80 e0       	ldi	r24, 0x00	; 0
    28c4:	61 e0       	ldi	r22, 0x01	; 1
    28c6:	41 e0       	ldi	r20, 0x01	; 1
    28c8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    28cc:	fe 01       	movw	r30, r28
    28ce:	e1 5a       	subi	r30, 0xA1	; 161
    28d0:	ff 4f       	sbci	r31, 0xFF	; 255
    28d2:	80 e0       	ldi	r24, 0x00	; 0
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	a0 e8       	ldi	r26, 0x80	; 128
    28d8:	bf e3       	ldi	r27, 0x3F	; 63
    28da:	80 83       	st	Z, r24
    28dc:	91 83       	std	Z+1, r25	; 0x01
    28de:	a2 83       	std	Z+2, r26	; 0x02
    28e0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28e2:	8e 01       	movw	r16, r28
    28e4:	05 5a       	subi	r16, 0xA5	; 165
    28e6:	1f 4f       	sbci	r17, 0xFF	; 255
    28e8:	fe 01       	movw	r30, r28
    28ea:	e1 5a       	subi	r30, 0xA1	; 161
    28ec:	ff 4f       	sbci	r31, 0xFF	; 255
    28ee:	60 81       	ld	r22, Z
    28f0:	71 81       	ldd	r23, Z+1	; 0x01
    28f2:	82 81       	ldd	r24, Z+2	; 0x02
    28f4:	93 81       	ldd	r25, Z+3	; 0x03
    28f6:	20 e0       	ldi	r18, 0x00	; 0
    28f8:	30 e0       	ldi	r19, 0x00	; 0
    28fa:	4a ef       	ldi	r20, 0xFA	; 250
    28fc:	54 e4       	ldi	r21, 0x44	; 68
    28fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	f8 01       	movw	r30, r16
    2908:	80 83       	st	Z, r24
    290a:	91 83       	std	Z+1, r25	; 0x01
    290c:	a2 83       	std	Z+2, r26	; 0x02
    290e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2910:	fe 01       	movw	r30, r28
    2912:	e5 5a       	subi	r30, 0xA5	; 165
    2914:	ff 4f       	sbci	r31, 0xFF	; 255
    2916:	60 81       	ld	r22, Z
    2918:	71 81       	ldd	r23, Z+1	; 0x01
    291a:	82 81       	ldd	r24, Z+2	; 0x02
    291c:	93 81       	ldd	r25, Z+3	; 0x03
    291e:	20 e0       	ldi	r18, 0x00	; 0
    2920:	30 e0       	ldi	r19, 0x00	; 0
    2922:	40 e8       	ldi	r20, 0x80	; 128
    2924:	5f e3       	ldi	r21, 0x3F	; 63
    2926:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    292a:	88 23       	and	r24, r24
    292c:	44 f4       	brge	.+16     	; 0x293e <LCD_displayCharacter+0x9e>
		__ticks = 1;
    292e:	fe 01       	movw	r30, r28
    2930:	e7 5a       	subi	r30, 0xA7	; 167
    2932:	ff 4f       	sbci	r31, 0xFF	; 255
    2934:	81 e0       	ldi	r24, 0x01	; 1
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	91 83       	std	Z+1, r25	; 0x01
    293a:	80 83       	st	Z, r24
    293c:	64 c0       	rjmp	.+200    	; 0x2a06 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    293e:	fe 01       	movw	r30, r28
    2940:	e5 5a       	subi	r30, 0xA5	; 165
    2942:	ff 4f       	sbci	r31, 0xFF	; 255
    2944:	60 81       	ld	r22, Z
    2946:	71 81       	ldd	r23, Z+1	; 0x01
    2948:	82 81       	ldd	r24, Z+2	; 0x02
    294a:	93 81       	ldd	r25, Z+3	; 0x03
    294c:	20 e0       	ldi	r18, 0x00	; 0
    294e:	3f ef       	ldi	r19, 0xFF	; 255
    2950:	4f e7       	ldi	r20, 0x7F	; 127
    2952:	57 e4       	ldi	r21, 0x47	; 71
    2954:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2958:	18 16       	cp	r1, r24
    295a:	0c f0       	brlt	.+2      	; 0x295e <LCD_displayCharacter+0xbe>
    295c:	43 c0       	rjmp	.+134    	; 0x29e4 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    295e:	fe 01       	movw	r30, r28
    2960:	e1 5a       	subi	r30, 0xA1	; 161
    2962:	ff 4f       	sbci	r31, 0xFF	; 255
    2964:	60 81       	ld	r22, Z
    2966:	71 81       	ldd	r23, Z+1	; 0x01
    2968:	82 81       	ldd	r24, Z+2	; 0x02
    296a:	93 81       	ldd	r25, Z+3	; 0x03
    296c:	20 e0       	ldi	r18, 0x00	; 0
    296e:	30 e0       	ldi	r19, 0x00	; 0
    2970:	40 e2       	ldi	r20, 0x20	; 32
    2972:	51 e4       	ldi	r21, 0x41	; 65
    2974:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2978:	dc 01       	movw	r26, r24
    297a:	cb 01       	movw	r24, r22
    297c:	8e 01       	movw	r16, r28
    297e:	07 5a       	subi	r16, 0xA7	; 167
    2980:	1f 4f       	sbci	r17, 0xFF	; 255
    2982:	bc 01       	movw	r22, r24
    2984:	cd 01       	movw	r24, r26
    2986:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    298a:	dc 01       	movw	r26, r24
    298c:	cb 01       	movw	r24, r22
    298e:	f8 01       	movw	r30, r16
    2990:	91 83       	std	Z+1, r25	; 0x01
    2992:	80 83       	st	Z, r24
    2994:	1f c0       	rjmp	.+62     	; 0x29d4 <LCD_displayCharacter+0x134>
    2996:	fe 01       	movw	r30, r28
    2998:	e9 5a       	subi	r30, 0xA9	; 169
    299a:	ff 4f       	sbci	r31, 0xFF	; 255
    299c:	88 ec       	ldi	r24, 0xC8	; 200
    299e:	90 e0       	ldi	r25, 0x00	; 0
    29a0:	91 83       	std	Z+1, r25	; 0x01
    29a2:	80 83       	st	Z, r24
    29a4:	fe 01       	movw	r30, r28
    29a6:	e9 5a       	subi	r30, 0xA9	; 169
    29a8:	ff 4f       	sbci	r31, 0xFF	; 255
    29aa:	80 81       	ld	r24, Z
    29ac:	91 81       	ldd	r25, Z+1	; 0x01
    29ae:	01 97       	sbiw	r24, 0x01	; 1
    29b0:	f1 f7       	brne	.-4      	; 0x29ae <LCD_displayCharacter+0x10e>
    29b2:	fe 01       	movw	r30, r28
    29b4:	e9 5a       	subi	r30, 0xA9	; 169
    29b6:	ff 4f       	sbci	r31, 0xFF	; 255
    29b8:	91 83       	std	Z+1, r25	; 0x01
    29ba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29bc:	de 01       	movw	r26, r28
    29be:	a7 5a       	subi	r26, 0xA7	; 167
    29c0:	bf 4f       	sbci	r27, 0xFF	; 255
    29c2:	fe 01       	movw	r30, r28
    29c4:	e7 5a       	subi	r30, 0xA7	; 167
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	91 81       	ldd	r25, Z+1	; 0x01
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	11 96       	adiw	r26, 0x01	; 1
    29d0:	9c 93       	st	X, r25
    29d2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d4:	fe 01       	movw	r30, r28
    29d6:	e7 5a       	subi	r30, 0xA7	; 167
    29d8:	ff 4f       	sbci	r31, 0xFF	; 255
    29da:	80 81       	ld	r24, Z
    29dc:	91 81       	ldd	r25, Z+1	; 0x01
    29de:	00 97       	sbiw	r24, 0x00	; 0
    29e0:	d1 f6       	brne	.-76     	; 0x2996 <LCD_displayCharacter+0xf6>
    29e2:	27 c0       	rjmp	.+78     	; 0x2a32 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29e4:	8e 01       	movw	r16, r28
    29e6:	07 5a       	subi	r16, 0xA7	; 167
    29e8:	1f 4f       	sbci	r17, 0xFF	; 255
    29ea:	fe 01       	movw	r30, r28
    29ec:	e5 5a       	subi	r30, 0xA5	; 165
    29ee:	ff 4f       	sbci	r31, 0xFF	; 255
    29f0:	60 81       	ld	r22, Z
    29f2:	71 81       	ldd	r23, Z+1	; 0x01
    29f4:	82 81       	ldd	r24, Z+2	; 0x02
    29f6:	93 81       	ldd	r25, Z+3	; 0x03
    29f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fc:	dc 01       	movw	r26, r24
    29fe:	cb 01       	movw	r24, r22
    2a00:	f8 01       	movw	r30, r16
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	80 83       	st	Z, r24
    2a06:	de 01       	movw	r26, r28
    2a08:	ab 5a       	subi	r26, 0xAB	; 171
    2a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e7 5a       	subi	r30, 0xA7	; 167
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	91 81       	ldd	r25, Z+1	; 0x01
    2a16:	8d 93       	st	X+, r24
    2a18:	9c 93       	st	X, r25
    2a1a:	fe 01       	movw	r30, r28
    2a1c:	eb 5a       	subi	r30, 0xAB	; 171
    2a1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a20:	80 81       	ld	r24, Z
    2a22:	91 81       	ldd	r25, Z+1	; 0x01
    2a24:	01 97       	sbiw	r24, 0x01	; 1
    2a26:	f1 f7       	brne	.-4      	; 0x2a24 <LCD_displayCharacter+0x184>
    2a28:	fe 01       	movw	r30, r28
    2a2a:	eb 5a       	subi	r30, 0xAB	; 171
    2a2c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2e:	91 83       	std	Z+1, r25	; 0x01
    2a30:	80 83       	st	Z, r24
	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_HIGH); //Enable
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	62 e0       	ldi	r22, 0x02	; 2
    2a36:	41 e0       	ldi	r20, 0x01	; 1
    2a38:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    2a3c:	fe 01       	movw	r30, r28
    2a3e:	ef 5a       	subi	r30, 0xAF	; 175
    2a40:	ff 4f       	sbci	r31, 0xFF	; 255
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	a0 e8       	ldi	r26, 0x80	; 128
    2a48:	bf e3       	ldi	r27, 0x3F	; 63
    2a4a:	80 83       	st	Z, r24
    2a4c:	91 83       	std	Z+1, r25	; 0x01
    2a4e:	a2 83       	std	Z+2, r26	; 0x02
    2a50:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a52:	8e 01       	movw	r16, r28
    2a54:	03 5b       	subi	r16, 0xB3	; 179
    2a56:	1f 4f       	sbci	r17, 0xFF	; 255
    2a58:	fe 01       	movw	r30, r28
    2a5a:	ef 5a       	subi	r30, 0xAF	; 175
    2a5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5e:	60 81       	ld	r22, Z
    2a60:	71 81       	ldd	r23, Z+1	; 0x01
    2a62:	82 81       	ldd	r24, Z+2	; 0x02
    2a64:	93 81       	ldd	r25, Z+3	; 0x03
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	4a ef       	ldi	r20, 0xFA	; 250
    2a6c:	54 e4       	ldi	r21, 0x44	; 68
    2a6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a72:	dc 01       	movw	r26, r24
    2a74:	cb 01       	movw	r24, r22
    2a76:	f8 01       	movw	r30, r16
    2a78:	80 83       	st	Z, r24
    2a7a:	91 83       	std	Z+1, r25	; 0x01
    2a7c:	a2 83       	std	Z+2, r26	; 0x02
    2a7e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a80:	fe 01       	movw	r30, r28
    2a82:	e3 5b       	subi	r30, 0xB3	; 179
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	60 81       	ld	r22, Z
    2a88:	71 81       	ldd	r23, Z+1	; 0x01
    2a8a:	82 81       	ldd	r24, Z+2	; 0x02
    2a8c:	93 81       	ldd	r25, Z+3	; 0x03
    2a8e:	20 e0       	ldi	r18, 0x00	; 0
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	40 e8       	ldi	r20, 0x80	; 128
    2a94:	5f e3       	ldi	r21, 0x3F	; 63
    2a96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a9a:	88 23       	and	r24, r24
    2a9c:	44 f4       	brge	.+16     	; 0x2aae <LCD_displayCharacter+0x20e>
		__ticks = 1;
    2a9e:	fe 01       	movw	r30, r28
    2aa0:	e5 5b       	subi	r30, 0xB5	; 181
    2aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	91 83       	std	Z+1, r25	; 0x01
    2aaa:	80 83       	st	Z, r24
    2aac:	64 c0       	rjmp	.+200    	; 0x2b76 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    2aae:	fe 01       	movw	r30, r28
    2ab0:	e3 5b       	subi	r30, 0xB3	; 179
    2ab2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ab4:	60 81       	ld	r22, Z
    2ab6:	71 81       	ldd	r23, Z+1	; 0x01
    2ab8:	82 81       	ldd	r24, Z+2	; 0x02
    2aba:	93 81       	ldd	r25, Z+3	; 0x03
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	3f ef       	ldi	r19, 0xFF	; 255
    2ac0:	4f e7       	ldi	r20, 0x7F	; 127
    2ac2:	57 e4       	ldi	r21, 0x47	; 71
    2ac4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ac8:	18 16       	cp	r1, r24
    2aca:	0c f0       	brlt	.+2      	; 0x2ace <LCD_displayCharacter+0x22e>
    2acc:	43 c0       	rjmp	.+134    	; 0x2b54 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ace:	fe 01       	movw	r30, r28
    2ad0:	ef 5a       	subi	r30, 0xAF	; 175
    2ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	40 e2       	ldi	r20, 0x20	; 32
    2ae2:	51 e4       	ldi	r21, 0x41	; 65
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	8e 01       	movw	r16, r28
    2aee:	05 5b       	subi	r16, 0xB5	; 181
    2af0:	1f 4f       	sbci	r17, 0xFF	; 255
    2af2:	bc 01       	movw	r22, r24
    2af4:	cd 01       	movw	r24, r26
    2af6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2afa:	dc 01       	movw	r26, r24
    2afc:	cb 01       	movw	r24, r22
    2afe:	f8 01       	movw	r30, r16
    2b00:	91 83       	std	Z+1, r25	; 0x01
    2b02:	80 83       	st	Z, r24
    2b04:	1f c0       	rjmp	.+62     	; 0x2b44 <LCD_displayCharacter+0x2a4>
    2b06:	fe 01       	movw	r30, r28
    2b08:	e7 5b       	subi	r30, 0xB7	; 183
    2b0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b0c:	88 ec       	ldi	r24, 0xC8	; 200
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	91 83       	std	Z+1, r25	; 0x01
    2b12:	80 83       	st	Z, r24
    2b14:	fe 01       	movw	r30, r28
    2b16:	e7 5b       	subi	r30, 0xB7	; 183
    2b18:	ff 4f       	sbci	r31, 0xFF	; 255
    2b1a:	80 81       	ld	r24, Z
    2b1c:	91 81       	ldd	r25, Z+1	; 0x01
    2b1e:	01 97       	sbiw	r24, 0x01	; 1
    2b20:	f1 f7       	brne	.-4      	; 0x2b1e <LCD_displayCharacter+0x27e>
    2b22:	fe 01       	movw	r30, r28
    2b24:	e7 5b       	subi	r30, 0xB7	; 183
    2b26:	ff 4f       	sbci	r31, 0xFF	; 255
    2b28:	91 83       	std	Z+1, r25	; 0x01
    2b2a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b2c:	de 01       	movw	r26, r28
    2b2e:	a5 5b       	subi	r26, 0xB5	; 181
    2b30:	bf 4f       	sbci	r27, 0xFF	; 255
    2b32:	fe 01       	movw	r30, r28
    2b34:	e5 5b       	subi	r30, 0xB5	; 181
    2b36:	ff 4f       	sbci	r31, 0xFF	; 255
    2b38:	80 81       	ld	r24, Z
    2b3a:	91 81       	ldd	r25, Z+1	; 0x01
    2b3c:	01 97       	sbiw	r24, 0x01	; 1
    2b3e:	11 96       	adiw	r26, 0x01	; 1
    2b40:	9c 93       	st	X, r25
    2b42:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b44:	fe 01       	movw	r30, r28
    2b46:	e5 5b       	subi	r30, 0xB5	; 181
    2b48:	ff 4f       	sbci	r31, 0xFF	; 255
    2b4a:	80 81       	ld	r24, Z
    2b4c:	91 81       	ldd	r25, Z+1	; 0x01
    2b4e:	00 97       	sbiw	r24, 0x00	; 0
    2b50:	d1 f6       	brne	.-76     	; 0x2b06 <LCD_displayCharacter+0x266>
    2b52:	27 c0       	rjmp	.+78     	; 0x2ba2 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b54:	8e 01       	movw	r16, r28
    2b56:	05 5b       	subi	r16, 0xB5	; 181
    2b58:	1f 4f       	sbci	r17, 0xFF	; 255
    2b5a:	fe 01       	movw	r30, r28
    2b5c:	e3 5b       	subi	r30, 0xB3	; 179
    2b5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b60:	60 81       	ld	r22, Z
    2b62:	71 81       	ldd	r23, Z+1	; 0x01
    2b64:	82 81       	ldd	r24, Z+2	; 0x02
    2b66:	93 81       	ldd	r25, Z+3	; 0x03
    2b68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6c:	dc 01       	movw	r26, r24
    2b6e:	cb 01       	movw	r24, r22
    2b70:	f8 01       	movw	r30, r16
    2b72:	91 83       	std	Z+1, r25	; 0x01
    2b74:	80 83       	st	Z, r24
    2b76:	de 01       	movw	r26, r28
    2b78:	a9 5b       	subi	r26, 0xB9	; 185
    2b7a:	bf 4f       	sbci	r27, 0xFF	; 255
    2b7c:	fe 01       	movw	r30, r28
    2b7e:	e5 5b       	subi	r30, 0xB5	; 181
    2b80:	ff 4f       	sbci	r31, 0xFF	; 255
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	8d 93       	st	X+, r24
    2b88:	9c 93       	st	X, r25
    2b8a:	fe 01       	movw	r30, r28
    2b8c:	e9 5b       	subi	r30, 0xB9	; 185
    2b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    2b90:	80 81       	ld	r24, Z
    2b92:	91 81       	ldd	r25, Z+1	; 0x01
    2b94:	01 97       	sbiw	r24, 0x01	; 1
    2b96:	f1 f7       	brne	.-4      	; 0x2b94 <LCD_displayCharacter+0x2f4>
    2b98:	fe 01       	movw	r30, r28
    2b9a:	e9 5b       	subi	r30, 0xB9	; 185
    2b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    2b9e:	91 83       	std	Z+1, r25	; 0x01
    2ba0:	80 83       	st	Z, r24
	_delay_ms(1);

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2ba2:	fe 01       	movw	r30, r28
    2ba4:	ed 59       	subi	r30, 0x9D	; 157
    2ba6:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba8:	80 81       	ld	r24, Z
    2baa:	88 2f       	mov	r24, r24
    2bac:	90 e0       	ldi	r25, 0x00	; 0
    2bae:	80 71       	andi	r24, 0x10	; 16
    2bb0:	90 70       	andi	r25, 0x00	; 0
    2bb2:	95 95       	asr	r25
    2bb4:	87 95       	ror	r24
    2bb6:	95 95       	asr	r25
    2bb8:	87 95       	ror	r24
    2bba:	95 95       	asr	r25
    2bbc:	87 95       	ror	r24
    2bbe:	95 95       	asr	r25
    2bc0:	87 95       	ror	r24
    2bc2:	98 2f       	mov	r25, r24
    2bc4:	80 e0       	ldi	r24, 0x00	; 0
    2bc6:	63 e0       	ldi	r22, 0x03	; 3
    2bc8:	49 2f       	mov	r20, r25
    2bca:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    2bce:	fe 01       	movw	r30, r28
    2bd0:	ed 59       	subi	r30, 0x9D	; 157
    2bd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2bd4:	80 81       	ld	r24, Z
    2bd6:	88 2f       	mov	r24, r24
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	80 72       	andi	r24, 0x20	; 32
    2bdc:	90 70       	andi	r25, 0x00	; 0
    2bde:	95 95       	asr	r25
    2be0:	87 95       	ror	r24
    2be2:	95 95       	asr	r25
    2be4:	87 95       	ror	r24
    2be6:	95 95       	asr	r25
    2be8:	87 95       	ror	r24
    2bea:	95 95       	asr	r25
    2bec:	87 95       	ror	r24
    2bee:	95 95       	asr	r25
    2bf0:	87 95       	ror	r24
    2bf2:	98 2f       	mov	r25, r24
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	64 e0       	ldi	r22, 0x04	; 4
    2bf8:	49 2f       	mov	r20, r25
    2bfa:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    2bfe:	fe 01       	movw	r30, r28
    2c00:	ed 59       	subi	r30, 0x9D	; 157
    2c02:	ff 4f       	sbci	r31, 0xFF	; 255
    2c04:	80 81       	ld	r24, Z
    2c06:	88 2f       	mov	r24, r24
    2c08:	90 e0       	ldi	r25, 0x00	; 0
    2c0a:	80 74       	andi	r24, 0x40	; 64
    2c0c:	90 70       	andi	r25, 0x00	; 0
    2c0e:	08 2e       	mov	r0, r24
    2c10:	89 2f       	mov	r24, r25
    2c12:	00 0c       	add	r0, r0
    2c14:	88 1f       	adc	r24, r24
    2c16:	99 0b       	sbc	r25, r25
    2c18:	00 0c       	add	r0, r0
    2c1a:	88 1f       	adc	r24, r24
    2c1c:	99 1f       	adc	r25, r25
    2c1e:	98 2f       	mov	r25, r24
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	65 e0       	ldi	r22, 0x05	; 5
    2c24:	49 2f       	mov	r20, r25
    2c26:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    2c2a:	fe 01       	movw	r30, r28
    2c2c:	ed 59       	subi	r30, 0x9D	; 157
    2c2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2c30:	80 81       	ld	r24, Z
    2c32:	98 2f       	mov	r25, r24
    2c34:	99 1f       	adc	r25, r25
    2c36:	99 27       	eor	r25, r25
    2c38:	99 1f       	adc	r25, r25
    2c3a:	80 e0       	ldi	r24, 0x00	; 0
    2c3c:	66 e0       	ldi	r22, 0x06	; 6
    2c3e:	49 2f       	mov	r20, r25
    2c40:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    2c44:	fe 01       	movw	r30, r28
    2c46:	ed 5b       	subi	r30, 0xBD	; 189
    2c48:	ff 4f       	sbci	r31, 0xFF	; 255
    2c4a:	80 e0       	ldi	r24, 0x00	; 0
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	a0 e8       	ldi	r26, 0x80	; 128
    2c50:	bf e3       	ldi	r27, 0x3F	; 63
    2c52:	80 83       	st	Z, r24
    2c54:	91 83       	std	Z+1, r25	; 0x01
    2c56:	a2 83       	std	Z+2, r26	; 0x02
    2c58:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c5a:	8e 01       	movw	r16, r28
    2c5c:	01 5c       	subi	r16, 0xC1	; 193
    2c5e:	1f 4f       	sbci	r17, 0xFF	; 255
    2c60:	fe 01       	movw	r30, r28
    2c62:	ed 5b       	subi	r30, 0xBD	; 189
    2c64:	ff 4f       	sbci	r31, 0xFF	; 255
    2c66:	60 81       	ld	r22, Z
    2c68:	71 81       	ldd	r23, Z+1	; 0x01
    2c6a:	82 81       	ldd	r24, Z+2	; 0x02
    2c6c:	93 81       	ldd	r25, Z+3	; 0x03
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	4a ef       	ldi	r20, 0xFA	; 250
    2c74:	54 e4       	ldi	r21, 0x44	; 68
    2c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	f8 01       	movw	r30, r16
    2c80:	80 83       	st	Z, r24
    2c82:	91 83       	std	Z+1, r25	; 0x01
    2c84:	a2 83       	std	Z+2, r26	; 0x02
    2c86:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2c88:	fe 01       	movw	r30, r28
    2c8a:	ff 96       	adiw	r30, 0x3f	; 63
    2c8c:	60 81       	ld	r22, Z
    2c8e:	71 81       	ldd	r23, Z+1	; 0x01
    2c90:	82 81       	ldd	r24, Z+2	; 0x02
    2c92:	93 81       	ldd	r25, Z+3	; 0x03
    2c94:	20 e0       	ldi	r18, 0x00	; 0
    2c96:	30 e0       	ldi	r19, 0x00	; 0
    2c98:	40 e8       	ldi	r20, 0x80	; 128
    2c9a:	5f e3       	ldi	r21, 0x3F	; 63
    2c9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ca0:	88 23       	and	r24, r24
    2ca2:	2c f4       	brge	.+10     	; 0x2cae <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2ca4:	81 e0       	ldi	r24, 0x01	; 1
    2ca6:	90 e0       	ldi	r25, 0x00	; 0
    2ca8:	9e af       	std	Y+62, r25	; 0x3e
    2caa:	8d af       	std	Y+61, r24	; 0x3d
    2cac:	46 c0       	rjmp	.+140    	; 0x2d3a <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2cae:	fe 01       	movw	r30, r28
    2cb0:	ff 96       	adiw	r30, 0x3f	; 63
    2cb2:	60 81       	ld	r22, Z
    2cb4:	71 81       	ldd	r23, Z+1	; 0x01
    2cb6:	82 81       	ldd	r24, Z+2	; 0x02
    2cb8:	93 81       	ldd	r25, Z+3	; 0x03
    2cba:	20 e0       	ldi	r18, 0x00	; 0
    2cbc:	3f ef       	ldi	r19, 0xFF	; 255
    2cbe:	4f e7       	ldi	r20, 0x7F	; 127
    2cc0:	57 e4       	ldi	r21, 0x47	; 71
    2cc2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cc6:	18 16       	cp	r1, r24
    2cc8:	64 f5       	brge	.+88     	; 0x2d22 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cca:	fe 01       	movw	r30, r28
    2ccc:	ed 5b       	subi	r30, 0xBD	; 189
    2cce:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd0:	60 81       	ld	r22, Z
    2cd2:	71 81       	ldd	r23, Z+1	; 0x01
    2cd4:	82 81       	ldd	r24, Z+2	; 0x02
    2cd6:	93 81       	ldd	r25, Z+3	; 0x03
    2cd8:	20 e0       	ldi	r18, 0x00	; 0
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	40 e2       	ldi	r20, 0x20	; 32
    2cde:	51 e4       	ldi	r21, 0x41	; 65
    2ce0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce4:	dc 01       	movw	r26, r24
    2ce6:	cb 01       	movw	r24, r22
    2ce8:	bc 01       	movw	r22, r24
    2cea:	cd 01       	movw	r24, r26
    2cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf0:	dc 01       	movw	r26, r24
    2cf2:	cb 01       	movw	r24, r22
    2cf4:	9e af       	std	Y+62, r25	; 0x3e
    2cf6:	8d af       	std	Y+61, r24	; 0x3d
    2cf8:	0f c0       	rjmp	.+30     	; 0x2d18 <LCD_displayCharacter+0x478>
    2cfa:	88 ec       	ldi	r24, 0xC8	; 200
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	9c af       	std	Y+60, r25	; 0x3c
    2d00:	8b af       	std	Y+59, r24	; 0x3b
    2d02:	8b ad       	ldd	r24, Y+59	; 0x3b
    2d04:	9c ad       	ldd	r25, Y+60	; 0x3c
    2d06:	01 97       	sbiw	r24, 0x01	; 1
    2d08:	f1 f7       	brne	.-4      	; 0x2d06 <LCD_displayCharacter+0x466>
    2d0a:	9c af       	std	Y+60, r25	; 0x3c
    2d0c:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d0e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d10:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	9e af       	std	Y+62, r25	; 0x3e
    2d16:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d18:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d1a:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d1c:	00 97       	sbiw	r24, 0x00	; 0
    2d1e:	69 f7       	brne	.-38     	; 0x2cfa <LCD_displayCharacter+0x45a>
    2d20:	16 c0       	rjmp	.+44     	; 0x2d4e <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d22:	fe 01       	movw	r30, r28
    2d24:	ff 96       	adiw	r30, 0x3f	; 63
    2d26:	60 81       	ld	r22, Z
    2d28:	71 81       	ldd	r23, Z+1	; 0x01
    2d2a:	82 81       	ldd	r24, Z+2	; 0x02
    2d2c:	93 81       	ldd	r25, Z+3	; 0x03
    2d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d32:	dc 01       	movw	r26, r24
    2d34:	cb 01       	movw	r24, r22
    2d36:	9e af       	std	Y+62, r25	; 0x3e
    2d38:	8d af       	std	Y+61, r24	; 0x3d
    2d3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    2d3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    2d3e:	9a af       	std	Y+58, r25	; 0x3a
    2d40:	89 af       	std	Y+57, r24	; 0x39
    2d42:	89 ad       	ldd	r24, Y+57	; 0x39
    2d44:	9a ad       	ldd	r25, Y+58	; 0x3a
    2d46:	01 97       	sbiw	r24, 0x01	; 1
    2d48:	f1 f7       	brne	.-4      	; 0x2d46 <LCD_displayCharacter+0x4a6>
    2d4a:	9a af       	std	Y+58, r25	; 0x3a
    2d4c:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2d4e:	80 e0       	ldi	r24, 0x00	; 0
    2d50:	62 e0       	ldi	r22, 0x02	; 2
    2d52:	40 e0       	ldi	r20, 0x00	; 0
    2d54:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    2d58:	80 e0       	ldi	r24, 0x00	; 0
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	a0 e8       	ldi	r26, 0x80	; 128
    2d5e:	bf e3       	ldi	r27, 0x3F	; 63
    2d60:	8d ab       	std	Y+53, r24	; 0x35
    2d62:	9e ab       	std	Y+54, r25	; 0x36
    2d64:	af ab       	std	Y+55, r26	; 0x37
    2d66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d68:	6d a9       	ldd	r22, Y+53	; 0x35
    2d6a:	7e a9       	ldd	r23, Y+54	; 0x36
    2d6c:	8f a9       	ldd	r24, Y+55	; 0x37
    2d6e:	98 ad       	ldd	r25, Y+56	; 0x38
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	4a ef       	ldi	r20, 0xFA	; 250
    2d76:	54 e4       	ldi	r21, 0x44	; 68
    2d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7c:	dc 01       	movw	r26, r24
    2d7e:	cb 01       	movw	r24, r22
    2d80:	89 ab       	std	Y+49, r24	; 0x31
    2d82:	9a ab       	std	Y+50, r25	; 0x32
    2d84:	ab ab       	std	Y+51, r26	; 0x33
    2d86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d88:	69 a9       	ldd	r22, Y+49	; 0x31
    2d8a:	7a a9       	ldd	r23, Y+50	; 0x32
    2d8c:	8b a9       	ldd	r24, Y+51	; 0x33
    2d8e:	9c a9       	ldd	r25, Y+52	; 0x34
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e8       	ldi	r20, 0x80	; 128
    2d96:	5f e3       	ldi	r21, 0x3F	; 63
    2d98:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d9c:	88 23       	and	r24, r24
    2d9e:	2c f4       	brge	.+10     	; 0x2daa <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	98 ab       	std	Y+48, r25	; 0x30
    2da6:	8f a7       	std	Y+47, r24	; 0x2f
    2da8:	3f c0       	rjmp	.+126    	; 0x2e28 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2daa:	69 a9       	ldd	r22, Y+49	; 0x31
    2dac:	7a a9       	ldd	r23, Y+50	; 0x32
    2dae:	8b a9       	ldd	r24, Y+51	; 0x33
    2db0:	9c a9       	ldd	r25, Y+52	; 0x34
    2db2:	20 e0       	ldi	r18, 0x00	; 0
    2db4:	3f ef       	ldi	r19, 0xFF	; 255
    2db6:	4f e7       	ldi	r20, 0x7F	; 127
    2db8:	57 e4       	ldi	r21, 0x47	; 71
    2dba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dbe:	18 16       	cp	r1, r24
    2dc0:	4c f5       	brge	.+82     	; 0x2e14 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc2:	6d a9       	ldd	r22, Y+53	; 0x35
    2dc4:	7e a9       	ldd	r23, Y+54	; 0x36
    2dc6:	8f a9       	ldd	r24, Y+55	; 0x37
    2dc8:	98 ad       	ldd	r25, Y+56	; 0x38
    2dca:	20 e0       	ldi	r18, 0x00	; 0
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	40 e2       	ldi	r20, 0x20	; 32
    2dd0:	51 e4       	ldi	r21, 0x41	; 65
    2dd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd6:	dc 01       	movw	r26, r24
    2dd8:	cb 01       	movw	r24, r22
    2dda:	bc 01       	movw	r22, r24
    2ddc:	cd 01       	movw	r24, r26
    2dde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de2:	dc 01       	movw	r26, r24
    2de4:	cb 01       	movw	r24, r22
    2de6:	98 ab       	std	Y+48, r25	; 0x30
    2de8:	8f a7       	std	Y+47, r24	; 0x2f
    2dea:	0f c0       	rjmp	.+30     	; 0x2e0a <LCD_displayCharacter+0x56a>
    2dec:	88 ec       	ldi	r24, 0xC8	; 200
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	9e a7       	std	Y+46, r25	; 0x2e
    2df2:	8d a7       	std	Y+45, r24	; 0x2d
    2df4:	8d a5       	ldd	r24, Y+45	; 0x2d
    2df6:	9e a5       	ldd	r25, Y+46	; 0x2e
    2df8:	01 97       	sbiw	r24, 0x01	; 1
    2dfa:	f1 f7       	brne	.-4      	; 0x2df8 <LCD_displayCharacter+0x558>
    2dfc:	9e a7       	std	Y+46, r25	; 0x2e
    2dfe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e00:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e02:	98 a9       	ldd	r25, Y+48	; 0x30
    2e04:	01 97       	sbiw	r24, 0x01	; 1
    2e06:	98 ab       	std	Y+48, r25	; 0x30
    2e08:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e0c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	69 f7       	brne	.-38     	; 0x2dec <LCD_displayCharacter+0x54c>
    2e12:	14 c0       	rjmp	.+40     	; 0x2e3c <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e14:	69 a9       	ldd	r22, Y+49	; 0x31
    2e16:	7a a9       	ldd	r23, Y+50	; 0x32
    2e18:	8b a9       	ldd	r24, Y+51	; 0x33
    2e1a:	9c a9       	ldd	r25, Y+52	; 0x34
    2e1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e20:	dc 01       	movw	r26, r24
    2e22:	cb 01       	movw	r24, r22
    2e24:	98 ab       	std	Y+48, r25	; 0x30
    2e26:	8f a7       	std	Y+47, r24	; 0x2f
    2e28:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e2a:	98 a9       	ldd	r25, Y+48	; 0x30
    2e2c:	9c a7       	std	Y+44, r25	; 0x2c
    2e2e:	8b a7       	std	Y+43, r24	; 0x2b
    2e30:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e32:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e34:	01 97       	sbiw	r24, 0x01	; 1
    2e36:	f1 f7       	brne	.-4      	; 0x2e34 <LCD_displayCharacter+0x594>
    2e38:	9c a7       	std	Y+44, r25	; 0x2c
    2e3a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2e3c:	80 e0       	ldi	r24, 0x00	; 0
    2e3e:	62 e0       	ldi	r22, 0x02	; 2
    2e40:	41 e0       	ldi	r20, 0x01	; 1
    2e42:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	90 e0       	ldi	r25, 0x00	; 0
    2e4a:	a0 e8       	ldi	r26, 0x80	; 128
    2e4c:	bf e3       	ldi	r27, 0x3F	; 63
    2e4e:	8f a3       	std	Y+39, r24	; 0x27
    2e50:	98 a7       	std	Y+40, r25	; 0x28
    2e52:	a9 a7       	std	Y+41, r26	; 0x29
    2e54:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e56:	6f a1       	ldd	r22, Y+39	; 0x27
    2e58:	78 a5       	ldd	r23, Y+40	; 0x28
    2e5a:	89 a5       	ldd	r24, Y+41	; 0x29
    2e5c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	4a ef       	ldi	r20, 0xFA	; 250
    2e64:	54 e4       	ldi	r21, 0x44	; 68
    2e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6a:	dc 01       	movw	r26, r24
    2e6c:	cb 01       	movw	r24, r22
    2e6e:	8b a3       	std	Y+35, r24	; 0x23
    2e70:	9c a3       	std	Y+36, r25	; 0x24
    2e72:	ad a3       	std	Y+37, r26	; 0x25
    2e74:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e76:	6b a1       	ldd	r22, Y+35	; 0x23
    2e78:	7c a1       	ldd	r23, Y+36	; 0x24
    2e7a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e7c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e7e:	20 e0       	ldi	r18, 0x00	; 0
    2e80:	30 e0       	ldi	r19, 0x00	; 0
    2e82:	40 e8       	ldi	r20, 0x80	; 128
    2e84:	5f e3       	ldi	r21, 0x3F	; 63
    2e86:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e8a:	88 23       	and	r24, r24
    2e8c:	2c f4       	brge	.+10     	; 0x2e98 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2e8e:	81 e0       	ldi	r24, 0x01	; 1
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	9a a3       	std	Y+34, r25	; 0x22
    2e94:	89 a3       	std	Y+33, r24	; 0x21
    2e96:	3f c0       	rjmp	.+126    	; 0x2f16 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2e98:	6b a1       	ldd	r22, Y+35	; 0x23
    2e9a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e9c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e9e:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea0:	20 e0       	ldi	r18, 0x00	; 0
    2ea2:	3f ef       	ldi	r19, 0xFF	; 255
    2ea4:	4f e7       	ldi	r20, 0x7F	; 127
    2ea6:	57 e4       	ldi	r21, 0x47	; 71
    2ea8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2eac:	18 16       	cp	r1, r24
    2eae:	4c f5       	brge	.+82     	; 0x2f02 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb0:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb2:	78 a5       	ldd	r23, Y+40	; 0x28
    2eb4:	89 a5       	ldd	r24, Y+41	; 0x29
    2eb6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 e2       	ldi	r20, 0x20	; 32
    2ebe:	51 e4       	ldi	r21, 0x41	; 65
    2ec0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	cb 01       	movw	r24, r22
    2ec8:	bc 01       	movw	r22, r24
    2eca:	cd 01       	movw	r24, r26
    2ecc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed0:	dc 01       	movw	r26, r24
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	9a a3       	std	Y+34, r25	; 0x22
    2ed6:	89 a3       	std	Y+33, r24	; 0x21
    2ed8:	0f c0       	rjmp	.+30     	; 0x2ef8 <LCD_displayCharacter+0x658>
    2eda:	88 ec       	ldi	r24, 0xC8	; 200
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	98 a3       	std	Y+32, r25	; 0x20
    2ee0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ee4:	98 a1       	ldd	r25, Y+32	; 0x20
    2ee6:	01 97       	sbiw	r24, 0x01	; 1
    2ee8:	f1 f7       	brne	.-4      	; 0x2ee6 <LCD_displayCharacter+0x646>
    2eea:	98 a3       	std	Y+32, r25	; 0x20
    2eec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2eee:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef0:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef2:	01 97       	sbiw	r24, 0x01	; 1
    2ef4:	9a a3       	std	Y+34, r25	; 0x22
    2ef6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ef8:	89 a1       	ldd	r24, Y+33	; 0x21
    2efa:	9a a1       	ldd	r25, Y+34	; 0x22
    2efc:	00 97       	sbiw	r24, 0x00	; 0
    2efe:	69 f7       	brne	.-38     	; 0x2eda <LCD_displayCharacter+0x63a>
    2f00:	14 c0       	rjmp	.+40     	; 0x2f2a <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f02:	6b a1       	ldd	r22, Y+35	; 0x23
    2f04:	7c a1       	ldd	r23, Y+36	; 0x24
    2f06:	8d a1       	ldd	r24, Y+37	; 0x25
    2f08:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	9a a3       	std	Y+34, r25	; 0x22
    2f14:	89 a3       	std	Y+33, r24	; 0x21
    2f16:	89 a1       	ldd	r24, Y+33	; 0x21
    2f18:	9a a1       	ldd	r25, Y+34	; 0x22
    2f1a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f1c:	8d 8f       	std	Y+29, r24	; 0x1d
    2f1e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f20:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f22:	01 97       	sbiw	r24, 0x01	; 1
    2f24:	f1 f7       	brne	.-4      	; 0x2f22 <LCD_displayCharacter+0x682>
    2f26:	9e 8f       	std	Y+30, r25	; 0x1e
    2f28:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2f2a:	fe 01       	movw	r30, r28
    2f2c:	ed 59       	subi	r30, 0x9D	; 157
    2f2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f30:	80 81       	ld	r24, Z
    2f32:	98 2f       	mov	r25, r24
    2f34:	91 70       	andi	r25, 0x01	; 1
    2f36:	80 e0       	ldi	r24, 0x00	; 0
    2f38:	63 e0       	ldi	r22, 0x03	; 3
    2f3a:	49 2f       	mov	r20, r25
    2f3c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2f40:	fe 01       	movw	r30, r28
    2f42:	ed 59       	subi	r30, 0x9D	; 157
    2f44:	ff 4f       	sbci	r31, 0xFF	; 255
    2f46:	80 81       	ld	r24, Z
    2f48:	88 2f       	mov	r24, r24
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	82 70       	andi	r24, 0x02	; 2
    2f4e:	90 70       	andi	r25, 0x00	; 0
    2f50:	95 95       	asr	r25
    2f52:	87 95       	ror	r24
    2f54:	98 2f       	mov	r25, r24
    2f56:	80 e0       	ldi	r24, 0x00	; 0
    2f58:	64 e0       	ldi	r22, 0x04	; 4
    2f5a:	49 2f       	mov	r20, r25
    2f5c:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2f60:	fe 01       	movw	r30, r28
    2f62:	ed 59       	subi	r30, 0x9D	; 157
    2f64:	ff 4f       	sbci	r31, 0xFF	; 255
    2f66:	80 81       	ld	r24, Z
    2f68:	88 2f       	mov	r24, r24
    2f6a:	90 e0       	ldi	r25, 0x00	; 0
    2f6c:	84 70       	andi	r24, 0x04	; 4
    2f6e:	90 70       	andi	r25, 0x00	; 0
    2f70:	95 95       	asr	r25
    2f72:	87 95       	ror	r24
    2f74:	95 95       	asr	r25
    2f76:	87 95       	ror	r24
    2f78:	98 2f       	mov	r25, r24
    2f7a:	80 e0       	ldi	r24, 0x00	; 0
    2f7c:	65 e0       	ldi	r22, 0x05	; 5
    2f7e:	49 2f       	mov	r20, r25
    2f80:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2f84:	fe 01       	movw	r30, r28
    2f86:	ed 59       	subi	r30, 0x9D	; 157
    2f88:	ff 4f       	sbci	r31, 0xFF	; 255
    2f8a:	80 81       	ld	r24, Z
    2f8c:	88 2f       	mov	r24, r24
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	88 70       	andi	r24, 0x08	; 8
    2f92:	90 70       	andi	r25, 0x00	; 0
    2f94:	95 95       	asr	r25
    2f96:	87 95       	ror	r24
    2f98:	95 95       	asr	r25
    2f9a:	87 95       	ror	r24
    2f9c:	95 95       	asr	r25
    2f9e:	87 95       	ror	r24
    2fa0:	98 2f       	mov	r25, r24
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	66 e0       	ldi	r22, 0x06	; 6
    2fa6:	49 2f       	mov	r20, r25
    2fa8:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	a0 e8       	ldi	r26, 0x80	; 128
    2fb2:	bf e3       	ldi	r27, 0x3F	; 63
    2fb4:	89 8f       	std	Y+25, r24	; 0x19
    2fb6:	9a 8f       	std	Y+26, r25	; 0x1a
    2fb8:	ab 8f       	std	Y+27, r26	; 0x1b
    2fba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fbc:	69 8d       	ldd	r22, Y+25	; 0x19
    2fbe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fc0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fc2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4a ef       	ldi	r20, 0xFA	; 250
    2fca:	54 e4       	ldi	r21, 0x44	; 68
    2fcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fd0:	dc 01       	movw	r26, r24
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	8d 8b       	std	Y+21, r24	; 0x15
    2fd6:	9e 8b       	std	Y+22, r25	; 0x16
    2fd8:	af 8b       	std	Y+23, r26	; 0x17
    2fda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2fdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2fde:	7e 89       	ldd	r23, Y+22	; 0x16
    2fe0:	8f 89       	ldd	r24, Y+23	; 0x17
    2fe2:	98 8d       	ldd	r25, Y+24	; 0x18
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	30 e0       	ldi	r19, 0x00	; 0
    2fe8:	40 e8       	ldi	r20, 0x80	; 128
    2fea:	5f e3       	ldi	r21, 0x3F	; 63
    2fec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ff0:	88 23       	and	r24, r24
    2ff2:	2c f4       	brge	.+10     	; 0x2ffe <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	9c 8b       	std	Y+20, r25	; 0x14
    2ffa:	8b 8b       	std	Y+19, r24	; 0x13
    2ffc:	3f c0       	rjmp	.+126    	; 0x307c <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2ffe:	6d 89       	ldd	r22, Y+21	; 0x15
    3000:	7e 89       	ldd	r23, Y+22	; 0x16
    3002:	8f 89       	ldd	r24, Y+23	; 0x17
    3004:	98 8d       	ldd	r25, Y+24	; 0x18
    3006:	20 e0       	ldi	r18, 0x00	; 0
    3008:	3f ef       	ldi	r19, 0xFF	; 255
    300a:	4f e7       	ldi	r20, 0x7F	; 127
    300c:	57 e4       	ldi	r21, 0x47	; 71
    300e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3012:	18 16       	cp	r1, r24
    3014:	4c f5       	brge	.+82     	; 0x3068 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3016:	69 8d       	ldd	r22, Y+25	; 0x19
    3018:	7a 8d       	ldd	r23, Y+26	; 0x1a
    301a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    301c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e2       	ldi	r20, 0x20	; 32
    3024:	51 e4       	ldi	r21, 0x41	; 65
    3026:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    302a:	dc 01       	movw	r26, r24
    302c:	cb 01       	movw	r24, r22
    302e:	bc 01       	movw	r22, r24
    3030:	cd 01       	movw	r24, r26
    3032:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3036:	dc 01       	movw	r26, r24
    3038:	cb 01       	movw	r24, r22
    303a:	9c 8b       	std	Y+20, r25	; 0x14
    303c:	8b 8b       	std	Y+19, r24	; 0x13
    303e:	0f c0       	rjmp	.+30     	; 0x305e <LCD_displayCharacter+0x7be>
    3040:	88 ec       	ldi	r24, 0xC8	; 200
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	9a 8b       	std	Y+18, r25	; 0x12
    3046:	89 8b       	std	Y+17, r24	; 0x11
    3048:	89 89       	ldd	r24, Y+17	; 0x11
    304a:	9a 89       	ldd	r25, Y+18	; 0x12
    304c:	01 97       	sbiw	r24, 0x01	; 1
    304e:	f1 f7       	brne	.-4      	; 0x304c <LCD_displayCharacter+0x7ac>
    3050:	9a 8b       	std	Y+18, r25	; 0x12
    3052:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3054:	8b 89       	ldd	r24, Y+19	; 0x13
    3056:	9c 89       	ldd	r25, Y+20	; 0x14
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	9c 8b       	std	Y+20, r25	; 0x14
    305c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    305e:	8b 89       	ldd	r24, Y+19	; 0x13
    3060:	9c 89       	ldd	r25, Y+20	; 0x14
    3062:	00 97       	sbiw	r24, 0x00	; 0
    3064:	69 f7       	brne	.-38     	; 0x3040 <LCD_displayCharacter+0x7a0>
    3066:	14 c0       	rjmp	.+40     	; 0x3090 <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3068:	6d 89       	ldd	r22, Y+21	; 0x15
    306a:	7e 89       	ldd	r23, Y+22	; 0x16
    306c:	8f 89       	ldd	r24, Y+23	; 0x17
    306e:	98 8d       	ldd	r25, Y+24	; 0x18
    3070:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	9c 8b       	std	Y+20, r25	; 0x14
    307a:	8b 8b       	std	Y+19, r24	; 0x13
    307c:	8b 89       	ldd	r24, Y+19	; 0x13
    307e:	9c 89       	ldd	r25, Y+20	; 0x14
    3080:	98 8b       	std	Y+16, r25	; 0x10
    3082:	8f 87       	std	Y+15, r24	; 0x0f
    3084:	8f 85       	ldd	r24, Y+15	; 0x0f
    3086:	98 89       	ldd	r25, Y+16	; 0x10
    3088:	01 97       	sbiw	r24, 0x01	; 1
    308a:	f1 f7       	brne	.-4      	; 0x3088 <LCD_displayCharacter+0x7e8>
    308c:	98 8b       	std	Y+16, r25	; 0x10
    308e:	8f 87       	std	Y+15, r24	; 0x0f
	GPIO_writePort(LCD_DATA_PORT_ID, data); /* out the required command to the data bus D0 --> D7 */
#endif

	_delay_ms(1);

	GPIO_writePin(LCD_E_PORT_ID, LCD_E_PIN_ID, LOGIC_LOW);
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	62 e0       	ldi	r22, 0x02	; 2
    3094:	40 e0       	ldi	r20, 0x00	; 0
    3096:	0e 94 c1 0b 	call	0x1782	; 0x1782 <GPIO_writePin>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	a0 e8       	ldi	r26, 0x80	; 128
    30a0:	bf e3       	ldi	r27, 0x3F	; 63
    30a2:	8b 87       	std	Y+11, r24	; 0x0b
    30a4:	9c 87       	std	Y+12, r25	; 0x0c
    30a6:	ad 87       	std	Y+13, r26	; 0x0d
    30a8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    30ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    30ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    30b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    30b2:	20 e0       	ldi	r18, 0x00	; 0
    30b4:	30 e0       	ldi	r19, 0x00	; 0
    30b6:	4a ef       	ldi	r20, 0xFA	; 250
    30b8:	54 e4       	ldi	r21, 0x44	; 68
    30ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30be:	dc 01       	movw	r26, r24
    30c0:	cb 01       	movw	r24, r22
    30c2:	8f 83       	std	Y+7, r24	; 0x07
    30c4:	98 87       	std	Y+8, r25	; 0x08
    30c6:	a9 87       	std	Y+9, r26	; 0x09
    30c8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30ca:	6f 81       	ldd	r22, Y+7	; 0x07
    30cc:	78 85       	ldd	r23, Y+8	; 0x08
    30ce:	89 85       	ldd	r24, Y+9	; 0x09
    30d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    30d2:	20 e0       	ldi	r18, 0x00	; 0
    30d4:	30 e0       	ldi	r19, 0x00	; 0
    30d6:	40 e8       	ldi	r20, 0x80	; 128
    30d8:	5f e3       	ldi	r21, 0x3F	; 63
    30da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    30de:	88 23       	and	r24, r24
    30e0:	2c f4       	brge	.+10     	; 0x30ec <LCD_displayCharacter+0x84c>
		__ticks = 1;
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	9e 83       	std	Y+6, r25	; 0x06
    30e8:	8d 83       	std	Y+5, r24	; 0x05
    30ea:	3f c0       	rjmp	.+126    	; 0x316a <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    30ec:	6f 81       	ldd	r22, Y+7	; 0x07
    30ee:	78 85       	ldd	r23, Y+8	; 0x08
    30f0:	89 85       	ldd	r24, Y+9	; 0x09
    30f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30f4:	20 e0       	ldi	r18, 0x00	; 0
    30f6:	3f ef       	ldi	r19, 0xFF	; 255
    30f8:	4f e7       	ldi	r20, 0x7F	; 127
    30fa:	57 e4       	ldi	r21, 0x47	; 71
    30fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3100:	18 16       	cp	r1, r24
    3102:	4c f5       	brge	.+82     	; 0x3156 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3104:	6b 85       	ldd	r22, Y+11	; 0x0b
    3106:	7c 85       	ldd	r23, Y+12	; 0x0c
    3108:	8d 85       	ldd	r24, Y+13	; 0x0d
    310a:	9e 85       	ldd	r25, Y+14	; 0x0e
    310c:	20 e0       	ldi	r18, 0x00	; 0
    310e:	30 e0       	ldi	r19, 0x00	; 0
    3110:	40 e2       	ldi	r20, 0x20	; 32
    3112:	51 e4       	ldi	r21, 0x41	; 65
    3114:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	bc 01       	movw	r22, r24
    311e:	cd 01       	movw	r24, r26
    3120:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3124:	dc 01       	movw	r26, r24
    3126:	cb 01       	movw	r24, r22
    3128:	9e 83       	std	Y+6, r25	; 0x06
    312a:	8d 83       	std	Y+5, r24	; 0x05
    312c:	0f c0       	rjmp	.+30     	; 0x314c <LCD_displayCharacter+0x8ac>
    312e:	88 ec       	ldi	r24, 0xC8	; 200
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	9c 83       	std	Y+4, r25	; 0x04
    3134:	8b 83       	std	Y+3, r24	; 0x03
    3136:	8b 81       	ldd	r24, Y+3	; 0x03
    3138:	9c 81       	ldd	r25, Y+4	; 0x04
    313a:	01 97       	sbiw	r24, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <LCD_displayCharacter+0x89a>
    313e:	9c 83       	std	Y+4, r25	; 0x04
    3140:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3142:	8d 81       	ldd	r24, Y+5	; 0x05
    3144:	9e 81       	ldd	r25, Y+6	; 0x06
    3146:	01 97       	sbiw	r24, 0x01	; 1
    3148:	9e 83       	std	Y+6, r25	; 0x06
    314a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    314c:	8d 81       	ldd	r24, Y+5	; 0x05
    314e:	9e 81       	ldd	r25, Y+6	; 0x06
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	69 f7       	brne	.-38     	; 0x312e <LCD_displayCharacter+0x88e>
    3154:	14 c0       	rjmp	.+40     	; 0x317e <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3156:	6f 81       	ldd	r22, Y+7	; 0x07
    3158:	78 85       	ldd	r23, Y+8	; 0x08
    315a:	89 85       	ldd	r24, Y+9	; 0x09
    315c:	9a 85       	ldd	r25, Y+10	; 0x0a
    315e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3162:	dc 01       	movw	r26, r24
    3164:	cb 01       	movw	r24, r22
    3166:	9e 83       	std	Y+6, r25	; 0x06
    3168:	8d 83       	std	Y+5, r24	; 0x05
    316a:	8d 81       	ldd	r24, Y+5	; 0x05
    316c:	9e 81       	ldd	r25, Y+6	; 0x06
    316e:	9a 83       	std	Y+2, r25	; 0x02
    3170:	89 83       	std	Y+1, r24	; 0x01
    3172:	89 81       	ldd	r24, Y+1	; 0x01
    3174:	9a 81       	ldd	r25, Y+2	; 0x02
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	f1 f7       	brne	.-4      	; 0x3176 <LCD_displayCharacter+0x8d6>
    317a:	9a 83       	std	Y+2, r25	; 0x02
    317c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    317e:	cd 59       	subi	r28, 0x9D	; 157
    3180:	df 4f       	sbci	r29, 0xFF	; 255
    3182:	0f b6       	in	r0, 0x3f	; 63
    3184:	f8 94       	cli
    3186:	de bf       	out	0x3e, r29	; 62
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	cd bf       	out	0x3d, r28	; 61
    318c:	cf 91       	pop	r28
    318e:	df 91       	pop	r29
    3190:	1f 91       	pop	r17
    3192:	0f 91       	pop	r16
    3194:	08 95       	ret

00003196 <LCD_displayString>:
/*
 * Description :
 * Display string on LCD
 */
void LCD_displayString(const char *Str)
{
    3196:	df 93       	push	r29
    3198:	cf 93       	push	r28
    319a:	00 d0       	rcall	.+0      	; 0x319c <LCD_displayString+0x6>
    319c:	0f 92       	push	r0
    319e:	cd b7       	in	r28, 0x3d	; 61
    31a0:	de b7       	in	r29, 0x3e	; 62
    31a2:	9b 83       	std	Y+3, r25	; 0x03
    31a4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	for(i=0; Str[i]!='\0'; i++)
    31a6:	19 82       	std	Y+1, r1	; 0x01
    31a8:	0e c0       	rjmp	.+28     	; 0x31c6 <LCD_displayString+0x30>
	{
		LCD_displayCharacter(Str[i]);
    31aa:	89 81       	ldd	r24, Y+1	; 0x01
    31ac:	28 2f       	mov	r18, r24
    31ae:	30 e0       	ldi	r19, 0x00	; 0
    31b0:	8a 81       	ldd	r24, Y+2	; 0x02
    31b2:	9b 81       	ldd	r25, Y+3	; 0x03
    31b4:	fc 01       	movw	r30, r24
    31b6:	e2 0f       	add	r30, r18
    31b8:	f3 1f       	adc	r31, r19
    31ba:	80 81       	ld	r24, Z
    31bc:	0e 94 50 14 	call	0x28a0	; 0x28a0 <LCD_displayCharacter>
 * Display string on LCD
 */
void LCD_displayString(const char *Str)
{
	uint8 i;
	for(i=0; Str[i]!='\0'; i++)
    31c0:	89 81       	ldd	r24, Y+1	; 0x01
    31c2:	8f 5f       	subi	r24, 0xFF	; 255
    31c4:	89 83       	std	Y+1, r24	; 0x01
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	28 2f       	mov	r18, r24
    31ca:	30 e0       	ldi	r19, 0x00	; 0
    31cc:	8a 81       	ldd	r24, Y+2	; 0x02
    31ce:	9b 81       	ldd	r25, Y+3	; 0x03
    31d0:	fc 01       	movw	r30, r24
    31d2:	e2 0f       	add	r30, r18
    31d4:	f3 1f       	adc	r31, r19
    31d6:	80 81       	ld	r24, Z
    31d8:	88 23       	and	r24, r24
    31da:	39 f7       	brne	.-50     	; 0x31aa <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
	}
}
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	cf 91       	pop	r28
    31e4:	df 91       	pop	r29
    31e6:	08 95       	ret

000031e8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to any location
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    31e8:	df 93       	push	r29
    31ea:	cf 93       	push	r28
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <LCD_moveCursor+0x6>
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <LCD_moveCursor+0x8>
    31f0:	0f 92       	push	r0
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	8a 83       	std	Y+2, r24	; 0x02
    31f8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    31fa:	8a 81       	ldd	r24, Y+2	; 0x02
    31fc:	28 2f       	mov	r18, r24
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	3d 83       	std	Y+5, r19	; 0x05
    3202:	2c 83       	std	Y+4, r18	; 0x04
    3204:	8c 81       	ldd	r24, Y+4	; 0x04
    3206:	9d 81       	ldd	r25, Y+5	; 0x05
    3208:	81 30       	cpi	r24, 0x01	; 1
    320a:	91 05       	cpc	r25, r1
    320c:	c1 f0       	breq	.+48     	; 0x323e <LCD_moveCursor+0x56>
    320e:	2c 81       	ldd	r18, Y+4	; 0x04
    3210:	3d 81       	ldd	r19, Y+5	; 0x05
    3212:	22 30       	cpi	r18, 0x02	; 2
    3214:	31 05       	cpc	r19, r1
    3216:	2c f4       	brge	.+10     	; 0x3222 <LCD_moveCursor+0x3a>
    3218:	8c 81       	ldd	r24, Y+4	; 0x04
    321a:	9d 81       	ldd	r25, Y+5	; 0x05
    321c:	00 97       	sbiw	r24, 0x00	; 0
    321e:	61 f0       	breq	.+24     	; 0x3238 <LCD_moveCursor+0x50>
    3220:	19 c0       	rjmp	.+50     	; 0x3254 <LCD_moveCursor+0x6c>
    3222:	2c 81       	ldd	r18, Y+4	; 0x04
    3224:	3d 81       	ldd	r19, Y+5	; 0x05
    3226:	22 30       	cpi	r18, 0x02	; 2
    3228:	31 05       	cpc	r19, r1
    322a:	69 f0       	breq	.+26     	; 0x3246 <LCD_moveCursor+0x5e>
    322c:	8c 81       	ldd	r24, Y+4	; 0x04
    322e:	9d 81       	ldd	r25, Y+5	; 0x05
    3230:	83 30       	cpi	r24, 0x03	; 3
    3232:	91 05       	cpc	r25, r1
    3234:	61 f0       	breq	.+24     	; 0x324e <LCD_moveCursor+0x66>
    3236:	0e c0       	rjmp	.+28     	; 0x3254 <LCD_moveCursor+0x6c>
	{
	case 0:
		lcd_memory_address=col;
    3238:	8b 81       	ldd	r24, Y+3	; 0x03
    323a:	89 83       	std	Y+1, r24	; 0x01
    323c:	0b c0       	rjmp	.+22     	; 0x3254 <LCD_moveCursor+0x6c>
		break;
	case 1:
		lcd_memory_address=col+0x40;
    323e:	8b 81       	ldd	r24, Y+3	; 0x03
    3240:	80 5c       	subi	r24, 0xC0	; 192
    3242:	89 83       	std	Y+1, r24	; 0x01
    3244:	07 c0       	rjmp	.+14     	; 0x3254 <LCD_moveCursor+0x6c>
		break;
	case 2:
		lcd_memory_address=col+0x10;
    3246:	8b 81       	ldd	r24, Y+3	; 0x03
    3248:	80 5f       	subi	r24, 0xF0	; 240
    324a:	89 83       	std	Y+1, r24	; 0x01
    324c:	03 c0       	rjmp	.+6      	; 0x3254 <LCD_moveCursor+0x6c>
		break;
	case 3:
		lcd_memory_address=col+0x50;
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	80 5b       	subi	r24, 0xB0	; 176
    3252:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3254:	89 81       	ldd	r24, Y+1	; 0x01
    3256:	80 68       	ori	r24, 0x80	; 128
    3258:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_sendCommand>
}
    325c:	0f 90       	pop	r0
    325e:	0f 90       	pop	r0
    3260:	0f 90       	pop	r0
    3262:	0f 90       	pop	r0
    3264:	0f 90       	pop	r0
    3266:	cf 91       	pop	r28
    3268:	df 91       	pop	r29
    326a:	08 95       	ret

0000326c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the string in any row and column
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    326c:	df 93       	push	r29
    326e:	cf 93       	push	r28
    3270:	00 d0       	rcall	.+0      	; 0x3272 <LCD_displayStringRowColumn+0x6>
    3272:	00 d0       	rcall	.+0      	; 0x3274 <LCD_displayStringRowColumn+0x8>
    3274:	cd b7       	in	r28, 0x3d	; 61
    3276:	de b7       	in	r29, 0x3e	; 62
    3278:	89 83       	std	Y+1, r24	; 0x01
    327a:	6a 83       	std	Y+2, r22	; 0x02
    327c:	5c 83       	std	Y+4, r21	; 0x04
    327e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    3280:	89 81       	ldd	r24, Y+1	; 0x01
    3282:	6a 81       	ldd	r22, Y+2	; 0x02
    3284:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <LCD_moveCursor>
	LCD_displayString(Str);
    3288:	8b 81       	ldd	r24, Y+3	; 0x03
    328a:	9c 81       	ldd	r25, Y+4	; 0x04
    328c:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
}
    3290:	0f 90       	pop	r0
    3292:	0f 90       	pop	r0
    3294:	0f 90       	pop	r0
    3296:	0f 90       	pop	r0
    3298:	cf 91       	pop	r28
    329a:	df 91       	pop	r29
    329c:	08 95       	ret

0000329e <LCD_clearScreen>:
/*
 * Description :
 * clear the screen
 */
void LCD_clearScreen(void)
{
    329e:	df 93       	push	r29
    32a0:	cf 93       	push	r28
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <LCD_sendCommand>
}
    32ac:	cf 91       	pop	r28
    32ae:	df 91       	pop	r29
    32b0:	08 95       	ret

000032b2 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    32b2:	df 93       	push	r29
    32b4:	cf 93       	push	r28
    32b6:	cd b7       	in	r28, 0x3d	; 61
    32b8:	de b7       	in	r29, 0x3e	; 62
    32ba:	62 97       	sbiw	r28, 0x12	; 18
    32bc:	0f b6       	in	r0, 0x3f	; 63
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	9a 8b       	std	Y+18, r25	; 0x12
    32c8:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ascii result */
	itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    32ca:	89 89       	ldd	r24, Y+17	; 0x11
    32cc:	9a 89       	ldd	r25, Y+18	; 0x12
    32ce:	9e 01       	movw	r18, r28
    32d0:	2f 5f       	subi	r18, 0xFF	; 255
    32d2:	3f 4f       	sbci	r19, 0xFF	; 255
    32d4:	b9 01       	movw	r22, r18
    32d6:	4a e0       	ldi	r20, 0x0A	; 10
    32d8:	50 e0       	ldi	r21, 0x00	; 0
    32da:	0e 94 c9 1b 	call	0x3792	; 0x3792 <itoa>
	LCD_displayString(buff); /* Display the string */
    32de:	ce 01       	movw	r24, r28
    32e0:	01 96       	adiw	r24, 0x01	; 1
    32e2:	0e 94 cb 18 	call	0x3196	; 0x3196 <LCD_displayString>
}
    32e6:	62 96       	adiw	r28, 0x12	; 18
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	f8 94       	cli
    32ec:	de bf       	out	0x3e, r29	; 62
    32ee:	0f be       	out	0x3f, r0	; 63
    32f0:	cd bf       	out	0x3d, r28	; 61
    32f2:	cf 91       	pop	r28
    32f4:	df 91       	pop	r29
    32f6:	08 95       	ret

000032f8 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    32f8:	1f 92       	push	r1
    32fa:	0f 92       	push	r0
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	0f 92       	push	r0
    3300:	11 24       	eor	r1, r1
    3302:	2f 93       	push	r18
    3304:	3f 93       	push	r19
    3306:	4f 93       	push	r20
    3308:	5f 93       	push	r21
    330a:	6f 93       	push	r22
    330c:	7f 93       	push	r23
    330e:	8f 93       	push	r24
    3310:	9f 93       	push	r25
    3312:	af 93       	push	r26
    3314:	bf 93       	push	r27
    3316:	ef 93       	push	r30
    3318:	ff 93       	push	r31
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3322:	80 91 18 01 	lds	r24, 0x0118
    3326:	90 91 19 01 	lds	r25, 0x0119
    332a:	00 97       	sbiw	r24, 0x00	; 0
    332c:	29 f0       	breq	.+10     	; 0x3338 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    332e:	e0 91 18 01 	lds	r30, 0x0118
    3332:	f0 91 19 01 	lds	r31, 0x0119
    3336:	09 95       	icall
	}
}
    3338:	cf 91       	pop	r28
    333a:	df 91       	pop	r29
    333c:	ff 91       	pop	r31
    333e:	ef 91       	pop	r30
    3340:	bf 91       	pop	r27
    3342:	af 91       	pop	r26
    3344:	9f 91       	pop	r25
    3346:	8f 91       	pop	r24
    3348:	7f 91       	pop	r23
    334a:	6f 91       	pop	r22
    334c:	5f 91       	pop	r21
    334e:	4f 91       	pop	r20
    3350:	3f 91       	pop	r19
    3352:	2f 91       	pop	r18
    3354:	0f 90       	pop	r0
    3356:	0f be       	out	0x3f, r0	; 63
    3358:	0f 90       	pop	r0
    335a:	1f 90       	pop	r1
    335c:	18 95       	reti

0000335e <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
    335e:	1f 92       	push	r1
    3360:	0f 92       	push	r0
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	0f 92       	push	r0
    3366:	11 24       	eor	r1, r1
    3368:	2f 93       	push	r18
    336a:	3f 93       	push	r19
    336c:	4f 93       	push	r20
    336e:	5f 93       	push	r21
    3370:	6f 93       	push	r22
    3372:	7f 93       	push	r23
    3374:	8f 93       	push	r24
    3376:	9f 93       	push	r25
    3378:	af 93       	push	r26
    337a:	bf 93       	push	r27
    337c:	ef 93       	push	r30
    337e:	ff 93       	push	r31
    3380:	df 93       	push	r29
    3382:	cf 93       	push	r28
    3384:	cd b7       	in	r28, 0x3d	; 61
    3386:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    3388:	80 91 18 01 	lds	r24, 0x0118
    338c:	90 91 19 01 	lds	r25, 0x0119
    3390:	00 97       	sbiw	r24, 0x00	; 0
    3392:	29 f0       	breq	.+10     	; 0x339e <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    3394:	e0 91 18 01 	lds	r30, 0x0118
    3398:	f0 91 19 01 	lds	r31, 0x0119
    339c:	09 95       	icall
	}
}
    339e:	cf 91       	pop	r28
    33a0:	df 91       	pop	r29
    33a2:	ff 91       	pop	r31
    33a4:	ef 91       	pop	r30
    33a6:	bf 91       	pop	r27
    33a8:	af 91       	pop	r26
    33aa:	9f 91       	pop	r25
    33ac:	8f 91       	pop	r24
    33ae:	7f 91       	pop	r23
    33b0:	6f 91       	pop	r22
    33b2:	5f 91       	pop	r21
    33b4:	4f 91       	pop	r20
    33b6:	3f 91       	pop	r19
    33b8:	2f 91       	pop	r18
    33ba:	0f 90       	pop	r0
    33bc:	0f be       	out	0x3f, r0	; 63
    33be:	0f 90       	pop	r0
    33c0:	1f 90       	pop	r1
    33c2:	18 95       	reti

000033c4 <TIMER1_init>:
/*
 * Description :
 * initialize the timer Driver.
 */
void TIMER1_init(const Timer1_ConfigType *Config_Ptr)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	00 d0       	rcall	.+0      	; 0x33ca <TIMER1_init+0x6>
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	9a 83       	std	Y+2, r25	; 0x02
    33d0:	89 83       	std	Y+1, r24	; 0x01
	/*set bits for non pwm mode*/
	TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    33d2:	af e4       	ldi	r26, 0x4F	; 79
    33d4:	b0 e0       	ldi	r27, 0x00	; 0
    33d6:	ef e4       	ldi	r30, 0x4F	; 79
    33d8:	f0 e0       	ldi	r31, 0x00	; 0
    33da:	80 81       	ld	r24, Z
    33dc:	8c 60       	ori	r24, 0x0C	; 12
    33de:	8c 93       	st	X, r24

	/*setup mode bits*/
	TCCR1A = (TCCR1A & 0xFC) | (Config_Ptr->mode);
    33e0:	af e4       	ldi	r26, 0x4F	; 79
    33e2:	b0 e0       	ldi	r27, 0x00	; 0
    33e4:	ef e4       	ldi	r30, 0x4F	; 79
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	80 81       	ld	r24, Z
    33ea:	98 2f       	mov	r25, r24
    33ec:	9c 7f       	andi	r25, 0xFC	; 252
    33ee:	e9 81       	ldd	r30, Y+1	; 0x01
    33f0:	fa 81       	ldd	r31, Y+2	; 0x02
    33f2:	85 81       	ldd	r24, Z+5	; 0x05
    33f4:	89 2b       	or	r24, r25
    33f6:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF3) | ((Config_Ptr->mode)<<3);
    33f8:	ae e4       	ldi	r26, 0x4E	; 78
    33fa:	b0 e0       	ldi	r27, 0x00	; 0
    33fc:	ee e4       	ldi	r30, 0x4E	; 78
    33fe:	f0 e0       	ldi	r31, 0x00	; 0
    3400:	80 81       	ld	r24, Z
    3402:	28 2f       	mov	r18, r24
    3404:	23 7f       	andi	r18, 0xF3	; 243
    3406:	e9 81       	ldd	r30, Y+1	; 0x01
    3408:	fa 81       	ldd	r31, Y+2	; 0x02
    340a:	85 81       	ldd	r24, Z+5	; 0x05
    340c:	88 2f       	mov	r24, r24
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	88 0f       	add	r24, r24
    3412:	99 1f       	adc	r25, r25
    3414:	88 0f       	add	r24, r24
    3416:	99 1f       	adc	r25, r25
    3418:	88 0f       	add	r24, r24
    341a:	99 1f       	adc	r25, r25
    341c:	82 2b       	or	r24, r18
    341e:	8c 93       	st	X, r24

	/*setup the clock for timer1*/
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    3420:	ae e4       	ldi	r26, 0x4E	; 78
    3422:	b0 e0       	ldi	r27, 0x00	; 0
    3424:	ee e4       	ldi	r30, 0x4E	; 78
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	80 81       	ld	r24, Z
    342a:	98 2f       	mov	r25, r24
    342c:	98 7f       	andi	r25, 0xF8	; 248
    342e:	e9 81       	ldd	r30, Y+1	; 0x01
    3430:	fa 81       	ldd	r31, Y+2	; 0x02
    3432:	84 81       	ldd	r24, Z+4	; 0x04
    3434:	89 2b       	or	r24, r25
    3436:	8c 93       	st	X, r24

	/*setup the initial value of timer1*/
	TCNT1 = (Config_Ptr->initial_value);
    3438:	ac e4       	ldi	r26, 0x4C	; 76
    343a:	b0 e0       	ldi	r27, 0x00	; 0
    343c:	e9 81       	ldd	r30, Y+1	; 0x01
    343e:	fa 81       	ldd	r31, Y+2	; 0x02
    3440:	80 81       	ld	r24, Z
    3442:	91 81       	ldd	r25, Z+1	; 0x01
    3444:	11 96       	adiw	r26, 0x01	; 1
    3446:	9c 93       	st	X, r25
    3448:	8e 93       	st	-X, r24

	if((Config_Ptr->mode)== CTC)
    344a:	e9 81       	ldd	r30, Y+1	; 0x01
    344c:	fa 81       	ldd	r31, Y+2	; 0x02
    344e:	85 81       	ldd	r24, Z+5	; 0x05
    3450:	84 30       	cpi	r24, 0x04	; 4
    3452:	89 f4       	brne	.+34     	; 0x3476 <TIMER1_init+0xb2>
	{
		OCR1A = (Config_Ptr->compare_value);
    3454:	aa e4       	ldi	r26, 0x4A	; 74
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	e9 81       	ldd	r30, Y+1	; 0x01
    345a:	fa 81       	ldd	r31, Y+2	; 0x02
    345c:	82 81       	ldd	r24, Z+2	; 0x02
    345e:	93 81       	ldd	r25, Z+3	; 0x03
    3460:	11 96       	adiw	r26, 0x01	; 1
    3462:	9c 93       	st	X, r25
    3464:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
    3466:	a9 e5       	ldi	r26, 0x59	; 89
    3468:	b0 e0       	ldi	r27, 0x00	; 0
    346a:	e9 e5       	ldi	r30, 0x59	; 89
    346c:	f0 e0       	ldi	r31, 0x00	; 0
    346e:	80 81       	ld	r24, Z
    3470:	80 61       	ori	r24, 0x10	; 16
    3472:	8c 93       	st	X, r24
    3474:	07 c0       	rjmp	.+14     	; 0x3484 <TIMER1_init+0xc0>
	}
	else
	{
		TIMSK |= (1<<TOIE1);
    3476:	a9 e5       	ldi	r26, 0x59	; 89
    3478:	b0 e0       	ldi	r27, 0x00	; 0
    347a:	e9 e5       	ldi	r30, 0x59	; 89
    347c:	f0 e0       	ldi	r31, 0x00	; 0
    347e:	80 81       	ld	r24, Z
    3480:	84 60       	ori	r24, 0x04	; 4
    3482:	8c 93       	st	X, r24
	}
}
    3484:	0f 90       	pop	r0
    3486:	0f 90       	pop	r0
    3488:	cf 91       	pop	r28
    348a:	df 91       	pop	r29
    348c:	08 95       	ret

0000348e <Timer1_deInit>:
/*
 * Description :
 * function to disable timer1..
 */
void Timer1_deInit(void)
{
    348e:	df 93       	push	r29
    3490:	cf 93       	push	r28
    3492:	cd b7       	in	r28, 0x3d	; 61
    3494:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0; /*clear clock to disable timer*/
    3496:	ee e4       	ldi	r30, 0x4E	; 78
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	10 82       	st	Z, r1
}
    349c:	cf 91       	pop	r28
    349e:	df 91       	pop	r29
    34a0:	08 95       	ret

000034a2 <Timer1_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    34a2:	df 93       	push	r29
    34a4:	cf 93       	push	r28
    34a6:	00 d0       	rcall	.+0      	; 0x34a8 <Timer1_setCallBack+0x6>
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    34ac:	9a 83       	std	Y+2, r25	; 0x02
    34ae:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    34b0:	89 81       	ldd	r24, Y+1	; 0x01
    34b2:	9a 81       	ldd	r25, Y+2	; 0x02
    34b4:	90 93 19 01 	sts	0x0119, r25
    34b8:	80 93 18 01 	sts	0x0118, r24
}
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	08 95       	ret

000034c6 <UART_init>:
/*
 * Description :
 * Functional responsible for Initializing the UART device.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    34c6:	df 93       	push	r29
    34c8:	cf 93       	push	r28
    34ca:	00 d0       	rcall	.+0      	; 0x34cc <UART_init+0x6>
    34cc:	00 d0       	rcall	.+0      	; 0x34ce <UART_init+0x8>
    34ce:	cd b7       	in	r28, 0x3d	; 61
    34d0:	de b7       	in	r29, 0x3e	; 62
    34d2:	9c 83       	std	Y+4, r25	; 0x04
    34d4:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    34d6:	1a 82       	std	Y+2, r1	; 0x02
    34d8:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    34da:	eb e2       	ldi	r30, 0x2B	; 43
    34dc:	f0 e0       	ldi	r31, 0x00	; 0
    34de:	82 e0       	ldi	r24, 0x02	; 2
    34e0:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);
    34e2:	ea e2       	ldi	r30, 0x2A	; 42
    34e4:	f0 e0       	ldi	r31, 0x00	; 0
    34e6:	88 e1       	ldi	r24, 0x18	; 24
    34e8:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr->bit_data)>>2);
    34ea:	aa e2       	ldi	r26, 0x2A	; 42
    34ec:	b0 e0       	ldi	r27, 0x00	; 0
    34ee:	ea e2       	ldi	r30, 0x2A	; 42
    34f0:	f0 e0       	ldi	r31, 0x00	; 0
    34f2:	80 81       	ld	r24, Z
    34f4:	98 2f       	mov	r25, r24
    34f6:	9b 7f       	andi	r25, 0xFB	; 251
    34f8:	eb 81       	ldd	r30, Y+3	; 0x03
    34fa:	fc 81       	ldd	r31, Y+4	; 0x04
    34fc:	80 81       	ld	r24, Z
    34fe:	86 95       	lsr	r24
    3500:	86 95       	lsr	r24
    3502:	89 2b       	or	r24, r25
    3504:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    3506:	e0 e4       	ldi	r30, 0x40	; 64
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	80 e8       	ldi	r24, 0x80	; 128
    350c:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF6) | (Config_Ptr->bit_data);
    350e:	a0 e4       	ldi	r26, 0x40	; 64
    3510:	b0 e0       	ldi	r27, 0x00	; 0
    3512:	e0 e4       	ldi	r30, 0x40	; 64
    3514:	f0 e0       	ldi	r31, 0x00	; 0
    3516:	80 81       	ld	r24, Z
    3518:	98 2f       	mov	r25, r24
    351a:	96 7f       	andi	r25, 0xF6	; 246
    351c:	eb 81       	ldd	r30, Y+3	; 0x03
    351e:	fc 81       	ldd	r31, Y+4	; 0x04
    3520:	80 81       	ld	r24, Z
    3522:	89 2b       	or	r24, r25
    3524:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity);
    3526:	a0 e4       	ldi	r26, 0x40	; 64
    3528:	b0 e0       	ldi	r27, 0x00	; 0
    352a:	e0 e4       	ldi	r30, 0x40	; 64
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	80 81       	ld	r24, Z
    3530:	98 2f       	mov	r25, r24
    3532:	9f 7c       	andi	r25, 0xCF	; 207
    3534:	eb 81       	ldd	r30, Y+3	; 0x03
    3536:	fc 81       	ldd	r31, Y+4	; 0x04
    3538:	81 81       	ldd	r24, Z+1	; 0x01
    353a:	89 2b       	or	r24, r25
    353c:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | (Config_Ptr->stop_bit);
    353e:	a0 e4       	ldi	r26, 0x40	; 64
    3540:	b0 e0       	ldi	r27, 0x00	; 0
    3542:	e0 e4       	ldi	r30, 0x40	; 64
    3544:	f0 e0       	ldi	r31, 0x00	; 0
    3546:	80 81       	ld	r24, Z
    3548:	98 2f       	mov	r25, r24
    354a:	97 7f       	andi	r25, 0xF7	; 247
    354c:	eb 81       	ldd	r30, Y+3	; 0x03
    354e:	fc 81       	ldd	r31, Y+4	; 0x04
    3550:	82 81       	ldd	r24, Z+2	; 0x02
    3552:	89 2b       	or	r24, r25
    3554:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    3556:	eb 81       	ldd	r30, Y+3	; 0x03
    3558:	fc 81       	ldd	r31, Y+4	; 0x04
    355a:	83 81       	ldd	r24, Z+3	; 0x03
    355c:	94 81       	ldd	r25, Z+4	; 0x04
    355e:	a5 81       	ldd	r26, Z+5	; 0x05
    3560:	b6 81       	ldd	r27, Z+6	; 0x06
    3562:	88 0f       	add	r24, r24
    3564:	99 1f       	adc	r25, r25
    3566:	aa 1f       	adc	r26, r26
    3568:	bb 1f       	adc	r27, r27
    356a:	88 0f       	add	r24, r24
    356c:	99 1f       	adc	r25, r25
    356e:	aa 1f       	adc	r26, r26
    3570:	bb 1f       	adc	r27, r27
    3572:	88 0f       	add	r24, r24
    3574:	99 1f       	adc	r25, r25
    3576:	aa 1f       	adc	r26, r26
    3578:	bb 1f       	adc	r27, r27
    357a:	9c 01       	movw	r18, r24
    357c:	ad 01       	movw	r20, r26
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	92 e1       	ldi	r25, 0x12	; 18
    3582:	aa e7       	ldi	r26, 0x7A	; 122
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	bc 01       	movw	r22, r24
    3588:	cd 01       	movw	r24, r26
    358a:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <__udivmodsi4>
    358e:	da 01       	movw	r26, r20
    3590:	c9 01       	movw	r24, r18
    3592:	01 97       	sbiw	r24, 0x01	; 1
    3594:	9a 83       	std	Y+2, r25	; 0x02
    3596:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3598:	e0 e4       	ldi	r30, 0x40	; 64
    359a:	f0 e0       	ldi	r31, 0x00	; 0
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	9a 81       	ldd	r25, Y+2	; 0x02
    35a0:	89 2f       	mov	r24, r25
    35a2:	99 27       	eor	r25, r25
    35a4:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    35a6:	e9 e2       	ldi	r30, 0x29	; 41
    35a8:	f0 e0       	ldi	r31, 0x00	; 0
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	80 83       	st	Z, r24

}
    35ae:	0f 90       	pop	r0
    35b0:	0f 90       	pop	r0
    35b2:	0f 90       	pop	r0
    35b4:	0f 90       	pop	r0
    35b6:	cf 91       	pop	r28
    35b8:	df 91       	pop	r29
    35ba:	08 95       	ret

000035bc <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    35bc:	df 93       	push	r29
    35be:	cf 93       	push	r28
    35c0:	0f 92       	push	r0
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    35c8:	eb e2       	ldi	r30, 0x2B	; 43
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	80 81       	ld	r24, Z
    35ce:	88 2f       	mov	r24, r24
    35d0:	90 e0       	ldi	r25, 0x00	; 0
    35d2:	80 72       	andi	r24, 0x20	; 32
    35d4:	90 70       	andi	r25, 0x00	; 0
    35d6:	00 97       	sbiw	r24, 0x00	; 0
    35d8:	b9 f3       	breq	.-18     	; 0x35c8 <UART_sendByte+0xc>

	UDR = data;
    35da:	ec e2       	ldi	r30, 0x2C	; 44
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	80 83       	st	Z, r24

}
    35e2:	0f 90       	pop	r0
    35e4:	cf 91       	pop	r28
    35e6:	df 91       	pop	r29
    35e8:	08 95       	ret

000035ea <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    35ea:	df 93       	push	r29
    35ec:	cf 93       	push	r28
    35ee:	cd b7       	in	r28, 0x3d	; 61
    35f0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    35f2:	eb e2       	ldi	r30, 0x2B	; 43
    35f4:	f0 e0       	ldi	r31, 0x00	; 0
    35f6:	80 81       	ld	r24, Z
    35f8:	88 23       	and	r24, r24
    35fa:	dc f7       	brge	.-10     	; 0x35f2 <UART_recieveByte+0x8>

    return UDR;
    35fc:	ec e2       	ldi	r30, 0x2C	; 44
    35fe:	f0 e0       	ldi	r31, 0x00	; 0
    3600:	80 81       	ld	r24, Z
}
    3602:	cf 91       	pop	r28
    3604:	df 91       	pop	r29
    3606:	08 95       	ret

00003608 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3608:	df 93       	push	r29
    360a:	cf 93       	push	r28
    360c:	00 d0       	rcall	.+0      	; 0x360e <UART_sendString+0x6>
    360e:	0f 92       	push	r0
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62
    3614:	9b 83       	std	Y+3, r25	; 0x03
    3616:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3618:	19 82       	std	Y+1, r1	; 0x01
    361a:	0e c0       	rjmp	.+28     	; 0x3638 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    361c:	89 81       	ldd	r24, Y+1	; 0x01
    361e:	28 2f       	mov	r18, r24
    3620:	30 e0       	ldi	r19, 0x00	; 0
    3622:	8a 81       	ldd	r24, Y+2	; 0x02
    3624:	9b 81       	ldd	r25, Y+3	; 0x03
    3626:	fc 01       	movw	r30, r24
    3628:	e2 0f       	add	r30, r18
    362a:	f3 1f       	adc	r31, r19
    362c:	80 81       	ld	r24, Z
    362e:	0e 94 de 1a 	call	0x35bc	; 0x35bc <UART_sendByte>
		i++;
    3632:	89 81       	ldd	r24, Y+1	; 0x01
    3634:	8f 5f       	subi	r24, 0xFF	; 255
    3636:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3638:	89 81       	ldd	r24, Y+1	; 0x01
    363a:	28 2f       	mov	r18, r24
    363c:	30 e0       	ldi	r19, 0x00	; 0
    363e:	8a 81       	ldd	r24, Y+2	; 0x02
    3640:	9b 81       	ldd	r25, Y+3	; 0x03
    3642:	fc 01       	movw	r30, r24
    3644:	e2 0f       	add	r30, r18
    3646:	f3 1f       	adc	r31, r19
    3648:	80 81       	ld	r24, Z
    364a:	88 23       	and	r24, r24
    364c:	39 f7       	brne	.-50     	; 0x361c <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    364e:	0f 90       	pop	r0
    3650:	0f 90       	pop	r0
    3652:	0f 90       	pop	r0
    3654:	cf 91       	pop	r28
    3656:	df 91       	pop	r29
    3658:	08 95       	ret

0000365a <UART_recieveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_recieveString(uint8 *Str)
{
    365a:	0f 93       	push	r16
    365c:	1f 93       	push	r17
    365e:	df 93       	push	r29
    3660:	cf 93       	push	r28
    3662:	00 d0       	rcall	.+0      	; 0x3664 <UART_recieveString+0xa>
    3664:	0f 92       	push	r0
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	9b 83       	std	Y+3, r25	; 0x03
    366c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    366e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    3670:	89 81       	ldd	r24, Y+1	; 0x01
    3672:	28 2f       	mov	r18, r24
    3674:	30 e0       	ldi	r19, 0x00	; 0
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	9b 81       	ldd	r25, Y+3	; 0x03
    367a:	8c 01       	movw	r16, r24
    367c:	02 0f       	add	r16, r18
    367e:	13 1f       	adc	r17, r19
    3680:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
    3684:	f8 01       	movw	r30, r16
    3686:	80 83       	st	Z, r24
    3688:	0f c0       	rjmp	.+30     	; 0x36a8 <UART_recieveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    3690:	89 81       	ldd	r24, Y+1	; 0x01
    3692:	28 2f       	mov	r18, r24
    3694:	30 e0       	ldi	r19, 0x00	; 0
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	9b 81       	ldd	r25, Y+3	; 0x03
    369a:	8c 01       	movw	r16, r24
    369c:	02 0f       	add	r16, r18
    369e:	13 1f       	adc	r17, r19
    36a0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <UART_recieveByte>
    36a4:	f8 01       	movw	r30, r16
    36a6:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    36a8:	89 81       	ldd	r24, Y+1	; 0x01
    36aa:	28 2f       	mov	r18, r24
    36ac:	30 e0       	ldi	r19, 0x00	; 0
    36ae:	8a 81       	ldd	r24, Y+2	; 0x02
    36b0:	9b 81       	ldd	r25, Y+3	; 0x03
    36b2:	fc 01       	movw	r30, r24
    36b4:	e2 0f       	add	r30, r18
    36b6:	f3 1f       	adc	r31, r19
    36b8:	80 81       	ld	r24, Z
    36ba:	83 32       	cpi	r24, 0x23	; 35
    36bc:	31 f7       	brne	.-52     	; 0x368a <UART_recieveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	28 2f       	mov	r18, r24
    36c2:	30 e0       	ldi	r19, 0x00	; 0
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	9b 81       	ldd	r25, Y+3	; 0x03
    36c8:	fc 01       	movw	r30, r24
    36ca:	e2 0f       	add	r30, r18
    36cc:	f3 1f       	adc	r31, r19
    36ce:	10 82       	st	Z, r1
}
    36d0:	0f 90       	pop	r0
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	cf 91       	pop	r28
    36d8:	df 91       	pop	r29
    36da:	1f 91       	pop	r17
    36dc:	0f 91       	pop	r16
    36de:	08 95       	ret

000036e0 <__udivmodsi4>:
    36e0:	a1 e2       	ldi	r26, 0x21	; 33
    36e2:	1a 2e       	mov	r1, r26
    36e4:	aa 1b       	sub	r26, r26
    36e6:	bb 1b       	sub	r27, r27
    36e8:	fd 01       	movw	r30, r26
    36ea:	0d c0       	rjmp	.+26     	; 0x3706 <__udivmodsi4_ep>

000036ec <__udivmodsi4_loop>:
    36ec:	aa 1f       	adc	r26, r26
    36ee:	bb 1f       	adc	r27, r27
    36f0:	ee 1f       	adc	r30, r30
    36f2:	ff 1f       	adc	r31, r31
    36f4:	a2 17       	cp	r26, r18
    36f6:	b3 07       	cpc	r27, r19
    36f8:	e4 07       	cpc	r30, r20
    36fa:	f5 07       	cpc	r31, r21
    36fc:	20 f0       	brcs	.+8      	; 0x3706 <__udivmodsi4_ep>
    36fe:	a2 1b       	sub	r26, r18
    3700:	b3 0b       	sbc	r27, r19
    3702:	e4 0b       	sbc	r30, r20
    3704:	f5 0b       	sbc	r31, r21

00003706 <__udivmodsi4_ep>:
    3706:	66 1f       	adc	r22, r22
    3708:	77 1f       	adc	r23, r23
    370a:	88 1f       	adc	r24, r24
    370c:	99 1f       	adc	r25, r25
    370e:	1a 94       	dec	r1
    3710:	69 f7       	brne	.-38     	; 0x36ec <__udivmodsi4_loop>
    3712:	60 95       	com	r22
    3714:	70 95       	com	r23
    3716:	80 95       	com	r24
    3718:	90 95       	com	r25
    371a:	9b 01       	movw	r18, r22
    371c:	ac 01       	movw	r20, r24
    371e:	bd 01       	movw	r22, r26
    3720:	cf 01       	movw	r24, r30
    3722:	08 95       	ret

00003724 <__prologue_saves__>:
    3724:	2f 92       	push	r2
    3726:	3f 92       	push	r3
    3728:	4f 92       	push	r4
    372a:	5f 92       	push	r5
    372c:	6f 92       	push	r6
    372e:	7f 92       	push	r7
    3730:	8f 92       	push	r8
    3732:	9f 92       	push	r9
    3734:	af 92       	push	r10
    3736:	bf 92       	push	r11
    3738:	cf 92       	push	r12
    373a:	df 92       	push	r13
    373c:	ef 92       	push	r14
    373e:	ff 92       	push	r15
    3740:	0f 93       	push	r16
    3742:	1f 93       	push	r17
    3744:	cf 93       	push	r28
    3746:	df 93       	push	r29
    3748:	cd b7       	in	r28, 0x3d	; 61
    374a:	de b7       	in	r29, 0x3e	; 62
    374c:	ca 1b       	sub	r28, r26
    374e:	db 0b       	sbc	r29, r27
    3750:	0f b6       	in	r0, 0x3f	; 63
    3752:	f8 94       	cli
    3754:	de bf       	out	0x3e, r29	; 62
    3756:	0f be       	out	0x3f, r0	; 63
    3758:	cd bf       	out	0x3d, r28	; 61
    375a:	09 94       	ijmp

0000375c <__epilogue_restores__>:
    375c:	2a 88       	ldd	r2, Y+18	; 0x12
    375e:	39 88       	ldd	r3, Y+17	; 0x11
    3760:	48 88       	ldd	r4, Y+16	; 0x10
    3762:	5f 84       	ldd	r5, Y+15	; 0x0f
    3764:	6e 84       	ldd	r6, Y+14	; 0x0e
    3766:	7d 84       	ldd	r7, Y+13	; 0x0d
    3768:	8c 84       	ldd	r8, Y+12	; 0x0c
    376a:	9b 84       	ldd	r9, Y+11	; 0x0b
    376c:	aa 84       	ldd	r10, Y+10	; 0x0a
    376e:	b9 84       	ldd	r11, Y+9	; 0x09
    3770:	c8 84       	ldd	r12, Y+8	; 0x08
    3772:	df 80       	ldd	r13, Y+7	; 0x07
    3774:	ee 80       	ldd	r14, Y+6	; 0x06
    3776:	fd 80       	ldd	r15, Y+5	; 0x05
    3778:	0c 81       	ldd	r16, Y+4	; 0x04
    377a:	1b 81       	ldd	r17, Y+3	; 0x03
    377c:	aa 81       	ldd	r26, Y+2	; 0x02
    377e:	b9 81       	ldd	r27, Y+1	; 0x01
    3780:	ce 0f       	add	r28, r30
    3782:	d1 1d       	adc	r29, r1
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	de bf       	out	0x3e, r29	; 62
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	cd bf       	out	0x3d, r28	; 61
    378e:	ed 01       	movw	r28, r26
    3790:	08 95       	ret

00003792 <itoa>:
    3792:	fb 01       	movw	r30, r22
    3794:	9f 01       	movw	r18, r30
    3796:	e8 94       	clt
    3798:	42 30       	cpi	r20, 0x02	; 2
    379a:	c4 f0       	brlt	.+48     	; 0x37cc <itoa+0x3a>
    379c:	45 32       	cpi	r20, 0x25	; 37
    379e:	b4 f4       	brge	.+44     	; 0x37cc <itoa+0x3a>
    37a0:	4a 30       	cpi	r20, 0x0A	; 10
    37a2:	29 f4       	brne	.+10     	; 0x37ae <itoa+0x1c>
    37a4:	97 fb       	bst	r25, 7
    37a6:	1e f4       	brtc	.+6      	; 0x37ae <itoa+0x1c>
    37a8:	90 95       	com	r25
    37aa:	81 95       	neg	r24
    37ac:	9f 4f       	sbci	r25, 0xFF	; 255
    37ae:	64 2f       	mov	r22, r20
    37b0:	77 27       	eor	r23, r23
    37b2:	0e 94 fa 1b 	call	0x37f4	; 0x37f4 <__udivmodhi4>
    37b6:	80 5d       	subi	r24, 0xD0	; 208
    37b8:	8a 33       	cpi	r24, 0x3A	; 58
    37ba:	0c f0       	brlt	.+2      	; 0x37be <itoa+0x2c>
    37bc:	89 5d       	subi	r24, 0xD9	; 217
    37be:	81 93       	st	Z+, r24
    37c0:	cb 01       	movw	r24, r22
    37c2:	00 97       	sbiw	r24, 0x00	; 0
    37c4:	a1 f7       	brne	.-24     	; 0x37ae <itoa+0x1c>
    37c6:	16 f4       	brtc	.+4      	; 0x37cc <itoa+0x3a>
    37c8:	5d e2       	ldi	r21, 0x2D	; 45
    37ca:	51 93       	st	Z+, r21
    37cc:	10 82       	st	Z, r1
    37ce:	c9 01       	movw	r24, r18
    37d0:	0c 94 ea 1b 	jmp	0x37d4	; 0x37d4 <strrev>

000037d4 <strrev>:
    37d4:	dc 01       	movw	r26, r24
    37d6:	fc 01       	movw	r30, r24
    37d8:	67 2f       	mov	r22, r23
    37da:	71 91       	ld	r23, Z+
    37dc:	77 23       	and	r23, r23
    37de:	e1 f7       	brne	.-8      	; 0x37d8 <strrev+0x4>
    37e0:	32 97       	sbiw	r30, 0x02	; 2
    37e2:	04 c0       	rjmp	.+8      	; 0x37ec <strrev+0x18>
    37e4:	7c 91       	ld	r23, X
    37e6:	6d 93       	st	X+, r22
    37e8:	70 83       	st	Z, r23
    37ea:	62 91       	ld	r22, -Z
    37ec:	ae 17       	cp	r26, r30
    37ee:	bf 07       	cpc	r27, r31
    37f0:	c8 f3       	brcs	.-14     	; 0x37e4 <strrev+0x10>
    37f2:	08 95       	ret

000037f4 <__udivmodhi4>:
    37f4:	aa 1b       	sub	r26, r26
    37f6:	bb 1b       	sub	r27, r27
    37f8:	51 e1       	ldi	r21, 0x11	; 17
    37fa:	07 c0       	rjmp	.+14     	; 0x380a <__udivmodhi4_ep>

000037fc <__udivmodhi4_loop>:
    37fc:	aa 1f       	adc	r26, r26
    37fe:	bb 1f       	adc	r27, r27
    3800:	a6 17       	cp	r26, r22
    3802:	b7 07       	cpc	r27, r23
    3804:	10 f0       	brcs	.+4      	; 0x380a <__udivmodhi4_ep>
    3806:	a6 1b       	sub	r26, r22
    3808:	b7 0b       	sbc	r27, r23

0000380a <__udivmodhi4_ep>:
    380a:	88 1f       	adc	r24, r24
    380c:	99 1f       	adc	r25, r25
    380e:	5a 95       	dec	r21
    3810:	a9 f7       	brne	.-22     	; 0x37fc <__udivmodhi4_loop>
    3812:	80 95       	com	r24
    3814:	90 95       	com	r25
    3816:	bc 01       	movw	r22, r24
    3818:	cd 01       	movw	r24, r26
    381a:	08 95       	ret

0000381c <_exit>:
    381c:	f8 94       	cli

0000381e <__stop_program>:
    381e:	ff cf       	rjmp	.-2      	; 0x381e <__stop_program>
