
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002584  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  00002584  00002618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  0080007a  0080007a  00002632  2**0
                  ALLOC
  3 .stab         0000279c  00000000  00000000  00002634  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001323  00000000  00000000  00004dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000060f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006233  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000063a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008ed7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009c84  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a071  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a83f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 a6 10 	jmp	0x214c	; 0x214c <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e8       	ldi	r30, 0x84	; 132
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 38       	cpi	r26, 0x8B	; 139
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 42 07 	call	0xe84	; 0xe84 <main>
      8a:	0c 94 c0 12 	jmp	0x2580	; 0x2580 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 12 	jmp	0x252a	; 0x252a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 12 	jmp	0x252a	; 0x252a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 12 	jmp	0x2512	; 0x2512 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 12 	jmp	0x254a	; 0x254a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 95 12 	jmp	0x252a	; 0x252a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 95 12 	jmp	0x252a	; 0x252a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 95 12 	jmp	0x252a	; 0x252a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b1 12 	jmp	0x2562	; 0x2562 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 99 12 	jmp	0x2532	; 0x2532 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b5 12 	jmp	0x256a	; 0x256a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Receive_pass>:


uint8 pass1_ctrl[5], pass2_ctrl[5], permanent_pass[5];

void Receive_pass(uint8 *pass)
{
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	00 d0       	rcall	.+0      	; 0xb50 <Receive_pass+0xa>
     b50:	0f 92       	push	r0
     b52:	cd b7       	in	r28, 0x3d	; 61
     b54:	de b7       	in	r29, 0x3e	; 62
     b56:	9b 83       	std	Y+3, r25	; 0x03
     b58:	8a 83       	std	Y+2, r24	; 0x02
	for (uint8 i=0;i<5;i++)
     b5a:	19 82       	std	Y+1, r1	; 0x01
     b5c:	0f c0       	rjmp	.+30     	; 0xb7c <Receive_pass+0x36>
	{
		pass[i] = UART_recieveByte();
     b5e:	89 81       	ldd	r24, Y+1	; 0x01
     b60:	28 2f       	mov	r18, r24
     b62:	30 e0       	ldi	r19, 0x00	; 0
     b64:	8a 81       	ldd	r24, Y+2	; 0x02
     b66:	9b 81       	ldd	r25, Y+3	; 0x03
     b68:	8c 01       	movw	r16, r24
     b6a:	02 0f       	add	r16, r18
     b6c:	13 1f       	adc	r17, r19
     b6e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <UART_recieveByte>
     b72:	f8 01       	movw	r30, r16
     b74:	80 83       	st	Z, r24

uint8 pass1_ctrl[5], pass2_ctrl[5], permanent_pass[5];

void Receive_pass(uint8 *pass)
{
	for (uint8 i=0;i<5;i++)
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	8f 5f       	subi	r24, 0xFF	; 255
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	85 30       	cpi	r24, 0x05	; 5
     b80:	70 f3       	brcs	.-36     	; 0xb5e <Receive_pass+0x18>
	{
		pass[i] = UART_recieveByte();
		/* receive the password byte by byte from MC1 */
	}
}
     b82:	0f 90       	pop	r0
     b84:	0f 90       	pop	r0
     b86:	0f 90       	pop	r0
     b88:	cf 91       	pop	r28
     b8a:	df 91       	pop	r29
     b8c:	1f 91       	pop	r17
     b8e:	0f 91       	pop	r16
     b90:	08 95       	ret

00000b92 <Store_pass>:

void Store_pass(uint8 *pass)
{
     b92:	df 93       	push	r29
     b94:	cf 93       	push	r28
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	61 97       	sbiw	r28, 0x11	; 17
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	de bf       	out	0x3e, r29	; 62
     ba2:	0f be       	out	0x3f, r0	; 63
     ba4:	cd bf       	out	0x3d, r28	; 61
     ba6:	99 8b       	std	Y+17, r25	; 0x11
     ba8:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i=0;i < 5;i++)
     baa:	1f 86       	std	Y+15, r1	; 0x0f
     bac:	88 c0       	rjmp	.+272    	; 0xcbe <Store_pass+0x12c>
	{
		EEPROM_writeByte(0x0311+i, pass[i]);
     bae:	8f 85       	ldd	r24, Y+15	; 0x0f
     bb0:	88 2f       	mov	r24, r24
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	8f 5e       	subi	r24, 0xEF	; 239
     bb6:	9c 4f       	sbci	r25, 0xFC	; 252
     bb8:	ac 01       	movw	r20, r24
     bba:	8f 85       	ldd	r24, Y+15	; 0x0f
     bbc:	28 2f       	mov	r18, r24
     bbe:	30 e0       	ldi	r19, 0x00	; 0
     bc0:	88 89       	ldd	r24, Y+16	; 0x10
     bc2:	99 89       	ldd	r25, Y+17	; 0x11
     bc4:	fc 01       	movw	r30, r24
     bc6:	e2 0f       	add	r30, r18
     bc8:	f3 1f       	adc	r31, r19
     bca:	20 81       	ld	r18, Z
     bcc:	ca 01       	movw	r24, r20
     bce:	62 2f       	mov	r22, r18
     bd0:	0e 94 c0 0b 	call	0x1780	; 0x1780 <EEPROM_writeByte>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	a8 ec       	ldi	r26, 0xC8	; 200
     bda:	b2 e4       	ldi	r27, 0x42	; 66
     bdc:	8b 87       	std	Y+11, r24	; 0x0b
     bde:	9c 87       	std	Y+12, r25	; 0x0c
     be0:	ad 87       	std	Y+13, r26	; 0x0d
     be2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     be4:	6b 85       	ldd	r22, Y+11	; 0x0b
     be6:	7c 85       	ldd	r23, Y+12	; 0x0c
     be8:	8d 85       	ldd	r24, Y+13	; 0x0d
     bea:	9e 85       	ldd	r25, Y+14	; 0x0e
     bec:	20 e0       	ldi	r18, 0x00	; 0
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	4a ef       	ldi	r20, 0xFA	; 250
     bf2:	54 e4       	ldi	r21, 0x44	; 68
     bf4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bf8:	dc 01       	movw	r26, r24
     bfa:	cb 01       	movw	r24, r22
     bfc:	8f 83       	std	Y+7, r24	; 0x07
     bfe:	98 87       	std	Y+8, r25	; 0x08
     c00:	a9 87       	std	Y+9, r26	; 0x09
     c02:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c04:	6f 81       	ldd	r22, Y+7	; 0x07
     c06:	78 85       	ldd	r23, Y+8	; 0x08
     c08:	89 85       	ldd	r24, Y+9	; 0x09
     c0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     c0c:	20 e0       	ldi	r18, 0x00	; 0
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	40 e8       	ldi	r20, 0x80	; 128
     c12:	5f e3       	ldi	r21, 0x3F	; 63
     c14:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c18:	88 23       	and	r24, r24
     c1a:	2c f4       	brge	.+10     	; 0xc26 <Store_pass+0x94>
		__ticks = 1;
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9e 83       	std	Y+6, r25	; 0x06
     c22:	8d 83       	std	Y+5, r24	; 0x05
     c24:	3f c0       	rjmp	.+126    	; 0xca4 <Store_pass+0x112>
	else if (__tmp > 65535)
     c26:	6f 81       	ldd	r22, Y+7	; 0x07
     c28:	78 85       	ldd	r23, Y+8	; 0x08
     c2a:	89 85       	ldd	r24, Y+9	; 0x09
     c2c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	3f ef       	ldi	r19, 0xFF	; 255
     c32:	4f e7       	ldi	r20, 0x7F	; 127
     c34:	57 e4       	ldi	r21, 0x47	; 71
     c36:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c3a:	18 16       	cp	r1, r24
     c3c:	4c f5       	brge	.+82     	; 0xc90 <Store_pass+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c3e:	6b 85       	ldd	r22, Y+11	; 0x0b
     c40:	7c 85       	ldd	r23, Y+12	; 0x0c
     c42:	8d 85       	ldd	r24, Y+13	; 0x0d
     c44:	9e 85       	ldd	r25, Y+14	; 0x0e
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	40 e2       	ldi	r20, 0x20	; 32
     c4c:	51 e4       	ldi	r21, 0x41	; 65
     c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	bc 01       	movw	r22, r24
     c58:	cd 01       	movw	r24, r26
     c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c5e:	dc 01       	movw	r26, r24
     c60:	cb 01       	movw	r24, r22
     c62:	9e 83       	std	Y+6, r25	; 0x06
     c64:	8d 83       	std	Y+5, r24	; 0x05
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <Store_pass+0xf4>
     c68:	88 ec       	ldi	r24, 0xC8	; 200
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	9c 83       	std	Y+4, r25	; 0x04
     c6e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c70:	8b 81       	ldd	r24, Y+3	; 0x03
     c72:	9c 81       	ldd	r25, Y+4	; 0x04
     c74:	01 97       	sbiw	r24, 0x01	; 1
     c76:	f1 f7       	brne	.-4      	; 0xc74 <Store_pass+0xe2>
     c78:	9c 83       	std	Y+4, r25	; 0x04
     c7a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c7c:	8d 81       	ldd	r24, Y+5	; 0x05
     c7e:	9e 81       	ldd	r25, Y+6	; 0x06
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9e 83       	std	Y+6, r25	; 0x06
     c84:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	00 97       	sbiw	r24, 0x00	; 0
     c8c:	69 f7       	brne	.-38     	; 0xc68 <Store_pass+0xd6>
     c8e:	14 c0       	rjmp	.+40     	; 0xcb8 <Store_pass+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c90:	6f 81       	ldd	r22, Y+7	; 0x07
     c92:	78 85       	ldd	r23, Y+8	; 0x08
     c94:	89 85       	ldd	r24, Y+9	; 0x09
     c96:	9a 85       	ldd	r25, Y+10	; 0x0a
     c98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c9c:	dc 01       	movw	r26, r24
     c9e:	cb 01       	movw	r24, r22
     ca0:	9e 83       	std	Y+6, r25	; 0x06
     ca2:	8d 83       	std	Y+5, r24	; 0x05
     ca4:	8d 81       	ldd	r24, Y+5	; 0x05
     ca6:	9e 81       	ldd	r25, Y+6	; 0x06
     ca8:	9a 83       	std	Y+2, r25	; 0x02
     caa:	89 83       	std	Y+1, r24	; 0x01
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	01 97       	sbiw	r24, 0x01	; 1
     cb2:	f1 f7       	brne	.-4      	; 0xcb0 <Store_pass+0x11e>
     cb4:	9a 83       	std	Y+2, r25	; 0x02
     cb6:	89 83       	std	Y+1, r24	; 0x01
	}
}

void Store_pass(uint8 *pass)
{
	for(uint8 i=0;i < 5;i++)
     cb8:	8f 85       	ldd	r24, Y+15	; 0x0f
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	8f 87       	std	Y+15, r24	; 0x0f
     cbe:	8f 85       	ldd	r24, Y+15	; 0x0f
     cc0:	85 30       	cpi	r24, 0x05	; 5
     cc2:	08 f4       	brcc	.+2      	; 0xcc6 <Store_pass+0x134>
     cc4:	74 cf       	rjmp	.-280    	; 0xbae <Store_pass+0x1c>
	{
		EEPROM_writeByte(0x0311+i, pass[i]);
		_delay_ms(100);
	}
}
     cc6:	61 96       	adiw	r28, 0x11	; 17
     cc8:	0f b6       	in	r0, 0x3f	; 63
     cca:	f8 94       	cli
     ccc:	de bf       	out	0x3e, r29	; 62
     cce:	0f be       	out	0x3f, r0	; 63
     cd0:	cd bf       	out	0x3d, r28	; 61
     cd2:	cf 91       	pop	r28
     cd4:	df 91       	pop	r29
     cd6:	08 95       	ret

00000cd8 <Read_pass>:

void Read_pass(uint8 *pass)
{
     cd8:	df 93       	push	r29
     cda:	cf 93       	push	r28
     cdc:	cd b7       	in	r28, 0x3d	; 61
     cde:	de b7       	in	r29, 0x3e	; 62
     ce0:	61 97       	sbiw	r28, 0x11	; 17
     ce2:	0f b6       	in	r0, 0x3f	; 63
     ce4:	f8 94       	cli
     ce6:	de bf       	out	0x3e, r29	; 62
     ce8:	0f be       	out	0x3f, r0	; 63
     cea:	cd bf       	out	0x3d, r28	; 61
     cec:	99 8b       	std	Y+17, r25	; 0x11
     cee:	88 8b       	std	Y+16, r24	; 0x10
	for(uint8 i=0;i < 5;i++)
     cf0:	1f 86       	std	Y+15, r1	; 0x0f
     cf2:	86 c0       	rjmp	.+268    	; 0xe00 <Read_pass+0x128>
	{
		EEPROM_readByte(0x0311+i, pass+i);
     cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf6:	88 2f       	mov	r24, r24
     cf8:	90 e0       	ldi	r25, 0x00	; 0
     cfa:	8f 5e       	subi	r24, 0xEF	; 239
     cfc:	9c 4f       	sbci	r25, 0xFC	; 252
     cfe:	ac 01       	movw	r20, r24
     d00:	8f 85       	ldd	r24, Y+15	; 0x0f
     d02:	28 2f       	mov	r18, r24
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	88 89       	ldd	r24, Y+16	; 0x10
     d08:	99 89       	ldd	r25, Y+17	; 0x11
     d0a:	28 0f       	add	r18, r24
     d0c:	39 1f       	adc	r19, r25
     d0e:	ca 01       	movw	r24, r20
     d10:	b9 01       	movw	r22, r18
     d12:	0e 94 01 0c 	call	0x1802	; 0x1802 <EEPROM_readByte>
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	a8 ec       	ldi	r26, 0xC8	; 200
     d1c:	b2 e4       	ldi	r27, 0x42	; 66
     d1e:	8b 87       	std	Y+11, r24	; 0x0b
     d20:	9c 87       	std	Y+12, r25	; 0x0c
     d22:	ad 87       	std	Y+13, r26	; 0x0d
     d24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d26:	6b 85       	ldd	r22, Y+11	; 0x0b
     d28:	7c 85       	ldd	r23, Y+12	; 0x0c
     d2a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d2e:	20 e0       	ldi	r18, 0x00	; 0
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	4a ef       	ldi	r20, 0xFA	; 250
     d34:	54 e4       	ldi	r21, 0x44	; 68
     d36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d3a:	dc 01       	movw	r26, r24
     d3c:	cb 01       	movw	r24, r22
     d3e:	8f 83       	std	Y+7, r24	; 0x07
     d40:	98 87       	std	Y+8, r25	; 0x08
     d42:	a9 87       	std	Y+9, r26	; 0x09
     d44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d46:	6f 81       	ldd	r22, Y+7	; 0x07
     d48:	78 85       	ldd	r23, Y+8	; 0x08
     d4a:	89 85       	ldd	r24, Y+9	; 0x09
     d4c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d4e:	20 e0       	ldi	r18, 0x00	; 0
     d50:	30 e0       	ldi	r19, 0x00	; 0
     d52:	40 e8       	ldi	r20, 0x80	; 128
     d54:	5f e3       	ldi	r21, 0x3F	; 63
     d56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d5a:	88 23       	and	r24, r24
     d5c:	2c f4       	brge	.+10     	; 0xd68 <Read_pass+0x90>
		__ticks = 1;
     d5e:	81 e0       	ldi	r24, 0x01	; 1
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	9e 83       	std	Y+6, r25	; 0x06
     d64:	8d 83       	std	Y+5, r24	; 0x05
     d66:	3f c0       	rjmp	.+126    	; 0xde6 <Read_pass+0x10e>
	else if (__tmp > 65535)
     d68:	6f 81       	ldd	r22, Y+7	; 0x07
     d6a:	78 85       	ldd	r23, Y+8	; 0x08
     d6c:	89 85       	ldd	r24, Y+9	; 0x09
     d6e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	3f ef       	ldi	r19, 0xFF	; 255
     d74:	4f e7       	ldi	r20, 0x7F	; 127
     d76:	57 e4       	ldi	r21, 0x47	; 71
     d78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d7c:	18 16       	cp	r1, r24
     d7e:	4c f5       	brge	.+82     	; 0xdd2 <Read_pass+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d80:	6b 85       	ldd	r22, Y+11	; 0x0b
     d82:	7c 85       	ldd	r23, Y+12	; 0x0c
     d84:	8d 85       	ldd	r24, Y+13	; 0x0d
     d86:	9e 85       	ldd	r25, Y+14	; 0x0e
     d88:	20 e0       	ldi	r18, 0x00	; 0
     d8a:	30 e0       	ldi	r19, 0x00	; 0
     d8c:	40 e2       	ldi	r20, 0x20	; 32
     d8e:	51 e4       	ldi	r21, 0x41	; 65
     d90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	bc 01       	movw	r22, r24
     d9a:	cd 01       	movw	r24, r26
     d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     da0:	dc 01       	movw	r26, r24
     da2:	cb 01       	movw	r24, r22
     da4:	9e 83       	std	Y+6, r25	; 0x06
     da6:	8d 83       	std	Y+5, r24	; 0x05
     da8:	0f c0       	rjmp	.+30     	; 0xdc8 <Read_pass+0xf0>
     daa:	88 ec       	ldi	r24, 0xC8	; 200
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9c 83       	std	Y+4, r25	; 0x04
     db0:	8b 83       	std	Y+3, r24	; 0x03
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <Read_pass+0xde>
     dba:	9c 83       	std	Y+4, r25	; 0x04
     dbc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	01 97       	sbiw	r24, 0x01	; 1
     dc4:	9e 83       	std	Y+6, r25	; 0x06
     dc6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dc8:	8d 81       	ldd	r24, Y+5	; 0x05
     dca:	9e 81       	ldd	r25, Y+6	; 0x06
     dcc:	00 97       	sbiw	r24, 0x00	; 0
     dce:	69 f7       	brne	.-38     	; 0xdaa <Read_pass+0xd2>
     dd0:	14 c0       	rjmp	.+40     	; 0xdfa <Read_pass+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dd2:	6f 81       	ldd	r22, Y+7	; 0x07
     dd4:	78 85       	ldd	r23, Y+8	; 0x08
     dd6:	89 85       	ldd	r24, Y+9	; 0x09
     dd8:	9a 85       	ldd	r25, Y+10	; 0x0a
     dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	9e 83       	std	Y+6, r25	; 0x06
     de4:	8d 83       	std	Y+5, r24	; 0x05
     de6:	8d 81       	ldd	r24, Y+5	; 0x05
     de8:	9e 81       	ldd	r25, Y+6	; 0x06
     dea:	9a 83       	std	Y+2, r25	; 0x02
     dec:	89 83       	std	Y+1, r24	; 0x01
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	01 97       	sbiw	r24, 0x01	; 1
     df4:	f1 f7       	brne	.-4      	; 0xdf2 <Read_pass+0x11a>
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01
	}
}

void Read_pass(uint8 *pass)
{
	for(uint8 i=0;i < 5;i++)
     dfa:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfc:	8f 5f       	subi	r24, 0xFF	; 255
     dfe:	8f 87       	std	Y+15, r24	; 0x0f
     e00:	8f 85       	ldd	r24, Y+15	; 0x0f
     e02:	85 30       	cpi	r24, 0x05	; 5
     e04:	08 f4       	brcc	.+2      	; 0xe08 <Read_pass+0x130>
     e06:	76 cf       	rjmp	.-276    	; 0xcf4 <Read_pass+0x1c>
	{
		EEPROM_readByte(0x0311+i, pass+i);
		_delay_ms(100);
	}
}
     e08:	61 96       	adiw	r28, 0x11	; 17
     e0a:	0f b6       	in	r0, 0x3f	; 63
     e0c:	f8 94       	cli
     e0e:	de bf       	out	0x3e, r29	; 62
     e10:	0f be       	out	0x3f, r0	; 63
     e12:	cd bf       	out	0x3d, r28	; 61
     e14:	cf 91       	pop	r28
     e16:	df 91       	pop	r29
     e18:	08 95       	ret

00000e1a <Compare_pass>:

uint8 Compare_pass(uint8 *pass1,uint8 *pass2)
{
     e1a:	df 93       	push	r29
     e1c:	cf 93       	push	r28
     e1e:	00 d0       	rcall	.+0      	; 0xe20 <Compare_pass+0x6>
     e20:	00 d0       	rcall	.+0      	; 0xe22 <Compare_pass+0x8>
     e22:	00 d0       	rcall	.+0      	; 0xe24 <Compare_pass+0xa>
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
     e28:	9b 83       	std	Y+3, r25	; 0x03
     e2a:	8a 83       	std	Y+2, r24	; 0x02
     e2c:	7d 83       	std	Y+5, r23	; 0x05
     e2e:	6c 83       	std	Y+4, r22	; 0x04
	for(uint8 i=0;i<5;i++)
     e30:	19 82       	std	Y+1, r1	; 0x01
     e32:	19 c0       	rjmp	.+50     	; 0xe66 <Compare_pass+0x4c>
	{
		if(pass1[i]!= pass2[i])
     e34:	89 81       	ldd	r24, Y+1	; 0x01
     e36:	28 2f       	mov	r18, r24
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	8a 81       	ldd	r24, Y+2	; 0x02
     e3c:	9b 81       	ldd	r25, Y+3	; 0x03
     e3e:	fc 01       	movw	r30, r24
     e40:	e2 0f       	add	r30, r18
     e42:	f3 1f       	adc	r31, r19
     e44:	40 81       	ld	r20, Z
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	8c 81       	ldd	r24, Y+4	; 0x04
     e4e:	9d 81       	ldd	r25, Y+5	; 0x05
     e50:	fc 01       	movw	r30, r24
     e52:	e2 0f       	add	r30, r18
     e54:	f3 1f       	adc	r31, r19
     e56:	80 81       	ld	r24, Z
     e58:	48 17       	cp	r20, r24
     e5a:	11 f0       	breq	.+4      	; 0xe60 <Compare_pass+0x46>
		{
			return NOT_MATCHING;
     e5c:	1e 82       	std	Y+6, r1	; 0x06
     e5e:	08 c0       	rjmp	.+16     	; 0xe70 <Compare_pass+0x56>
	}
}

uint8 Compare_pass(uint8 *pass1,uint8 *pass2)
{
	for(uint8 i=0;i<5;i++)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	85 30       	cpi	r24, 0x05	; 5
     e6a:	20 f3       	brcs	.-56     	; 0xe34 <Compare_pass+0x1a>
		if(pass1[i]!= pass2[i])
		{
			return NOT_MATCHING;
		}
	}
	return MATCHING;
     e6c:	81 e1       	ldi	r24, 0x11	; 17
     e6e:	8e 83       	std	Y+6, r24	; 0x06
     e70:	8e 81       	ldd	r24, Y+6	; 0x06
}
     e72:	26 96       	adiw	r28, 0x06	; 6
     e74:	0f b6       	in	r0, 0x3f	; 63
     e76:	f8 94       	cli
     e78:	de bf       	out	0x3e, r29	; 62
     e7a:	0f be       	out	0x3f, r0	; 63
     e7c:	cd bf       	out	0x3d, r28	; 61
     e7e:	cf 91       	pop	r28
     e80:	df 91       	pop	r29
     e82:	08 95       	ret

00000e84 <main>:

int main(void)
{
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	df 93       	push	r29
     e8a:	cf 93       	push	r28
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	ce 56       	subi	r28, 0x6E	; 110
     e92:	d0 40       	sbci	r29, 0x00	; 0
     e94:	0f b6       	in	r0, 0x3f	; 63
     e96:	f8 94       	cli
     e98:	de bf       	out	0x3e, r29	; 62
     e9a:	0f be       	out	0x3f, r0	; 63
     e9c:	cd bf       	out	0x3d, r28	; 61
	uint8 key_ctrl;
	uint8 saved_pass[5];
	uint8 false_attempts=0;
     e9e:	fe 01       	movw	r30, r28
     ea0:	e9 5b       	subi	r30, 0xB9	; 185
     ea2:	ff 4f       	sbci	r31, 0xFF	; 255
     ea4:	10 82       	st	Z, r1

	SREG |= (1<<7); //enable i_bit
     ea6:	af e5       	ldi	r26, 0x5F	; 95
     ea8:	b0 e0       	ldi	r27, 0x00	; 0
     eaa:	ef e5       	ldi	r30, 0x5F	; 95
     eac:	f0 e0       	ldi	r31, 0x00	; 0
     eae:	80 81       	ld	r24, Z
     eb0:	80 68       	ori	r24, 0x80	; 128
     eb2:	8c 93       	st	X, r24

	Timer1_ConfigType timer1_config_type = {0,0,F_CPU_1024,NORMAL};
     eb4:	ce 01       	movw	r24, r28
     eb6:	82 5b       	subi	r24, 0xB2	; 178
     eb8:	9f 4f       	sbci	r25, 0xFF	; 255
     eba:	a2 96       	adiw	r28, 0x22	; 34
     ebc:	9f af       	std	Y+63, r25	; 0x3f
     ebe:	8e af       	std	Y+62, r24	; 0x3e
     ec0:	a2 97       	sbiw	r28, 0x22	; 34
     ec2:	84 e7       	ldi	r24, 0x74	; 116
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	a4 96       	adiw	r28, 0x24	; 36
     ec8:	9f af       	std	Y+63, r25	; 0x3f
     eca:	8e af       	std	Y+62, r24	; 0x3e
     ecc:	a4 97       	sbiw	r28, 0x24	; 36
     ece:	96 e0       	ldi	r25, 0x06	; 6
     ed0:	a5 96       	adiw	r28, 0x25	; 37
     ed2:	9f af       	std	Y+63, r25	; 0x3f
     ed4:	a5 97       	sbiw	r28, 0x25	; 37
     ed6:	a4 96       	adiw	r28, 0x24	; 36
     ed8:	ee ad       	ldd	r30, Y+62	; 0x3e
     eda:	ff ad       	ldd	r31, Y+63	; 0x3f
     edc:	a4 97       	sbiw	r28, 0x24	; 36
     ede:	00 80       	ld	r0, Z
     ee0:	a4 96       	adiw	r28, 0x24	; 36
     ee2:	8e ad       	ldd	r24, Y+62	; 0x3e
     ee4:	9f ad       	ldd	r25, Y+63	; 0x3f
     ee6:	a4 97       	sbiw	r28, 0x24	; 36
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	a4 96       	adiw	r28, 0x24	; 36
     eec:	9f af       	std	Y+63, r25	; 0x3f
     eee:	8e af       	std	Y+62, r24	; 0x3e
     ef0:	a4 97       	sbiw	r28, 0x24	; 36
     ef2:	a2 96       	adiw	r28, 0x22	; 34
     ef4:	ee ad       	ldd	r30, Y+62	; 0x3e
     ef6:	ff ad       	ldd	r31, Y+63	; 0x3f
     ef8:	a2 97       	sbiw	r28, 0x22	; 34
     efa:	00 82       	st	Z, r0
     efc:	a2 96       	adiw	r28, 0x22	; 34
     efe:	8e ad       	ldd	r24, Y+62	; 0x3e
     f00:	9f ad       	ldd	r25, Y+63	; 0x3f
     f02:	a2 97       	sbiw	r28, 0x22	; 34
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	a2 96       	adiw	r28, 0x22	; 34
     f08:	9f af       	std	Y+63, r25	; 0x3f
     f0a:	8e af       	std	Y+62, r24	; 0x3e
     f0c:	a2 97       	sbiw	r28, 0x22	; 34
     f0e:	a5 96       	adiw	r28, 0x25	; 37
     f10:	9f ad       	ldd	r25, Y+63	; 0x3f
     f12:	a5 97       	sbiw	r28, 0x25	; 37
     f14:	91 50       	subi	r25, 0x01	; 1
     f16:	a5 96       	adiw	r28, 0x25	; 37
     f18:	9f af       	std	Y+63, r25	; 0x3f
     f1a:	a5 97       	sbiw	r28, 0x25	; 37
     f1c:	a5 96       	adiw	r28, 0x25	; 37
     f1e:	ef ad       	ldd	r30, Y+63	; 0x3f
     f20:	a5 97       	sbiw	r28, 0x25	; 37
     f22:	ee 23       	and	r30, r30
     f24:	c1 f6       	brne	.-80     	; 0xed6 <main+0x52>

	TWI_ConfigType twi_config = {RATE400K,0x01};
     f26:	ce 01       	movw	r24, r28
     f28:	8c 5a       	subi	r24, 0xAC	; 172
     f2a:	9f 4f       	sbci	r25, 0xFF	; 255
     f2c:	a7 96       	adiw	r28, 0x27	; 39
     f2e:	9f af       	std	Y+63, r25	; 0x3f
     f30:	8e af       	std	Y+62, r24	; 0x3e
     f32:	a7 97       	sbiw	r28, 0x27	; 39
     f34:	8f e6       	ldi	r24, 0x6F	; 111
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a9 96       	adiw	r28, 0x29	; 41
     f3a:	9f af       	std	Y+63, r25	; 0x3f
     f3c:	8e af       	std	Y+62, r24	; 0x3e
     f3e:	a9 97       	sbiw	r28, 0x29	; 41
     f40:	95 e0       	ldi	r25, 0x05	; 5
     f42:	aa 96       	adiw	r28, 0x2a	; 42
     f44:	9f af       	std	Y+63, r25	; 0x3f
     f46:	aa 97       	sbiw	r28, 0x2a	; 42
     f48:	a9 96       	adiw	r28, 0x29	; 41
     f4a:	ee ad       	ldd	r30, Y+62	; 0x3e
     f4c:	ff ad       	ldd	r31, Y+63	; 0x3f
     f4e:	a9 97       	sbiw	r28, 0x29	; 41
     f50:	00 80       	ld	r0, Z
     f52:	a9 96       	adiw	r28, 0x29	; 41
     f54:	8e ad       	ldd	r24, Y+62	; 0x3e
     f56:	9f ad       	ldd	r25, Y+63	; 0x3f
     f58:	a9 97       	sbiw	r28, 0x29	; 41
     f5a:	01 96       	adiw	r24, 0x01	; 1
     f5c:	a9 96       	adiw	r28, 0x29	; 41
     f5e:	9f af       	std	Y+63, r25	; 0x3f
     f60:	8e af       	std	Y+62, r24	; 0x3e
     f62:	a9 97       	sbiw	r28, 0x29	; 41
     f64:	a7 96       	adiw	r28, 0x27	; 39
     f66:	ee ad       	ldd	r30, Y+62	; 0x3e
     f68:	ff ad       	ldd	r31, Y+63	; 0x3f
     f6a:	a7 97       	sbiw	r28, 0x27	; 39
     f6c:	00 82       	st	Z, r0
     f6e:	a7 96       	adiw	r28, 0x27	; 39
     f70:	8e ad       	ldd	r24, Y+62	; 0x3e
     f72:	9f ad       	ldd	r25, Y+63	; 0x3f
     f74:	a7 97       	sbiw	r28, 0x27	; 39
     f76:	01 96       	adiw	r24, 0x01	; 1
     f78:	a7 96       	adiw	r28, 0x27	; 39
     f7a:	9f af       	std	Y+63, r25	; 0x3f
     f7c:	8e af       	std	Y+62, r24	; 0x3e
     f7e:	a7 97       	sbiw	r28, 0x27	; 39
     f80:	aa 96       	adiw	r28, 0x2a	; 42
     f82:	9f ad       	ldd	r25, Y+63	; 0x3f
     f84:	aa 97       	sbiw	r28, 0x2a	; 42
     f86:	91 50       	subi	r25, 0x01	; 1
     f88:	aa 96       	adiw	r28, 0x2a	; 42
     f8a:	9f af       	std	Y+63, r25	; 0x3f
     f8c:	aa 97       	sbiw	r28, 0x2a	; 42
     f8e:	aa 96       	adiw	r28, 0x2a	; 42
     f90:	ef ad       	ldd	r30, Y+63	; 0x3f
     f92:	aa 97       	sbiw	r28, 0x2a	; 42
     f94:	ee 23       	and	r30, r30
     f96:	c1 f6       	brne	.-80     	; 0xf48 <main+0xc4>
	TWI_init(&twi_config);
     f98:	ce 01       	movw	r24, r28
     f9a:	8c 5a       	subi	r24, 0xAC	; 172
     f9c:	9f 4f       	sbci	r25, 0xFF	; 255
     f9e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <TWI_init>

	UART_ConfigType uart_config_type = {eight_bits,disabled,one_bit,9600};
     fa2:	ce 01       	movw	r24, r28
     fa4:	87 5a       	subi	r24, 0xA7	; 167
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	ac 96       	adiw	r28, 0x2c	; 44
     faa:	9f af       	std	Y+63, r25	; 0x3f
     fac:	8e af       	std	Y+62, r24	; 0x3e
     fae:	ac 97       	sbiw	r28, 0x2c	; 44
     fb0:	88 e6       	ldi	r24, 0x68	; 104
     fb2:	90 e0       	ldi	r25, 0x00	; 0
     fb4:	ae 96       	adiw	r28, 0x2e	; 46
     fb6:	9f af       	std	Y+63, r25	; 0x3f
     fb8:	8e af       	std	Y+62, r24	; 0x3e
     fba:	ae 97       	sbiw	r28, 0x2e	; 46
     fbc:	97 e0       	ldi	r25, 0x07	; 7
     fbe:	af 96       	adiw	r28, 0x2f	; 47
     fc0:	9f af       	std	Y+63, r25	; 0x3f
     fc2:	af 97       	sbiw	r28, 0x2f	; 47
     fc4:	ae 96       	adiw	r28, 0x2e	; 46
     fc6:	ee ad       	ldd	r30, Y+62	; 0x3e
     fc8:	ff ad       	ldd	r31, Y+63	; 0x3f
     fca:	ae 97       	sbiw	r28, 0x2e	; 46
     fcc:	00 80       	ld	r0, Z
     fce:	ae 96       	adiw	r28, 0x2e	; 46
     fd0:	8e ad       	ldd	r24, Y+62	; 0x3e
     fd2:	9f ad       	ldd	r25, Y+63	; 0x3f
     fd4:	ae 97       	sbiw	r28, 0x2e	; 46
     fd6:	01 96       	adiw	r24, 0x01	; 1
     fd8:	ae 96       	adiw	r28, 0x2e	; 46
     fda:	9f af       	std	Y+63, r25	; 0x3f
     fdc:	8e af       	std	Y+62, r24	; 0x3e
     fde:	ae 97       	sbiw	r28, 0x2e	; 46
     fe0:	ac 96       	adiw	r28, 0x2c	; 44
     fe2:	ee ad       	ldd	r30, Y+62	; 0x3e
     fe4:	ff ad       	ldd	r31, Y+63	; 0x3f
     fe6:	ac 97       	sbiw	r28, 0x2c	; 44
     fe8:	00 82       	st	Z, r0
     fea:	ac 96       	adiw	r28, 0x2c	; 44
     fec:	8e ad       	ldd	r24, Y+62	; 0x3e
     fee:	9f ad       	ldd	r25, Y+63	; 0x3f
     ff0:	ac 97       	sbiw	r28, 0x2c	; 44
     ff2:	01 96       	adiw	r24, 0x01	; 1
     ff4:	ac 96       	adiw	r28, 0x2c	; 44
     ff6:	9f af       	std	Y+63, r25	; 0x3f
     ff8:	8e af       	std	Y+62, r24	; 0x3e
     ffa:	ac 97       	sbiw	r28, 0x2c	; 44
     ffc:	af 96       	adiw	r28, 0x2f	; 47
     ffe:	9f ad       	ldd	r25, Y+63	; 0x3f
    1000:	af 97       	sbiw	r28, 0x2f	; 47
    1002:	91 50       	subi	r25, 0x01	; 1
    1004:	af 96       	adiw	r28, 0x2f	; 47
    1006:	9f af       	std	Y+63, r25	; 0x3f
    1008:	af 97       	sbiw	r28, 0x2f	; 47
    100a:	af 96       	adiw	r28, 0x2f	; 47
    100c:	ef ad       	ldd	r30, Y+63	; 0x3f
    100e:	af 97       	sbiw	r28, 0x2f	; 47
    1010:	ee 23       	and	r30, r30
    1012:	c1 f6       	brne	.-80     	; 0xfc4 <main+0x140>
	UART_init(&uart_config_type);
    1014:	ce 01       	movw	r24, r28
    1016:	87 5a       	subi	r24, 0xA7	; 167
    1018:	9f 4f       	sbci	r25, 0xFF	; 255
    101a:	0e 94 5a 11 	call	0x22b4	; 0x22b4 <UART_init>

	DcMotor_Init();
    101e:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <DcMotor_Init>
	Buzzer_init();
    1022:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Buzzer_init>


	while(1)
	{
		Receive_pass(pass1_ctrl);
    1026:	81 e8       	ldi	r24, 0x81	; 129
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	0e 94 a3 05 	call	0xb46	; 0xb46 <Receive_pass>
		Receive_pass(pass2_ctrl);
    102e:	8c e7       	ldi	r24, 0x7C	; 124
    1030:	90 e0       	ldi	r25, 0x00	; 0
    1032:	0e 94 a3 05 	call	0xb46	; 0xb46 <Receive_pass>


		if(Compare_pass(pass1_ctrl,pass2_ctrl) == MATCHING)
    1036:	81 e8       	ldi	r24, 0x81	; 129
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	2c e7       	ldi	r18, 0x7C	; 124
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	b9 01       	movw	r22, r18
    1040:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Compare_pass>
    1044:	81 31       	cpi	r24, 0x11	; 17
    1046:	41 f4       	brne	.+16     	; 0x1058 <main+0x1d4>
		{
			Store_pass(pass1_ctrl);
    1048:	81 e8       	ldi	r24, 0x81	; 129
    104a:	90 e0       	ldi	r25, 0x00	; 0
    104c:	0e 94 c9 05 	call	0xb92	; 0xb92 <Store_pass>
			UART_sendByte(MATCHING);
    1050:	81 e1       	ldi	r24, 0x11	; 17
    1052:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>
    1056:	03 c0       	rjmp	.+6      	; 0x105e <main+0x1da>
		}
		else
		{
			UART_sendByte(NOT_MATCHING);
    1058:	80 e0       	ldi	r24, 0x00	; 0
    105a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>
		}
		while(1)
		{
			key_ctrl = UART_recieveByte();
    105e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <UART_recieveByte>
    1062:	fe 01       	movw	r30, r28
    1064:	e8 5b       	subi	r30, 0xB8	; 184
    1066:	ff 4f       	sbci	r31, 0xFF	; 255
    1068:	80 83       	st	Z, r24

			if(key_ctrl == '+')
    106a:	fe 01       	movw	r30, r28
    106c:	e8 5b       	subi	r30, 0xB8	; 184
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	80 81       	ld	r24, Z
    1072:	8b 32       	cpi	r24, 0x2B	; 43
    1074:	09 f0       	breq	.+2      	; 0x1078 <main+0x1f4>
    1076:	2f c2       	rjmp	.+1118   	; 0x14d6 <main+0x652>
			{
				while(1)
				{
					Read_pass(saved_pass);
    1078:	ce 01       	movw	r24, r28
    107a:	87 5b       	subi	r24, 0xB7	; 183
    107c:	9f 4f       	sbci	r25, 0xFF	; 255
    107e:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Read_pass>
					Receive_pass(pass1_ctrl);
    1082:	81 e8       	ldi	r24, 0x81	; 129
    1084:	90 e0       	ldi	r25, 0x00	; 0
    1086:	0e 94 a3 05 	call	0xb46	; 0xb46 <Receive_pass>
					UART_sendByte(Compare_pass(pass1_ctrl,saved_pass));
    108a:	81 e8       	ldi	r24, 0x81	; 129
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	9e 01       	movw	r18, r28
    1090:	27 5b       	subi	r18, 0xB7	; 183
    1092:	3f 4f       	sbci	r19, 0xFF	; 255
    1094:	b9 01       	movw	r22, r18
    1096:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Compare_pass>
    109a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>

					if(Compare_pass(pass1_ctrl,saved_pass) == MATCHING)
    109e:	81 e8       	ldi	r24, 0x81	; 129
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9e 01       	movw	r18, r28
    10a4:	27 5b       	subi	r18, 0xB7	; 183
    10a6:	3f 4f       	sbci	r19, 0xFF	; 255
    10a8:	b9 01       	movw	r22, r18
    10aa:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Compare_pass>
    10ae:	81 31       	cpi	r24, 0x11	; 17
    10b0:	09 f0       	breq	.+2      	; 0x10b4 <main+0x230>
    10b2:	86 c1       	rjmp	.+780    	; 0x13c0 <main+0x53c>
					{
						false_attempts = 0;
    10b4:	fe 01       	movw	r30, r28
    10b6:	e9 5b       	subi	r30, 0xB9	; 185
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	10 82       	st	Z, r1
						UART_sendByte(DOOR_OPENING);
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>
						DcMotor_Rotate(CW,100);
    10c2:	82 e0       	ldi	r24, 0x02	; 2
    10c4:	64 e6       	ldi	r22, 0x64	; 100
    10c6:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DcMotor_Rotate>
    10ca:	fe 01       	movw	r30, r28
    10cc:	ed 5b       	subi	r30, 0xBD	; 189
    10ce:	ff 4f       	sbci	r31, 0xFF	; 255
    10d0:	80 e0       	ldi	r24, 0x00	; 0
    10d2:	90 e4       	ldi	r25, 0x40	; 64
    10d4:	ac e9       	ldi	r26, 0x9C	; 156
    10d6:	b5 e4       	ldi	r27, 0x45	; 69
    10d8:	80 83       	st	Z, r24
    10da:	91 83       	std	Z+1, r25	; 0x01
    10dc:	a2 83       	std	Z+2, r26	; 0x02
    10de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10e0:	8e 01       	movw	r16, r28
    10e2:	01 5c       	subi	r16, 0xC1	; 193
    10e4:	1f 4f       	sbci	r17, 0xFF	; 255
    10e6:	fe 01       	movw	r30, r28
    10e8:	ed 5b       	subi	r30, 0xBD	; 189
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	60 81       	ld	r22, Z
    10ee:	71 81       	ldd	r23, Z+1	; 0x01
    10f0:	82 81       	ldd	r24, Z+2	; 0x02
    10f2:	93 81       	ldd	r25, Z+3	; 0x03
    10f4:	20 e0       	ldi	r18, 0x00	; 0
    10f6:	30 e0       	ldi	r19, 0x00	; 0
    10f8:	4a ef       	ldi	r20, 0xFA	; 250
    10fa:	54 e4       	ldi	r21, 0x44	; 68
    10fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1100:	dc 01       	movw	r26, r24
    1102:	cb 01       	movw	r24, r22
    1104:	f8 01       	movw	r30, r16
    1106:	80 83       	st	Z, r24
    1108:	91 83       	std	Z+1, r25	; 0x01
    110a:	a2 83       	std	Z+2, r26	; 0x02
    110c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    110e:	fe 01       	movw	r30, r28
    1110:	ff 96       	adiw	r30, 0x3f	; 63
    1112:	60 81       	ld	r22, Z
    1114:	71 81       	ldd	r23, Z+1	; 0x01
    1116:	82 81       	ldd	r24, Z+2	; 0x02
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1126:	88 23       	and	r24, r24
    1128:	2c f4       	brge	.+10     	; 0x1134 <main+0x2b0>
		__ticks = 1;
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	9e af       	std	Y+62, r25	; 0x3e
    1130:	8d af       	std	Y+61, r24	; 0x3d
    1132:	46 c0       	rjmp	.+140    	; 0x11c0 <main+0x33c>
	else if (__tmp > 65535)
    1134:	fe 01       	movw	r30, r28
    1136:	ff 96       	adiw	r30, 0x3f	; 63
    1138:	60 81       	ld	r22, Z
    113a:	71 81       	ldd	r23, Z+1	; 0x01
    113c:	82 81       	ldd	r24, Z+2	; 0x02
    113e:	93 81       	ldd	r25, Z+3	; 0x03
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	3f ef       	ldi	r19, 0xFF	; 255
    1144:	4f e7       	ldi	r20, 0x7F	; 127
    1146:	57 e4       	ldi	r21, 0x47	; 71
    1148:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    114c:	18 16       	cp	r1, r24
    114e:	64 f5       	brge	.+88     	; 0x11a8 <main+0x324>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1150:	fe 01       	movw	r30, r28
    1152:	ed 5b       	subi	r30, 0xBD	; 189
    1154:	ff 4f       	sbci	r31, 0xFF	; 255
    1156:	60 81       	ld	r22, Z
    1158:	71 81       	ldd	r23, Z+1	; 0x01
    115a:	82 81       	ldd	r24, Z+2	; 0x02
    115c:	93 81       	ldd	r25, Z+3	; 0x03
    115e:	20 e0       	ldi	r18, 0x00	; 0
    1160:	30 e0       	ldi	r19, 0x00	; 0
    1162:	40 e2       	ldi	r20, 0x20	; 32
    1164:	51 e4       	ldi	r21, 0x41	; 65
    1166:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	bc 01       	movw	r22, r24
    1170:	cd 01       	movw	r24, r26
    1172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	9e af       	std	Y+62, r25	; 0x3e
    117c:	8d af       	std	Y+61, r24	; 0x3d
    117e:	0f c0       	rjmp	.+30     	; 0x119e <main+0x31a>
    1180:	88 ec       	ldi	r24, 0xC8	; 200
    1182:	90 e0       	ldi	r25, 0x00	; 0
    1184:	9c af       	std	Y+60, r25	; 0x3c
    1186:	8b af       	std	Y+59, r24	; 0x3b
    1188:	8b ad       	ldd	r24, Y+59	; 0x3b
    118a:	9c ad       	ldd	r25, Y+60	; 0x3c
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <main+0x308>
    1190:	9c af       	std	Y+60, r25	; 0x3c
    1192:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1194:	8d ad       	ldd	r24, Y+61	; 0x3d
    1196:	9e ad       	ldd	r25, Y+62	; 0x3e
    1198:	01 97       	sbiw	r24, 0x01	; 1
    119a:	9e af       	std	Y+62, r25	; 0x3e
    119c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    119e:	8d ad       	ldd	r24, Y+61	; 0x3d
    11a0:	9e ad       	ldd	r25, Y+62	; 0x3e
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	69 f7       	brne	.-38     	; 0x1180 <main+0x2fc>
    11a6:	16 c0       	rjmp	.+44     	; 0x11d4 <main+0x350>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a8:	fe 01       	movw	r30, r28
    11aa:	ff 96       	adiw	r30, 0x3f	; 63
    11ac:	60 81       	ld	r22, Z
    11ae:	71 81       	ldd	r23, Z+1	; 0x01
    11b0:	82 81       	ldd	r24, Z+2	; 0x02
    11b2:	93 81       	ldd	r25, Z+3	; 0x03
    11b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b8:	dc 01       	movw	r26, r24
    11ba:	cb 01       	movw	r24, r22
    11bc:	9e af       	std	Y+62, r25	; 0x3e
    11be:	8d af       	std	Y+61, r24	; 0x3d
    11c0:	8d ad       	ldd	r24, Y+61	; 0x3d
    11c2:	9e ad       	ldd	r25, Y+62	; 0x3e
    11c4:	9a af       	std	Y+58, r25	; 0x3a
    11c6:	89 af       	std	Y+57, r24	; 0x39
    11c8:	89 ad       	ldd	r24, Y+57	; 0x39
    11ca:	9a ad       	ldd	r25, Y+58	; 0x3a
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	f1 f7       	brne	.-4      	; 0x11cc <main+0x348>
    11d0:	9a af       	std	Y+58, r25	; 0x3a
    11d2:	89 af       	std	Y+57, r24	; 0x39
						_delay_ms(5000);
						UART_sendByte(DOOR_OPENED);
    11d4:	81 ec       	ldi	r24, 0xC1	; 193
    11d6:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>
						DcMotor_Rotate(STOP,0);
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	60 e0       	ldi	r22, 0x00	; 0
    11de:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DcMotor_Rotate>
    11e2:	80 e0       	ldi	r24, 0x00	; 0
    11e4:	90 e8       	ldi	r25, 0x80	; 128
    11e6:	ab e3       	ldi	r26, 0x3B	; 59
    11e8:	b5 e4       	ldi	r27, 0x45	; 69
    11ea:	8d ab       	std	Y+53, r24	; 0x35
    11ec:	9e ab       	std	Y+54, r25	; 0x36
    11ee:	af ab       	std	Y+55, r26	; 0x37
    11f0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11f2:	6d a9       	ldd	r22, Y+53	; 0x35
    11f4:	7e a9       	ldd	r23, Y+54	; 0x36
    11f6:	8f a9       	ldd	r24, Y+55	; 0x37
    11f8:	98 ad       	ldd	r25, Y+56	; 0x38
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	4a ef       	ldi	r20, 0xFA	; 250
    1200:	54 e4       	ldi	r21, 0x44	; 68
    1202:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1206:	dc 01       	movw	r26, r24
    1208:	cb 01       	movw	r24, r22
    120a:	89 ab       	std	Y+49, r24	; 0x31
    120c:	9a ab       	std	Y+50, r25	; 0x32
    120e:	ab ab       	std	Y+51, r26	; 0x33
    1210:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1212:	69 a9       	ldd	r22, Y+49	; 0x31
    1214:	7a a9       	ldd	r23, Y+50	; 0x32
    1216:	8b a9       	ldd	r24, Y+51	; 0x33
    1218:	9c a9       	ldd	r25, Y+52	; 0x34
    121a:	20 e0       	ldi	r18, 0x00	; 0
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	40 e8       	ldi	r20, 0x80	; 128
    1220:	5f e3       	ldi	r21, 0x3F	; 63
    1222:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1226:	88 23       	and	r24, r24
    1228:	2c f4       	brge	.+10     	; 0x1234 <main+0x3b0>
		__ticks = 1;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	90 e0       	ldi	r25, 0x00	; 0
    122e:	98 ab       	std	Y+48, r25	; 0x30
    1230:	8f a7       	std	Y+47, r24	; 0x2f
    1232:	3f c0       	rjmp	.+126    	; 0x12b2 <main+0x42e>
	else if (__tmp > 65535)
    1234:	69 a9       	ldd	r22, Y+49	; 0x31
    1236:	7a a9       	ldd	r23, Y+50	; 0x32
    1238:	8b a9       	ldd	r24, Y+51	; 0x33
    123a:	9c a9       	ldd	r25, Y+52	; 0x34
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	3f ef       	ldi	r19, 0xFF	; 255
    1240:	4f e7       	ldi	r20, 0x7F	; 127
    1242:	57 e4       	ldi	r21, 0x47	; 71
    1244:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1248:	18 16       	cp	r1, r24
    124a:	4c f5       	brge	.+82     	; 0x129e <main+0x41a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    124c:	6d a9       	ldd	r22, Y+53	; 0x35
    124e:	7e a9       	ldd	r23, Y+54	; 0x36
    1250:	8f a9       	ldd	r24, Y+55	; 0x37
    1252:	98 ad       	ldd	r25, Y+56	; 0x38
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e2       	ldi	r20, 0x20	; 32
    125a:	51 e4       	ldi	r21, 0x41	; 65
    125c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	bc 01       	movw	r22, r24
    1266:	cd 01       	movw	r24, r26
    1268:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	98 ab       	std	Y+48, r25	; 0x30
    1272:	8f a7       	std	Y+47, r24	; 0x2f
    1274:	0f c0       	rjmp	.+30     	; 0x1294 <main+0x410>
    1276:	88 ec       	ldi	r24, 0xC8	; 200
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	9e a7       	std	Y+46, r25	; 0x2e
    127c:	8d a7       	std	Y+45, r24	; 0x2d
    127e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1280:	9e a5       	ldd	r25, Y+46	; 0x2e
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	f1 f7       	brne	.-4      	; 0x1282 <main+0x3fe>
    1286:	9e a7       	std	Y+46, r25	; 0x2e
    1288:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    128a:	8f a5       	ldd	r24, Y+47	; 0x2f
    128c:	98 a9       	ldd	r25, Y+48	; 0x30
    128e:	01 97       	sbiw	r24, 0x01	; 1
    1290:	98 ab       	std	Y+48, r25	; 0x30
    1292:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1294:	8f a5       	ldd	r24, Y+47	; 0x2f
    1296:	98 a9       	ldd	r25, Y+48	; 0x30
    1298:	00 97       	sbiw	r24, 0x00	; 0
    129a:	69 f7       	brne	.-38     	; 0x1276 <main+0x3f2>
    129c:	14 c0       	rjmp	.+40     	; 0x12c6 <main+0x442>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    129e:	69 a9       	ldd	r22, Y+49	; 0x31
    12a0:	7a a9       	ldd	r23, Y+50	; 0x32
    12a2:	8b a9       	ldd	r24, Y+51	; 0x33
    12a4:	9c a9       	ldd	r25, Y+52	; 0x34
    12a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12aa:	dc 01       	movw	r26, r24
    12ac:	cb 01       	movw	r24, r22
    12ae:	98 ab       	std	Y+48, r25	; 0x30
    12b0:	8f a7       	std	Y+47, r24	; 0x2f
    12b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    12b4:	98 a9       	ldd	r25, Y+48	; 0x30
    12b6:	9c a7       	std	Y+44, r25	; 0x2c
    12b8:	8b a7       	std	Y+43, r24	; 0x2b
    12ba:	8b a5       	ldd	r24, Y+43	; 0x2b
    12bc:	9c a5       	ldd	r25, Y+44	; 0x2c
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	f1 f7       	brne	.-4      	; 0x12be <main+0x43a>
    12c2:	9c a7       	std	Y+44, r25	; 0x2c
    12c4:	8b a7       	std	Y+43, r24	; 0x2b
						_delay_ms(3000);
						UART_sendByte(DOOR_CLOSING);
    12c6:	82 ec       	ldi	r24, 0xC2	; 194
    12c8:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>
						DcMotor_Rotate(A_CW,100);
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	64 e6       	ldi	r22, 0x64	; 100
    12d0:	0e 94 7f 0b 	call	0x16fe	; 0x16fe <DcMotor_Rotate>
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e4       	ldi	r25, 0x40	; 64
    12d8:	ac e9       	ldi	r26, 0x9C	; 156
    12da:	b5 e4       	ldi	r27, 0x45	; 69
    12dc:	8f a3       	std	Y+39, r24	; 0x27
    12de:	98 a7       	std	Y+40, r25	; 0x28
    12e0:	a9 a7       	std	Y+41, r26	; 0x29
    12e2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12e4:	6f a1       	ldd	r22, Y+39	; 0x27
    12e6:	78 a5       	ldd	r23, Y+40	; 0x28
    12e8:	89 a5       	ldd	r24, Y+41	; 0x29
    12ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	30 e0       	ldi	r19, 0x00	; 0
    12f0:	4a ef       	ldi	r20, 0xFA	; 250
    12f2:	54 e4       	ldi	r21, 0x44	; 68
    12f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	8b a3       	std	Y+35, r24	; 0x23
    12fe:	9c a3       	std	Y+36, r25	; 0x24
    1300:	ad a3       	std	Y+37, r26	; 0x25
    1302:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1304:	6b a1       	ldd	r22, Y+35	; 0x23
    1306:	7c a1       	ldd	r23, Y+36	; 0x24
    1308:	8d a1       	ldd	r24, Y+37	; 0x25
    130a:	9e a1       	ldd	r25, Y+38	; 0x26
    130c:	20 e0       	ldi	r18, 0x00	; 0
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	40 e8       	ldi	r20, 0x80	; 128
    1312:	5f e3       	ldi	r21, 0x3F	; 63
    1314:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1318:	88 23       	and	r24, r24
    131a:	2c f4       	brge	.+10     	; 0x1326 <main+0x4a2>
		__ticks = 1;
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	9a a3       	std	Y+34, r25	; 0x22
    1322:	89 a3       	std	Y+33, r24	; 0x21
    1324:	3f c0       	rjmp	.+126    	; 0x13a4 <main+0x520>
	else if (__tmp > 65535)
    1326:	6b a1       	ldd	r22, Y+35	; 0x23
    1328:	7c a1       	ldd	r23, Y+36	; 0x24
    132a:	8d a1       	ldd	r24, Y+37	; 0x25
    132c:	9e a1       	ldd	r25, Y+38	; 0x26
    132e:	20 e0       	ldi	r18, 0x00	; 0
    1330:	3f ef       	ldi	r19, 0xFF	; 255
    1332:	4f e7       	ldi	r20, 0x7F	; 127
    1334:	57 e4       	ldi	r21, 0x47	; 71
    1336:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    133a:	18 16       	cp	r1, r24
    133c:	4c f5       	brge	.+82     	; 0x1390 <main+0x50c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    133e:	6f a1       	ldd	r22, Y+39	; 0x27
    1340:	78 a5       	ldd	r23, Y+40	; 0x28
    1342:	89 a5       	ldd	r24, Y+41	; 0x29
    1344:	9a a5       	ldd	r25, Y+42	; 0x2a
    1346:	20 e0       	ldi	r18, 0x00	; 0
    1348:	30 e0       	ldi	r19, 0x00	; 0
    134a:	40 e2       	ldi	r20, 0x20	; 32
    134c:	51 e4       	ldi	r21, 0x41	; 65
    134e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1352:	dc 01       	movw	r26, r24
    1354:	cb 01       	movw	r24, r22
    1356:	bc 01       	movw	r22, r24
    1358:	cd 01       	movw	r24, r26
    135a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    135e:	dc 01       	movw	r26, r24
    1360:	cb 01       	movw	r24, r22
    1362:	9a a3       	std	Y+34, r25	; 0x22
    1364:	89 a3       	std	Y+33, r24	; 0x21
    1366:	0f c0       	rjmp	.+30     	; 0x1386 <main+0x502>
    1368:	88 ec       	ldi	r24, 0xC8	; 200
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	98 a3       	std	Y+32, r25	; 0x20
    136e:	8f 8f       	std	Y+31, r24	; 0x1f
    1370:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1372:	98 a1       	ldd	r25, Y+32	; 0x20
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <main+0x4f0>
    1378:	98 a3       	std	Y+32, r25	; 0x20
    137a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    137c:	89 a1       	ldd	r24, Y+33	; 0x21
    137e:	9a a1       	ldd	r25, Y+34	; 0x22
    1380:	01 97       	sbiw	r24, 0x01	; 1
    1382:	9a a3       	std	Y+34, r25	; 0x22
    1384:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1386:	89 a1       	ldd	r24, Y+33	; 0x21
    1388:	9a a1       	ldd	r25, Y+34	; 0x22
    138a:	00 97       	sbiw	r24, 0x00	; 0
    138c:	69 f7       	brne	.-38     	; 0x1368 <main+0x4e4>
    138e:	14 c0       	rjmp	.+40     	; 0x13b8 <main+0x534>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1390:	6b a1       	ldd	r22, Y+35	; 0x23
    1392:	7c a1       	ldd	r23, Y+36	; 0x24
    1394:	8d a1       	ldd	r24, Y+37	; 0x25
    1396:	9e a1       	ldd	r25, Y+38	; 0x26
    1398:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    139c:	dc 01       	movw	r26, r24
    139e:	cb 01       	movw	r24, r22
    13a0:	9a a3       	std	Y+34, r25	; 0x22
    13a2:	89 a3       	std	Y+33, r24	; 0x21
    13a4:	89 a1       	ldd	r24, Y+33	; 0x21
    13a6:	9a a1       	ldd	r25, Y+34	; 0x22
    13a8:	9e 8f       	std	Y+30, r25	; 0x1e
    13aa:	8d 8f       	std	Y+29, r24	; 0x1d
    13ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13b0:	01 97       	sbiw	r24, 0x01	; 1
    13b2:	f1 f7       	brne	.-4      	; 0x13b0 <main+0x52c>
    13b4:	9e 8f       	std	Y+30, r25	; 0x1e
    13b6:	8d 8f       	std	Y+29, r24	; 0x1d
						_delay_ms(5000);
						UART_sendByte(DOOR_DONE);
    13b8:	8f ef       	ldi	r24, 0xFF	; 255
    13ba:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>
    13be:	4f ce       	rjmp	.-866    	; 0x105e <main+0x1da>
						break;
					}
					else
					{
						false_attempts++;
    13c0:	de 01       	movw	r26, r28
    13c2:	a9 5b       	subi	r26, 0xB9	; 185
    13c4:	bf 4f       	sbci	r27, 0xFF	; 255
    13c6:	fe 01       	movw	r30, r28
    13c8:	e9 5b       	subi	r30, 0xB9	; 185
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	80 81       	ld	r24, Z
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	8c 93       	st	X, r24
						if(false_attempts == 3)
    13d2:	fe 01       	movw	r30, r28
    13d4:	e9 5b       	subi	r30, 0xB9	; 185
    13d6:	ff 4f       	sbci	r31, 0xFF	; 255
    13d8:	80 81       	ld	r24, Z
    13da:	83 30       	cpi	r24, 0x03	; 3
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <main+0x55c>
    13de:	3f ce       	rjmp	.-898    	; 0x105e <main+0x1da>
						{
							Buzzer_on();                 /*Turn the buzzer on*/
    13e0:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Buzzer_on>
    13e4:	80 e0       	ldi	r24, 0x00	; 0
    13e6:	90 e8       	ldi	r25, 0x80	; 128
    13e8:	ab eb       	ldi	r26, 0xBB	; 187
    13ea:	b5 e4       	ldi	r27, 0x45	; 69
    13ec:	89 8f       	std	Y+25, r24	; 0x19
    13ee:	9a 8f       	std	Y+26, r25	; 0x1a
    13f0:	ab 8f       	std	Y+27, r26	; 0x1b
    13f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13f4:	69 8d       	ldd	r22, Y+25	; 0x19
    13f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	4a ef       	ldi	r20, 0xFA	; 250
    1402:	54 e4       	ldi	r21, 0x44	; 68
    1404:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1408:	dc 01       	movw	r26, r24
    140a:	cb 01       	movw	r24, r22
    140c:	8d 8b       	std	Y+21, r24	; 0x15
    140e:	9e 8b       	std	Y+22, r25	; 0x16
    1410:	af 8b       	std	Y+23, r26	; 0x17
    1412:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1414:	6d 89       	ldd	r22, Y+21	; 0x15
    1416:	7e 89       	ldd	r23, Y+22	; 0x16
    1418:	8f 89       	ldd	r24, Y+23	; 0x17
    141a:	98 8d       	ldd	r25, Y+24	; 0x18
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e8       	ldi	r20, 0x80	; 128
    1422:	5f e3       	ldi	r21, 0x3F	; 63
    1424:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1428:	88 23       	and	r24, r24
    142a:	2c f4       	brge	.+10     	; 0x1436 <main+0x5b2>
		__ticks = 1;
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	9c 8b       	std	Y+20, r25	; 0x14
    1432:	8b 8b       	std	Y+19, r24	; 0x13
    1434:	3f c0       	rjmp	.+126    	; 0x14b4 <main+0x630>
	else if (__tmp > 65535)
    1436:	6d 89       	ldd	r22, Y+21	; 0x15
    1438:	7e 89       	ldd	r23, Y+22	; 0x16
    143a:	8f 89       	ldd	r24, Y+23	; 0x17
    143c:	98 8d       	ldd	r25, Y+24	; 0x18
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	3f ef       	ldi	r19, 0xFF	; 255
    1442:	4f e7       	ldi	r20, 0x7F	; 127
    1444:	57 e4       	ldi	r21, 0x47	; 71
    1446:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    144a:	18 16       	cp	r1, r24
    144c:	4c f5       	brge	.+82     	; 0x14a0 <main+0x61c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    144e:	69 8d       	ldd	r22, Y+25	; 0x19
    1450:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1452:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1454:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1456:	20 e0       	ldi	r18, 0x00	; 0
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	40 e2       	ldi	r20, 0x20	; 32
    145c:	51 e4       	ldi	r21, 0x41	; 65
    145e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1462:	dc 01       	movw	r26, r24
    1464:	cb 01       	movw	r24, r22
    1466:	bc 01       	movw	r22, r24
    1468:	cd 01       	movw	r24, r26
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9c 8b       	std	Y+20, r25	; 0x14
    1474:	8b 8b       	std	Y+19, r24	; 0x13
    1476:	0f c0       	rjmp	.+30     	; 0x1496 <main+0x612>
    1478:	88 ec       	ldi	r24, 0xC8	; 200
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	9a 8b       	std	Y+18, r25	; 0x12
    147e:	89 8b       	std	Y+17, r24	; 0x11
    1480:	89 89       	ldd	r24, Y+17	; 0x11
    1482:	9a 89       	ldd	r25, Y+18	; 0x12
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <main+0x600>
    1488:	9a 8b       	std	Y+18, r25	; 0x12
    148a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    148c:	8b 89       	ldd	r24, Y+19	; 0x13
    148e:	9c 89       	ldd	r25, Y+20	; 0x14
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9c 8b       	std	Y+20, r25	; 0x14
    1494:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1496:	8b 89       	ldd	r24, Y+19	; 0x13
    1498:	9c 89       	ldd	r25, Y+20	; 0x14
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	69 f7       	brne	.-38     	; 0x1478 <main+0x5f4>
    149e:	14 c0       	rjmp	.+40     	; 0x14c8 <main+0x644>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14a0:	6d 89       	ldd	r22, Y+21	; 0x15
    14a2:	7e 89       	ldd	r23, Y+22	; 0x16
    14a4:	8f 89       	ldd	r24, Y+23	; 0x17
    14a6:	98 8d       	ldd	r25, Y+24	; 0x18
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	9c 8b       	std	Y+20, r25	; 0x14
    14b2:	8b 8b       	std	Y+19, r24	; 0x13
    14b4:	8b 89       	ldd	r24, Y+19	; 0x13
    14b6:	9c 89       	ldd	r25, Y+20	; 0x14
    14b8:	98 8b       	std	Y+16, r25	; 0x10
    14ba:	8f 87       	std	Y+15, r24	; 0x0f
    14bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14be:	98 89       	ldd	r25, Y+16	; 0x10
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	f1 f7       	brne	.-4      	; 0x14c0 <main+0x63c>
    14c4:	98 8b       	std	Y+16, r25	; 0x10
    14c6:	8f 87       	std	Y+15, r24	; 0x0f
							_delay_ms(6000);
							Buzzer_off();               /*Turn the buzzer off*/
    14c8:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Buzzer_off>
							false_attempts = 0;         /*Set the variable to value zero*/
    14cc:	fe 01       	movw	r30, r28
    14ce:	e9 5b       	subi	r30, 0xB9	; 185
    14d0:	ff 4f       	sbci	r31, 0xFF	; 255
    14d2:	10 82       	st	Z, r1
    14d4:	c4 cd       	rjmp	.-1144   	; 0x105e <main+0x1da>
						}
					}
					break;
				}
			}
			else if(key_ctrl == '-')
    14d6:	fe 01       	movw	r30, r28
    14d8:	e8 5b       	subi	r30, 0xB8	; 184
    14da:	ff 4f       	sbci	r31, 0xFF	; 255
    14dc:	80 81       	ld	r24, Z
    14de:	8d 32       	cpi	r24, 0x2D	; 45
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <main+0x660>
    14e2:	bd cd       	rjmp	.-1158   	; 0x105e <main+0x1da>
			{
				while(1)
				{
					Read_pass(saved_pass);
    14e4:	ce 01       	movw	r24, r28
    14e6:	87 5b       	subi	r24, 0xB7	; 183
    14e8:	9f 4f       	sbci	r25, 0xFF	; 255
    14ea:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <Read_pass>
					Receive_pass(pass1_ctrl);
    14ee:	81 e8       	ldi	r24, 0x81	; 129
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Receive_pass>
					UART_sendByte(Compare_pass(pass1_ctrl,saved_pass));
    14f6:	81 e8       	ldi	r24, 0x81	; 129
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	9e 01       	movw	r18, r28
    14fc:	27 5b       	subi	r18, 0xB7	; 183
    14fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1500:	b9 01       	movw	r22, r18
    1502:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Compare_pass>
    1506:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>

					if(Compare_pass(pass1_ctrl,saved_pass) == MATCHING)
    150a:	81 e8       	ldi	r24, 0x81	; 129
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9e 01       	movw	r18, r28
    1510:	27 5b       	subi	r18, 0xB7	; 183
    1512:	3f 4f       	sbci	r19, 0xFF	; 255
    1514:	b9 01       	movw	r22, r18
    1516:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Compare_pass>
    151a:	81 31       	cpi	r24, 0x11	; 17
    151c:	09 f5       	brne	.+66     	; 0x1560 <main+0x6dc>
					{
						false_attempts = 0;
    151e:	fe 01       	movw	r30, r28
    1520:	e9 5b       	subi	r30, 0xB9	; 185
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	10 82       	st	Z, r1
						UART_recieveString(pass1_ctrl);
    1526:	81 e8       	ldi	r24, 0x81	; 129
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0e 94 24 12 	call	0x2448	; 0x2448 <UART_recieveString>
						UART_recieveString(pass2_ctrl);
    152e:	8c e7       	ldi	r24, 0x7C	; 124
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	0e 94 24 12 	call	0x2448	; 0x2448 <UART_recieveString>

						if(Compare_pass(pass1_ctrl,pass2_ctrl) == MATCHING)
    1536:	81 e8       	ldi	r24, 0x81	; 129
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	2c e7       	ldi	r18, 0x7C	; 124
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	b9 01       	movw	r22, r18
    1540:	0e 94 0d 07 	call	0xe1a	; 0xe1a <Compare_pass>
    1544:	81 31       	cpi	r24, 0x11	; 17
    1546:	41 f4       	brne	.+16     	; 0x1558 <main+0x6d4>
						{
							Store_pass(pass1_ctrl);
    1548:	81 e8       	ldi	r24, 0x81	; 129
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 c9 05 	call	0xb92	; 0xb92 <Store_pass>
							UART_sendByte(MATCHING);
    1550:	81 e1       	ldi	r24, 0x11	; 17
    1552:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>
    1556:	83 cd       	rjmp	.-1274   	; 0x105e <main+0x1da>
						}
						else
						{
							UART_sendByte(NOT_MATCHING);
    1558:	80 e0       	ldi	r24, 0x00	; 0
    155a:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>
    155e:	7f cd       	rjmp	.-1282   	; 0x105e <main+0x1da>
						}
						break;
					}
					else
					{
						false_attempts++;
    1560:	de 01       	movw	r26, r28
    1562:	a9 5b       	subi	r26, 0xB9	; 185
    1564:	bf 4f       	sbci	r27, 0xFF	; 255
    1566:	fe 01       	movw	r30, r28
    1568:	e9 5b       	subi	r30, 0xB9	; 185
    156a:	ff 4f       	sbci	r31, 0xFF	; 255
    156c:	80 81       	ld	r24, Z
    156e:	8f 5f       	subi	r24, 0xFF	; 255
    1570:	8c 93       	st	X, r24
						if(false_attempts == 3)
    1572:	fe 01       	movw	r30, r28
    1574:	e9 5b       	subi	r30, 0xB9	; 185
    1576:	ff 4f       	sbci	r31, 0xFF	; 255
    1578:	80 81       	ld	r24, Z
    157a:	83 30       	cpi	r24, 0x03	; 3
    157c:	09 f0       	breq	.+2      	; 0x1580 <main+0x6fc>
    157e:	6f cd       	rjmp	.-1314   	; 0x105e <main+0x1da>
						{
							Buzzer_on();                 /*Turn the buzzer on*/
    1580:	0e 94 4c 0b 	call	0x1698	; 0x1698 <Buzzer_on>
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	90 e8       	ldi	r25, 0x80	; 128
    1588:	ab eb       	ldi	r26, 0xBB	; 187
    158a:	b5 e4       	ldi	r27, 0x45	; 69
    158c:	8b 87       	std	Y+11, r24	; 0x0b
    158e:	9c 87       	std	Y+12, r25	; 0x0c
    1590:	ad 87       	std	Y+13, r26	; 0x0d
    1592:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1594:	6b 85       	ldd	r22, Y+11	; 0x0b
    1596:	7c 85       	ldd	r23, Y+12	; 0x0c
    1598:	8d 85       	ldd	r24, Y+13	; 0x0d
    159a:	9e 85       	ldd	r25, Y+14	; 0x0e
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	4a ef       	ldi	r20, 0xFA	; 250
    15a2:	54 e4       	ldi	r21, 0x44	; 68
    15a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	8f 83       	std	Y+7, r24	; 0x07
    15ae:	98 87       	std	Y+8, r25	; 0x08
    15b0:	a9 87       	std	Y+9, r26	; 0x09
    15b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15b4:	6f 81       	ldd	r22, Y+7	; 0x07
    15b6:	78 85       	ldd	r23, Y+8	; 0x08
    15b8:	89 85       	ldd	r24, Y+9	; 0x09
    15ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e8       	ldi	r20, 0x80	; 128
    15c2:	5f e3       	ldi	r21, 0x3F	; 63
    15c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c8:	88 23       	and	r24, r24
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <main+0x752>
		__ticks = 1;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	9e 83       	std	Y+6, r25	; 0x06
    15d2:	8d 83       	std	Y+5, r24	; 0x05
    15d4:	3f c0       	rjmp	.+126    	; 0x1654 <main+0x7d0>
	else if (__tmp > 65535)
    15d6:	6f 81       	ldd	r22, Y+7	; 0x07
    15d8:	78 85       	ldd	r23, Y+8	; 0x08
    15da:	89 85       	ldd	r24, Y+9	; 0x09
    15dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15de:	20 e0       	ldi	r18, 0x00	; 0
    15e0:	3f ef       	ldi	r19, 0xFF	; 255
    15e2:	4f e7       	ldi	r20, 0x7F	; 127
    15e4:	57 e4       	ldi	r21, 0x47	; 71
    15e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15ea:	18 16       	cp	r1, r24
    15ec:	4c f5       	brge	.+82     	; 0x1640 <main+0x7bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    15f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15f6:	20 e0       	ldi	r18, 0x00	; 0
    15f8:	30 e0       	ldi	r19, 0x00	; 0
    15fa:	40 e2       	ldi	r20, 0x20	; 32
    15fc:	51 e4       	ldi	r21, 0x41	; 65
    15fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	bc 01       	movw	r22, r24
    1608:	cd 01       	movw	r24, r26
    160a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160e:	dc 01       	movw	r26, r24
    1610:	cb 01       	movw	r24, r22
    1612:	9e 83       	std	Y+6, r25	; 0x06
    1614:	8d 83       	std	Y+5, r24	; 0x05
    1616:	0f c0       	rjmp	.+30     	; 0x1636 <main+0x7b2>
    1618:	88 ec       	ldi	r24, 0xC8	; 200
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	9c 83       	std	Y+4, r25	; 0x04
    161e:	8b 83       	std	Y+3, r24	; 0x03
    1620:	8b 81       	ldd	r24, Y+3	; 0x03
    1622:	9c 81       	ldd	r25, Y+4	; 0x04
    1624:	01 97       	sbiw	r24, 0x01	; 1
    1626:	f1 f7       	brne	.-4      	; 0x1624 <main+0x7a0>
    1628:	9c 83       	std	Y+4, r25	; 0x04
    162a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    162c:	8d 81       	ldd	r24, Y+5	; 0x05
    162e:	9e 81       	ldd	r25, Y+6	; 0x06
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	9e 83       	std	Y+6, r25	; 0x06
    1634:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1636:	8d 81       	ldd	r24, Y+5	; 0x05
    1638:	9e 81       	ldd	r25, Y+6	; 0x06
    163a:	00 97       	sbiw	r24, 0x00	; 0
    163c:	69 f7       	brne	.-38     	; 0x1618 <main+0x794>
    163e:	14 c0       	rjmp	.+40     	; 0x1668 <main+0x7e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1640:	6f 81       	ldd	r22, Y+7	; 0x07
    1642:	78 85       	ldd	r23, Y+8	; 0x08
    1644:	89 85       	ldd	r24, Y+9	; 0x09
    1646:	9a 85       	ldd	r25, Y+10	; 0x0a
    1648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    164c:	dc 01       	movw	r26, r24
    164e:	cb 01       	movw	r24, r22
    1650:	9e 83       	std	Y+6, r25	; 0x06
    1652:	8d 83       	std	Y+5, r24	; 0x05
    1654:	8d 81       	ldd	r24, Y+5	; 0x05
    1656:	9e 81       	ldd	r25, Y+6	; 0x06
    1658:	9a 83       	std	Y+2, r25	; 0x02
    165a:	89 83       	std	Y+1, r24	; 0x01
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	9a 81       	ldd	r25, Y+2	; 0x02
    1660:	01 97       	sbiw	r24, 0x01	; 1
    1662:	f1 f7       	brne	.-4      	; 0x1660 <main+0x7dc>
    1664:	9a 83       	std	Y+2, r25	; 0x02
    1666:	89 83       	std	Y+1, r24	; 0x01
							_delay_ms(6000);
							Buzzer_off();               /*Turn the buzzer off*/
    1668:	0e 94 58 0b 	call	0x16b0	; 0x16b0 <Buzzer_off>
							false_attempts = 0;         /*Set the variable to value zero*/
    166c:	fe 01       	movw	r30, r28
    166e:	e9 5b       	subi	r30, 0xB9	; 185
    1670:	ff 4f       	sbci	r31, 0xFF	; 255
    1672:	10 82       	st	Z, r1
    1674:	f4 cc       	rjmp	.-1560   	; 0x105e <main+0x1da>

00001676 <Buzzer_init>:
 * Functional responsible for Setup the direction for the buzzer pin as output pin through the
 * GPIO driver.
 * Turn off the buzzer through the GPIO.
 */
void Buzzer_init()
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN,PIN_OUTPUT);
    167e:	80 e0       	ldi	r24, 0x00	; 0
    1680:	60 e0       	ldi	r22, 0x00	; 0
    1682:	41 e0       	ldi	r20, 0x01	; 1
    1684:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    1688:	80 e0       	ldi	r24, 0x00	; 0
    168a:	60 e0       	ldi	r22, 0x00	; 0
    168c:	40 e0       	ldi	r20, 0x00	; 0
    168e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
}
    1692:	cf 91       	pop	r28
    1694:	df 91       	pop	r29
    1696:	08 95       	ret

00001698 <Buzzer_on>:
/*
 * Description :
 * Functional responsible for enable the Buzzer through the GPIO.
 */
void Buzzer_on(void)
{
    1698:	df 93       	push	r29
    169a:	cf 93       	push	r28
    169c:	cd b7       	in	r28, 0x3d	; 61
    169e:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_HIGH);
    16a0:	80 e0       	ldi	r24, 0x00	; 0
    16a2:	60 e0       	ldi	r22, 0x00	; 0
    16a4:	41 e0       	ldi	r20, 0x01	; 1
    16a6:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
}
    16aa:	cf 91       	pop	r28
    16ac:	df 91       	pop	r29
    16ae:	08 95       	ret

000016b0 <Buzzer_off>:
/*
 * Description :
 * Functional responsible for disable the Buzzer through the GPIO.
 */
void Buzzer_off(void)
{
    16b0:	df 93       	push	r29
    16b2:	cf 93       	push	r28
    16b4:	cd b7       	in	r28, 0x3d	; 61
    16b6:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN,LOGIC_LOW);
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	60 e0       	ldi	r22, 0x00	; 0
    16bc:	40 e0       	ldi	r20, 0x00	; 0
    16be:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
}
    16c2:	cf 91       	pop	r28
    16c4:	df 91       	pop	r29
    16c6:	08 95       	ret

000016c8 <DcMotor_Init>:
/*
 * Description :
 * initialize the DC Motor.
 */
void DcMotor_Init(void)
{
    16c8:	df 93       	push	r29
    16ca:	cf 93       	push	r28
    16cc:	cd b7       	in	r28, 0x3d	; 61
    16ce:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,PIN_OUTPUT);
    16d0:	81 e0       	ldi	r24, 0x01	; 1
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	41 e0       	ldi	r20, 0x01	; 1
    16d6:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,PIN_OUTPUT);
    16da:	81 e0       	ldi	r24, 0x01	; 1
    16dc:	61 e0       	ldi	r22, 0x01	; 1
    16de:	41 e0       	ldi	r20, 0x01	; 1
    16e0:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <GPIO_setupPinDirection>

	GPIO_writePin(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	60 e0       	ldi	r22, 0x00	; 0
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
	GPIO_writePin(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	61 e0       	ldi	r22, 0x01	; 1
    16f2:	40 e0       	ldi	r20, 0x00	; 0
    16f4:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
}
    16f8:	cf 91       	pop	r28
    16fa:	df 91       	pop	r29
    16fc:	08 95       	ret

000016fe <DcMotor_Rotate>:
/*
 * Description :
 * Rotate the DC Motor.
 */
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    16fe:	df 93       	push	r29
    1700:	cf 93       	push	r28
    1702:	00 d0       	rcall	.+0      	; 0x1704 <DcMotor_Rotate+0x6>
    1704:	00 d0       	rcall	.+0      	; 0x1706 <DcMotor_Rotate+0x8>
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	6a 83       	std	Y+2, r22	; 0x02
	PWM_Timer0_Start(speed);
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	0e 94 42 10 	call	0x2084	; 0x2084 <PWM_Timer0_Start>

	switch(state)
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	3c 83       	std	Y+4, r19	; 0x04
    171c:	2b 83       	std	Y+3, r18	; 0x03
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	9c 81       	ldd	r25, Y+4	; 0x04
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	91 05       	cpc	r25, r1
    1726:	81 f0       	breq	.+32     	; 0x1748 <DcMotor_Rotate+0x4a>
    1728:	2b 81       	ldd	r18, Y+3	; 0x03
    172a:	3c 81       	ldd	r19, Y+4	; 0x04
    172c:	22 30       	cpi	r18, 0x02	; 2
    172e:	31 05       	cpc	r19, r1
    1730:	b1 f0       	breq	.+44     	; 0x175e <DcMotor_Rotate+0x60>
	{
	default:
	case STOP:
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	60 e0       	ldi	r22, 0x00	; 0
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	61 e0       	ldi	r22, 0x01	; 1
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
    1746:	15 c0       	rjmp	.+42     	; 0x1772 <DcMotor_Rotate+0x74>
		break;
	case A_CW:
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_HIGH);
    1748:	81 e0       	ldi	r24, 0x01	; 1
    174a:	60 e0       	ldi	r22, 0x00	; 0
    174c:	41 e0       	ldi	r20, 0x01	; 1
    174e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_LOW);
    1752:	81 e0       	ldi	r24, 0x01	; 1
    1754:	61 e0       	ldi	r22, 0x01	; 1
    1756:	40 e0       	ldi	r20, 0x00	; 0
    1758:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
    175c:	0a c0       	rjmp	.+20     	; 0x1772 <DcMotor_Rotate+0x74>
		break;
	case CW:
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT1_PIN_ID,LOGIC_LOW);
    175e:	81 e0       	ldi	r24, 0x01	; 1
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_INPUT_PORT_ID,DC_MOTOR_INPUT2_PIN_ID,LOGIC_HIGH);
    1768:	81 e0       	ldi	r24, 0x01	; 1
    176a:	61 e0       	ldi	r22, 0x01	; 1
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <GPIO_writePin>
		break;
	}
}
    1772:	0f 90       	pop	r0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	cf 91       	pop	r28
    177c:	df 91       	pop	r29
    177e:	08 95       	ret

00001780 <EEPROM_writeByte>:
 *******************************************************************************/
#include "eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1780:	df 93       	push	r29
    1782:	cf 93       	push	r28
    1784:	00 d0       	rcall	.+0      	; 0x1786 <EEPROM_writeByte+0x6>
    1786:	00 d0       	rcall	.+0      	; 0x1788 <EEPROM_writeByte+0x8>
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
    178c:	9a 83       	std	Y+2, r25	; 0x02
    178e:	89 83       	std	Y+1, r24	; 0x01
    1790:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1792:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1796:	0e 94 33 10 	call	0x2066	; 0x2066 <TWI_getStatus>
    179a:	88 30       	cpi	r24, 0x08	; 8
    179c:	11 f0       	breq	.+4      	; 0x17a2 <EEPROM_writeByte+0x22>
        return ERROR;
    179e:	1c 82       	std	Y+4, r1	; 0x04
    17a0:	28 c0       	rjmp	.+80     	; 0x17f2 <EEPROM_writeByte+0x72>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    17a2:	89 81       	ldd	r24, Y+1	; 0x01
    17a4:	9a 81       	ldd	r25, Y+2	; 0x02
    17a6:	80 70       	andi	r24, 0x00	; 0
    17a8:	97 70       	andi	r25, 0x07	; 7
    17aa:	88 0f       	add	r24, r24
    17ac:	89 2f       	mov	r24, r25
    17ae:	88 1f       	adc	r24, r24
    17b0:	99 0b       	sbc	r25, r25
    17b2:	91 95       	neg	r25
    17b4:	80 6a       	ori	r24, 0xA0	; 160
    17b6:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    17ba:	0e 94 33 10 	call	0x2066	; 0x2066 <TWI_getStatus>
    17be:	88 31       	cpi	r24, 0x18	; 24
    17c0:	11 f0       	breq	.+4      	; 0x17c6 <EEPROM_writeByte+0x46>
        return ERROR;
    17c2:	1c 82       	std	Y+4, r1	; 0x04
    17c4:	16 c0       	rjmp	.+44     	; 0x17f2 <EEPROM_writeByte+0x72>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17cc:	0e 94 33 10 	call	0x2066	; 0x2066 <TWI_getStatus>
    17d0:	88 32       	cpi	r24, 0x28	; 40
    17d2:	11 f0       	breq	.+4      	; 0x17d8 <EEPROM_writeByte+0x58>
        return ERROR;
    17d4:	1c 82       	std	Y+4, r1	; 0x04
    17d6:	0d c0       	rjmp	.+26     	; 0x17f2 <EEPROM_writeByte+0x72>

    /* write byte to eeprom */
    TWI_writeByte(u8data);
    17d8:	8b 81       	ldd	r24, Y+3	; 0x03
    17da:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    17de:	0e 94 33 10 	call	0x2066	; 0x2066 <TWI_getStatus>
    17e2:	88 32       	cpi	r24, 0x28	; 40
    17e4:	11 f0       	breq	.+4      	; 0x17ea <EEPROM_writeByte+0x6a>
        return ERROR;
    17e6:	1c 82       	std	Y+4, r1	; 0x04
    17e8:	04 c0       	rjmp	.+8      	; 0x17f2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    17ea:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <TWI_stop>

    return SUCCESS;
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	8c 83       	std	Y+4, r24	; 0x04
    17f2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    17f4:	0f 90       	pop	r0
    17f6:	0f 90       	pop	r0
    17f8:	0f 90       	pop	r0
    17fa:	0f 90       	pop	r0
    17fc:	cf 91       	pop	r28
    17fe:	df 91       	pop	r29
    1800:	08 95       	ret

00001802 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1802:	df 93       	push	r29
    1804:	cf 93       	push	r28
    1806:	00 d0       	rcall	.+0      	; 0x1808 <EEPROM_readByte+0x6>
    1808:	00 d0       	rcall	.+0      	; 0x180a <EEPROM_readByte+0x8>
    180a:	0f 92       	push	r0
    180c:	cd b7       	in	r28, 0x3d	; 61
    180e:	de b7       	in	r29, 0x3e	; 62
    1810:	9a 83       	std	Y+2, r25	; 0x02
    1812:	89 83       	std	Y+1, r24	; 0x01
    1814:	7c 83       	std	Y+4, r23	; 0x04
    1816:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1818:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    181c:	0e 94 33 10 	call	0x2066	; 0x2066 <TWI_getStatus>
    1820:	88 30       	cpi	r24, 0x08	; 8
    1822:	11 f0       	breq	.+4      	; 0x1828 <EEPROM_readByte+0x26>
        return ERROR;
    1824:	1d 82       	std	Y+5, r1	; 0x05
    1826:	44 c0       	rjmp	.+136    	; 0x18b0 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1828:	89 81       	ldd	r24, Y+1	; 0x01
    182a:	9a 81       	ldd	r25, Y+2	; 0x02
    182c:	80 70       	andi	r24, 0x00	; 0
    182e:	97 70       	andi	r25, 0x07	; 7
    1830:	88 0f       	add	r24, r24
    1832:	89 2f       	mov	r24, r25
    1834:	88 1f       	adc	r24, r24
    1836:	99 0b       	sbc	r25, r25
    1838:	91 95       	neg	r25
    183a:	80 6a       	ori	r24, 0xA0	; 160
    183c:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1840:	0e 94 33 10 	call	0x2066	; 0x2066 <TWI_getStatus>
    1844:	88 31       	cpi	r24, 0x18	; 24
    1846:	11 f0       	breq	.+4      	; 0x184c <EEPROM_readByte+0x4a>
        return ERROR;
    1848:	1d 82       	std	Y+5, r1	; 0x05
    184a:	32 c0       	rjmp	.+100    	; 0x18b0 <EEPROM_readByte+0xae>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    184c:	89 81       	ldd	r24, Y+1	; 0x01
    184e:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1852:	0e 94 33 10 	call	0x2066	; 0x2066 <TWI_getStatus>
    1856:	88 32       	cpi	r24, 0x28	; 40
    1858:	11 f0       	breq	.+4      	; 0x185e <EEPROM_readByte+0x5c>
        return ERROR;
    185a:	1d 82       	std	Y+5, r1	; 0x05
    185c:	29 c0       	rjmp	.+82     	; 0x18b0 <EEPROM_readByte+0xae>

    /* Send the Repeated Start Bit */
    TWI_start();
    185e:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1862:	0e 94 33 10 	call	0x2066	; 0x2066 <TWI_getStatus>
    1866:	80 31       	cpi	r24, 0x10	; 16
    1868:	11 f0       	breq	.+4      	; 0x186e <EEPROM_readByte+0x6c>
        return ERROR;
    186a:	1d 82       	std	Y+5, r1	; 0x05
    186c:	21 c0       	rjmp	.+66     	; 0x18b0 <EEPROM_readByte+0xae>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    186e:	89 81       	ldd	r24, Y+1	; 0x01
    1870:	9a 81       	ldd	r25, Y+2	; 0x02
    1872:	80 70       	andi	r24, 0x00	; 0
    1874:	97 70       	andi	r25, 0x07	; 7
    1876:	88 0f       	add	r24, r24
    1878:	89 2f       	mov	r24, r25
    187a:	88 1f       	adc	r24, r24
    187c:	99 0b       	sbc	r25, r25
    187e:	91 95       	neg	r25
    1880:	81 6a       	ori	r24, 0xA1	; 161
    1882:	0e 94 f6 0f 	call	0x1fec	; 0x1fec <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1886:	0e 94 33 10 	call	0x2066	; 0x2066 <TWI_getStatus>
    188a:	80 34       	cpi	r24, 0x40	; 64
    188c:	11 f0       	breq	.+4      	; 0x1892 <EEPROM_readByte+0x90>
        return ERROR;
    188e:	1d 82       	std	Y+5, r1	; 0x05
    1890:	0f c0       	rjmp	.+30     	; 0x18b0 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1892:	0e 94 20 10 	call	0x2040	; 0x2040 <TWI_readByteWithNACK>
    1896:	eb 81       	ldd	r30, Y+3	; 0x03
    1898:	fc 81       	ldd	r31, Y+4	; 0x04
    189a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    189c:	0e 94 33 10 	call	0x2066	; 0x2066 <TWI_getStatus>
    18a0:	88 35       	cpi	r24, 0x58	; 88
    18a2:	11 f0       	breq	.+4      	; 0x18a8 <EEPROM_readByte+0xa6>
        return ERROR;
    18a4:	1d 82       	std	Y+5, r1	; 0x05
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    18a8:	0e 94 eb 0f 	call	0x1fd6	; 0x1fd6 <TWI_stop>

    return SUCCESS;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    18b2:	0f 90       	pop	r0
    18b4:	0f 90       	pop	r0
    18b6:	0f 90       	pop	r0
    18b8:	0f 90       	pop	r0
    18ba:	0f 90       	pop	r0
    18bc:	cf 91       	pop	r28
    18be:	df 91       	pop	r29
    18c0:	08 95       	ret

000018c2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    18c2:	df 93       	push	r29
    18c4:	cf 93       	push	r28
    18c6:	00 d0       	rcall	.+0      	; 0x18c8 <GPIO_setupPinDirection+0x6>
    18c8:	00 d0       	rcall	.+0      	; 0x18ca <GPIO_setupPinDirection+0x8>
    18ca:	0f 92       	push	r0
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	89 83       	std	Y+1, r24	; 0x01
    18d2:	6a 83       	std	Y+2, r22	; 0x02
    18d4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18d6:	8a 81       	ldd	r24, Y+2	; 0x02
    18d8:	88 30       	cpi	r24, 0x08	; 8
    18da:	08 f0       	brcs	.+2      	; 0x18de <GPIO_setupPinDirection+0x1c>
    18dc:	d5 c0       	rjmp	.+426    	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	84 30       	cpi	r24, 0x04	; 4
    18e2:	08 f0       	brcs	.+2      	; 0x18e6 <GPIO_setupPinDirection+0x24>
    18e4:	d1 c0       	rjmp	.+418    	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	3d 83       	std	Y+5, r19	; 0x05
    18ee:	2c 83       	std	Y+4, r18	; 0x04
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	9d 81       	ldd	r25, Y+5	; 0x05
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	91 05       	cpc	r25, r1
    18f8:	09 f4       	brne	.+2      	; 0x18fc <GPIO_setupPinDirection+0x3a>
    18fa:	43 c0       	rjmp	.+134    	; 0x1982 <GPIO_setupPinDirection+0xc0>
    18fc:	2c 81       	ldd	r18, Y+4	; 0x04
    18fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	2c f4       	brge	.+10     	; 0x1910 <GPIO_setupPinDirection+0x4e>
    1906:	8c 81       	ldd	r24, Y+4	; 0x04
    1908:	9d 81       	ldd	r25, Y+5	; 0x05
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	71 f0       	breq	.+28     	; 0x192a <GPIO_setupPinDirection+0x68>
    190e:	bc c0       	rjmp	.+376    	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
    1910:	2c 81       	ldd	r18, Y+4	; 0x04
    1912:	3d 81       	ldd	r19, Y+5	; 0x05
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	09 f4       	brne	.+2      	; 0x191c <GPIO_setupPinDirection+0x5a>
    191a:	5f c0       	rjmp	.+190    	; 0x19da <GPIO_setupPinDirection+0x118>
    191c:	8c 81       	ldd	r24, Y+4	; 0x04
    191e:	9d 81       	ldd	r25, Y+5	; 0x05
    1920:	83 30       	cpi	r24, 0x03	; 3
    1922:	91 05       	cpc	r25, r1
    1924:	09 f4       	brne	.+2      	; 0x1928 <GPIO_setupPinDirection+0x66>
    1926:	85 c0       	rjmp	.+266    	; 0x1a32 <GPIO_setupPinDirection+0x170>
    1928:	af c0       	rjmp	.+350    	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    192a:	8b 81       	ldd	r24, Y+3	; 0x03
    192c:	81 30       	cpi	r24, 0x01	; 1
    192e:	a1 f4       	brne	.+40     	; 0x1958 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1930:	aa e3       	ldi	r26, 0x3A	; 58
    1932:	b0 e0       	ldi	r27, 0x00	; 0
    1934:	ea e3       	ldi	r30, 0x3A	; 58
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	80 81       	ld	r24, Z
    193a:	48 2f       	mov	r20, r24
    193c:	8a 81       	ldd	r24, Y+2	; 0x02
    193e:	28 2f       	mov	r18, r24
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	81 e0       	ldi	r24, 0x01	; 1
    1944:	90 e0       	ldi	r25, 0x00	; 0
    1946:	02 2e       	mov	r0, r18
    1948:	02 c0       	rjmp	.+4      	; 0x194e <GPIO_setupPinDirection+0x8c>
    194a:	88 0f       	add	r24, r24
    194c:	99 1f       	adc	r25, r25
    194e:	0a 94       	dec	r0
    1950:	e2 f7       	brpl	.-8      	; 0x194a <GPIO_setupPinDirection+0x88>
    1952:	84 2b       	or	r24, r20
    1954:	8c 93       	st	X, r24
    1956:	98 c0       	rjmp	.+304    	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1958:	aa e3       	ldi	r26, 0x3A	; 58
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ea e3       	ldi	r30, 0x3A	; 58
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	48 2f       	mov	r20, r24
    1964:	8a 81       	ldd	r24, Y+2	; 0x02
    1966:	28 2f       	mov	r18, r24
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	81 e0       	ldi	r24, 0x01	; 1
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	02 2e       	mov	r0, r18
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <GPIO_setupPinDirection+0xb4>
    1972:	88 0f       	add	r24, r24
    1974:	99 1f       	adc	r25, r25
    1976:	0a 94       	dec	r0
    1978:	e2 f7       	brpl	.-8      	; 0x1972 <GPIO_setupPinDirection+0xb0>
    197a:	80 95       	com	r24
    197c:	84 23       	and	r24, r20
    197e:	8c 93       	st	X, r24
    1980:	83 c0       	rjmp	.+262    	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1982:	8b 81       	ldd	r24, Y+3	; 0x03
    1984:	81 30       	cpi	r24, 0x01	; 1
    1986:	a1 f4       	brne	.+40     	; 0x19b0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1988:	a7 e3       	ldi	r26, 0x37	; 55
    198a:	b0 e0       	ldi	r27, 0x00	; 0
    198c:	e7 e3       	ldi	r30, 0x37	; 55
    198e:	f0 e0       	ldi	r31, 0x00	; 0
    1990:	80 81       	ld	r24, Z
    1992:	48 2f       	mov	r20, r24
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	28 2f       	mov	r18, r24
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	02 2e       	mov	r0, r18
    19a0:	02 c0       	rjmp	.+4      	; 0x19a6 <GPIO_setupPinDirection+0xe4>
    19a2:	88 0f       	add	r24, r24
    19a4:	99 1f       	adc	r25, r25
    19a6:	0a 94       	dec	r0
    19a8:	e2 f7       	brpl	.-8      	; 0x19a2 <GPIO_setupPinDirection+0xe0>
    19aa:	84 2b       	or	r24, r20
    19ac:	8c 93       	st	X, r24
    19ae:	6c c0       	rjmp	.+216    	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    19b0:	a7 e3       	ldi	r26, 0x37	; 55
    19b2:	b0 e0       	ldi	r27, 0x00	; 0
    19b4:	e7 e3       	ldi	r30, 0x37	; 55
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	80 81       	ld	r24, Z
    19ba:	48 2f       	mov	r20, r24
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	28 2f       	mov	r18, r24
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	81 e0       	ldi	r24, 0x01	; 1
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	02 2e       	mov	r0, r18
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <GPIO_setupPinDirection+0x10c>
    19ca:	88 0f       	add	r24, r24
    19cc:	99 1f       	adc	r25, r25
    19ce:	0a 94       	dec	r0
    19d0:	e2 f7       	brpl	.-8      	; 0x19ca <GPIO_setupPinDirection+0x108>
    19d2:	80 95       	com	r24
    19d4:	84 23       	and	r24, r20
    19d6:	8c 93       	st	X, r24
    19d8:	57 c0       	rjmp	.+174    	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	a1 f4       	brne	.+40     	; 0x1a08 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    19e0:	a4 e3       	ldi	r26, 0x34	; 52
    19e2:	b0 e0       	ldi	r27, 0x00	; 0
    19e4:	e4 e3       	ldi	r30, 0x34	; 52
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	48 2f       	mov	r20, r24
    19ec:	8a 81       	ldd	r24, Y+2	; 0x02
    19ee:	28 2f       	mov	r18, r24
    19f0:	30 e0       	ldi	r19, 0x00	; 0
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	02 2e       	mov	r0, r18
    19f8:	02 c0       	rjmp	.+4      	; 0x19fe <GPIO_setupPinDirection+0x13c>
    19fa:	88 0f       	add	r24, r24
    19fc:	99 1f       	adc	r25, r25
    19fe:	0a 94       	dec	r0
    1a00:	e2 f7       	brpl	.-8      	; 0x19fa <GPIO_setupPinDirection+0x138>
    1a02:	84 2b       	or	r24, r20
    1a04:	8c 93       	st	X, r24
    1a06:	40 c0       	rjmp	.+128    	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1a08:	a4 e3       	ldi	r26, 0x34	; 52
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	e4 e3       	ldi	r30, 0x34	; 52
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	48 2f       	mov	r20, r24
    1a14:	8a 81       	ldd	r24, Y+2	; 0x02
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	90 e0       	ldi	r25, 0x00	; 0
    1a1e:	02 2e       	mov	r0, r18
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <GPIO_setupPinDirection+0x164>
    1a22:	88 0f       	add	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	0a 94       	dec	r0
    1a28:	e2 f7       	brpl	.-8      	; 0x1a22 <GPIO_setupPinDirection+0x160>
    1a2a:	80 95       	com	r24
    1a2c:	84 23       	and	r24, r20
    1a2e:	8c 93       	st	X, r24
    1a30:	2b c0       	rjmp	.+86     	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	81 30       	cpi	r24, 0x01	; 1
    1a36:	a1 f4       	brne	.+40     	; 0x1a60 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1a38:	a1 e3       	ldi	r26, 0x31	; 49
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	e1 e3       	ldi	r30, 0x31	; 49
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	48 2f       	mov	r20, r24
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	28 2f       	mov	r18, r24
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	90 e0       	ldi	r25, 0x00	; 0
    1a4e:	02 2e       	mov	r0, r18
    1a50:	02 c0       	rjmp	.+4      	; 0x1a56 <GPIO_setupPinDirection+0x194>
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	0a 94       	dec	r0
    1a58:	e2 f7       	brpl	.-8      	; 0x1a52 <GPIO_setupPinDirection+0x190>
    1a5a:	84 2b       	or	r24, r20
    1a5c:	8c 93       	st	X, r24
    1a5e:	14 c0       	rjmp	.+40     	; 0x1a88 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1a60:	a1 e3       	ldi	r26, 0x31	; 49
    1a62:	b0 e0       	ldi	r27, 0x00	; 0
    1a64:	e1 e3       	ldi	r30, 0x31	; 49
    1a66:	f0 e0       	ldi	r31, 0x00	; 0
    1a68:	80 81       	ld	r24, Z
    1a6a:	48 2f       	mov	r20, r24
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	28 2f       	mov	r18, r24
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	81 e0       	ldi	r24, 0x01	; 1
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	02 2e       	mov	r0, r18
    1a78:	02 c0       	rjmp	.+4      	; 0x1a7e <GPIO_setupPinDirection+0x1bc>
    1a7a:	88 0f       	add	r24, r24
    1a7c:	99 1f       	adc	r25, r25
    1a7e:	0a 94       	dec	r0
    1a80:	e2 f7       	brpl	.-8      	; 0x1a7a <GPIO_setupPinDirection+0x1b8>
    1a82:	80 95       	com	r24
    1a84:	84 23       	and	r24, r20
    1a86:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	0f 90       	pop	r0
    1a8e:	0f 90       	pop	r0
    1a90:	0f 90       	pop	r0
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <GPIO_writePin+0x6>
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <GPIO_writePin+0x8>
    1aa0:	0f 92       	push	r0
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	6a 83       	std	Y+2, r22	; 0x02
    1aaa:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	88 30       	cpi	r24, 0x08	; 8
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <GPIO_writePin+0x1c>
    1ab2:	d5 c0       	rjmp	.+426    	; 0x1c5e <GPIO_writePin+0x1c6>
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	84 30       	cpi	r24, 0x04	; 4
    1ab8:	08 f0       	brcs	.+2      	; 0x1abc <GPIO_writePin+0x24>
    1aba:	d1 c0       	rjmp	.+418    	; 0x1c5e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1abc:	89 81       	ldd	r24, Y+1	; 0x01
    1abe:	28 2f       	mov	r18, r24
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	3d 83       	std	Y+5, r19	; 0x05
    1ac4:	2c 83       	std	Y+4, r18	; 0x04
    1ac6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac8:	9d 81       	ldd	r25, Y+5	; 0x05
    1aca:	81 30       	cpi	r24, 0x01	; 1
    1acc:	91 05       	cpc	r25, r1
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <GPIO_writePin+0x3a>
    1ad0:	43 c0       	rjmp	.+134    	; 0x1b58 <GPIO_writePin+0xc0>
    1ad2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad6:	22 30       	cpi	r18, 0x02	; 2
    1ad8:	31 05       	cpc	r19, r1
    1ada:	2c f4       	brge	.+10     	; 0x1ae6 <GPIO_writePin+0x4e>
    1adc:	8c 81       	ldd	r24, Y+4	; 0x04
    1ade:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	71 f0       	breq	.+28     	; 0x1b00 <GPIO_writePin+0x68>
    1ae4:	bc c0       	rjmp	.+376    	; 0x1c5e <GPIO_writePin+0x1c6>
    1ae6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae8:	3d 81       	ldd	r19, Y+5	; 0x05
    1aea:	22 30       	cpi	r18, 0x02	; 2
    1aec:	31 05       	cpc	r19, r1
    1aee:	09 f4       	brne	.+2      	; 0x1af2 <GPIO_writePin+0x5a>
    1af0:	5f c0       	rjmp	.+190    	; 0x1bb0 <GPIO_writePin+0x118>
    1af2:	8c 81       	ldd	r24, Y+4	; 0x04
    1af4:	9d 81       	ldd	r25, Y+5	; 0x05
    1af6:	83 30       	cpi	r24, 0x03	; 3
    1af8:	91 05       	cpc	r25, r1
    1afa:	09 f4       	brne	.+2      	; 0x1afe <GPIO_writePin+0x66>
    1afc:	85 c0       	rjmp	.+266    	; 0x1c08 <GPIO_writePin+0x170>
    1afe:	af c0       	rjmp	.+350    	; 0x1c5e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	81 30       	cpi	r24, 0x01	; 1
    1b04:	a1 f4       	brne	.+40     	; 0x1b2e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1b06:	ab e3       	ldi	r26, 0x3B	; 59
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	eb e3       	ldi	r30, 0x3B	; 59
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	48 2f       	mov	r20, r24
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	28 2f       	mov	r18, r24
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	81 e0       	ldi	r24, 0x01	; 1
    1b1a:	90 e0       	ldi	r25, 0x00	; 0
    1b1c:	02 2e       	mov	r0, r18
    1b1e:	02 c0       	rjmp	.+4      	; 0x1b24 <GPIO_writePin+0x8c>
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	0a 94       	dec	r0
    1b26:	e2 f7       	brpl	.-8      	; 0x1b20 <GPIO_writePin+0x88>
    1b28:	84 2b       	or	r24, r20
    1b2a:	8c 93       	st	X, r24
    1b2c:	98 c0       	rjmp	.+304    	; 0x1c5e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1b2e:	ab e3       	ldi	r26, 0x3B	; 59
    1b30:	b0 e0       	ldi	r27, 0x00	; 0
    1b32:	eb e3       	ldi	r30, 0x3B	; 59
    1b34:	f0 e0       	ldi	r31, 0x00	; 0
    1b36:	80 81       	ld	r24, Z
    1b38:	48 2f       	mov	r20, r24
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	28 2f       	mov	r18, r24
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	81 e0       	ldi	r24, 0x01	; 1
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	02 2e       	mov	r0, r18
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <GPIO_writePin+0xb4>
    1b48:	88 0f       	add	r24, r24
    1b4a:	99 1f       	adc	r25, r25
    1b4c:	0a 94       	dec	r0
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <GPIO_writePin+0xb0>
    1b50:	80 95       	com	r24
    1b52:	84 23       	and	r24, r20
    1b54:	8c 93       	st	X, r24
    1b56:	83 c0       	rjmp	.+262    	; 0x1c5e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	81 30       	cpi	r24, 0x01	; 1
    1b5c:	a1 f4       	brne	.+40     	; 0x1b86 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1b5e:	a8 e3       	ldi	r26, 0x38	; 56
    1b60:	b0 e0       	ldi	r27, 0x00	; 0
    1b62:	e8 e3       	ldi	r30, 0x38	; 56
    1b64:	f0 e0       	ldi	r31, 0x00	; 0
    1b66:	80 81       	ld	r24, Z
    1b68:	48 2f       	mov	r20, r24
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	28 2f       	mov	r18, r24
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	81 e0       	ldi	r24, 0x01	; 1
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	02 2e       	mov	r0, r18
    1b76:	02 c0       	rjmp	.+4      	; 0x1b7c <GPIO_writePin+0xe4>
    1b78:	88 0f       	add	r24, r24
    1b7a:	99 1f       	adc	r25, r25
    1b7c:	0a 94       	dec	r0
    1b7e:	e2 f7       	brpl	.-8      	; 0x1b78 <GPIO_writePin+0xe0>
    1b80:	84 2b       	or	r24, r20
    1b82:	8c 93       	st	X, r24
    1b84:	6c c0       	rjmp	.+216    	; 0x1c5e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1b86:	a8 e3       	ldi	r26, 0x38	; 56
    1b88:	b0 e0       	ldi	r27, 0x00	; 0
    1b8a:	e8 e3       	ldi	r30, 0x38	; 56
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 81       	ld	r24, Z
    1b90:	48 2f       	mov	r20, r24
    1b92:	8a 81       	ldd	r24, Y+2	; 0x02
    1b94:	28 2f       	mov	r18, r24
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	81 e0       	ldi	r24, 0x01	; 1
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	02 2e       	mov	r0, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <GPIO_writePin+0x10c>
    1ba0:	88 0f       	add	r24, r24
    1ba2:	99 1f       	adc	r25, r25
    1ba4:	0a 94       	dec	r0
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <GPIO_writePin+0x108>
    1ba8:	80 95       	com	r24
    1baa:	84 23       	and	r24, r20
    1bac:	8c 93       	st	X, r24
    1bae:	57 c0       	rjmp	.+174    	; 0x1c5e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	81 30       	cpi	r24, 0x01	; 1
    1bb4:	a1 f4       	brne	.+40     	; 0x1bde <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1bb6:	a5 e3       	ldi	r26, 0x35	; 53
    1bb8:	b0 e0       	ldi	r27, 0x00	; 0
    1bba:	e5 e3       	ldi	r30, 0x35	; 53
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	80 81       	ld	r24, Z
    1bc0:	48 2f       	mov	r20, r24
    1bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc4:	28 2f       	mov	r18, r24
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	81 e0       	ldi	r24, 0x01	; 1
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	02 2e       	mov	r0, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <GPIO_writePin+0x13c>
    1bd0:	88 0f       	add	r24, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	0a 94       	dec	r0
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <GPIO_writePin+0x138>
    1bd8:	84 2b       	or	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	40 c0       	rjmp	.+128    	; 0x1c5e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1bde:	a5 e3       	ldi	r26, 0x35	; 53
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e5 e3       	ldi	r30, 0x35	; 53
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 2e       	mov	r0, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <GPIO_writePin+0x164>
    1bf8:	88 0f       	add	r24, r24
    1bfa:	99 1f       	adc	r25, r25
    1bfc:	0a 94       	dec	r0
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <GPIO_writePin+0x160>
    1c00:	80 95       	com	r24
    1c02:	84 23       	and	r24, r20
    1c04:	8c 93       	st	X, r24
    1c06:	2b c0       	rjmp	.+86     	; 0x1c5e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1c08:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0a:	81 30       	cpi	r24, 0x01	; 1
    1c0c:	a1 f4       	brne	.+40     	; 0x1c36 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1c0e:	a2 e3       	ldi	r26, 0x32	; 50
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	e2 e3       	ldi	r30, 0x32	; 50
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <GPIO_writePin+0x194>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <GPIO_writePin+0x190>
    1c30:	84 2b       	or	r24, r20
    1c32:	8c 93       	st	X, r24
    1c34:	14 c0       	rjmp	.+40     	; 0x1c5e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1c36:	a2 e3       	ldi	r26, 0x32	; 50
    1c38:	b0 e0       	ldi	r27, 0x00	; 0
    1c3a:	e2 e3       	ldi	r30, 0x32	; 50
    1c3c:	f0 e0       	ldi	r31, 0x00	; 0
    1c3e:	80 81       	ld	r24, Z
    1c40:	48 2f       	mov	r20, r24
    1c42:	8a 81       	ldd	r24, Y+2	; 0x02
    1c44:	28 2f       	mov	r18, r24
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	02 2e       	mov	r0, r18
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <GPIO_writePin+0x1bc>
    1c50:	88 0f       	add	r24, r24
    1c52:	99 1f       	adc	r25, r25
    1c54:	0a 94       	dec	r0
    1c56:	e2 f7       	brpl	.-8      	; 0x1c50 <GPIO_writePin+0x1b8>
    1c58:	80 95       	com	r24
    1c5a:	84 23       	and	r24, r20
    1c5c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	0f 90       	pop	r0
    1c64:	0f 90       	pop	r0
    1c66:	0f 90       	pop	r0
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	08 95       	ret

00001c6e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1c6e:	df 93       	push	r29
    1c70:	cf 93       	push	r28
    1c72:	00 d0       	rcall	.+0      	; 0x1c74 <GPIO_readPin+0x6>
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <GPIO_readPin+0x8>
    1c76:	0f 92       	push	r0
    1c78:	cd b7       	in	r28, 0x3d	; 61
    1c7a:	de b7       	in	r29, 0x3e	; 62
    1c7c:	8a 83       	std	Y+2, r24	; 0x02
    1c7e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1c80:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	88 30       	cpi	r24, 0x08	; 8
    1c86:	08 f0       	brcs	.+2      	; 0x1c8a <GPIO_readPin+0x1c>
    1c88:	84 c0       	rjmp	.+264    	; 0x1d92 <GPIO_readPin+0x124>
    1c8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c8c:	84 30       	cpi	r24, 0x04	; 4
    1c8e:	08 f0       	brcs	.+2      	; 0x1c92 <GPIO_readPin+0x24>
    1c90:	80 c0       	rjmp	.+256    	; 0x1d92 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1c92:	8a 81       	ldd	r24, Y+2	; 0x02
    1c94:	28 2f       	mov	r18, r24
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	3d 83       	std	Y+5, r19	; 0x05
    1c9a:	2c 83       	std	Y+4, r18	; 0x04
    1c9c:	4c 81       	ldd	r20, Y+4	; 0x04
    1c9e:	5d 81       	ldd	r21, Y+5	; 0x05
    1ca0:	41 30       	cpi	r20, 0x01	; 1
    1ca2:	51 05       	cpc	r21, r1
    1ca4:	79 f1       	breq	.+94     	; 0x1d04 <GPIO_readPin+0x96>
    1ca6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ca8:	9d 81       	ldd	r25, Y+5	; 0x05
    1caa:	82 30       	cpi	r24, 0x02	; 2
    1cac:	91 05       	cpc	r25, r1
    1cae:	34 f4       	brge	.+12     	; 0x1cbc <GPIO_readPin+0x4e>
    1cb0:	2c 81       	ldd	r18, Y+4	; 0x04
    1cb2:	3d 81       	ldd	r19, Y+5	; 0x05
    1cb4:	21 15       	cp	r18, r1
    1cb6:	31 05       	cpc	r19, r1
    1cb8:	69 f0       	breq	.+26     	; 0x1cd4 <GPIO_readPin+0x66>
    1cba:	6b c0       	rjmp	.+214    	; 0x1d92 <GPIO_readPin+0x124>
    1cbc:	4c 81       	ldd	r20, Y+4	; 0x04
    1cbe:	5d 81       	ldd	r21, Y+5	; 0x05
    1cc0:	42 30       	cpi	r20, 0x02	; 2
    1cc2:	51 05       	cpc	r21, r1
    1cc4:	b9 f1       	breq	.+110    	; 0x1d34 <GPIO_readPin+0xc6>
    1cc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1cc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1cca:	83 30       	cpi	r24, 0x03	; 3
    1ccc:	91 05       	cpc	r25, r1
    1cce:	09 f4       	brne	.+2      	; 0x1cd2 <GPIO_readPin+0x64>
    1cd0:	49 c0       	rjmp	.+146    	; 0x1d64 <GPIO_readPin+0xf6>
    1cd2:	5f c0       	rjmp	.+190    	; 0x1d92 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1cd4:	e9 e3       	ldi	r30, 0x39	; 57
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	28 2f       	mov	r18, r24
    1cdc:	30 e0       	ldi	r19, 0x00	; 0
    1cde:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce0:	88 2f       	mov	r24, r24
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	a9 01       	movw	r20, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <GPIO_readPin+0x7e>
    1ce8:	55 95       	asr	r21
    1cea:	47 95       	ror	r20
    1cec:	8a 95       	dec	r24
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <GPIO_readPin+0x7a>
    1cf0:	ca 01       	movw	r24, r20
    1cf2:	81 70       	andi	r24, 0x01	; 1
    1cf4:	90 70       	andi	r25, 0x00	; 0
    1cf6:	88 23       	and	r24, r24
    1cf8:	19 f0       	breq	.+6      	; 0x1d00 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1cfa:	81 e0       	ldi	r24, 0x01	; 1
    1cfc:	89 83       	std	Y+1, r24	; 0x01
    1cfe:	49 c0       	rjmp	.+146    	; 0x1d92 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d00:	19 82       	std	Y+1, r1	; 0x01
    1d02:	47 c0       	rjmp	.+142    	; 0x1d92 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1d04:	e6 e3       	ldi	r30, 0x36	; 54
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d10:	88 2f       	mov	r24, r24
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a9 01       	movw	r20, r18
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <GPIO_readPin+0xae>
    1d18:	55 95       	asr	r21
    1d1a:	47 95       	ror	r20
    1d1c:	8a 95       	dec	r24
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <GPIO_readPin+0xaa>
    1d20:	ca 01       	movw	r24, r20
    1d22:	81 70       	andi	r24, 0x01	; 1
    1d24:	90 70       	andi	r25, 0x00	; 0
    1d26:	88 23       	and	r24, r24
    1d28:	19 f0       	breq	.+6      	; 0x1d30 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1d2a:	81 e0       	ldi	r24, 0x01	; 1
    1d2c:	89 83       	std	Y+1, r24	; 0x01
    1d2e:	31 c0       	rjmp	.+98     	; 0x1d92 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d30:	19 82       	std	Y+1, r1	; 0x01
    1d32:	2f c0       	rjmp	.+94     	; 0x1d92 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1d34:	e3 e3       	ldi	r30, 0x33	; 51
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	28 2f       	mov	r18, r24
    1d3c:	30 e0       	ldi	r19, 0x00	; 0
    1d3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d40:	88 2f       	mov	r24, r24
    1d42:	90 e0       	ldi	r25, 0x00	; 0
    1d44:	a9 01       	movw	r20, r18
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <GPIO_readPin+0xde>
    1d48:	55 95       	asr	r21
    1d4a:	47 95       	ror	r20
    1d4c:	8a 95       	dec	r24
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <GPIO_readPin+0xda>
    1d50:	ca 01       	movw	r24, r20
    1d52:	81 70       	andi	r24, 0x01	; 1
    1d54:	90 70       	andi	r25, 0x00	; 0
    1d56:	88 23       	and	r24, r24
    1d58:	19 f0       	breq	.+6      	; 0x1d60 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	89 83       	std	Y+1, r24	; 0x01
    1d5e:	19 c0       	rjmp	.+50     	; 0x1d92 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d60:	19 82       	std	Y+1, r1	; 0x01
    1d62:	17 c0       	rjmp	.+46     	; 0x1d92 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1d64:	e0 e3       	ldi	r30, 0x30	; 48
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d70:	88 2f       	mov	r24, r24
    1d72:	90 e0       	ldi	r25, 0x00	; 0
    1d74:	a9 01       	movw	r20, r18
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <GPIO_readPin+0x10e>
    1d78:	55 95       	asr	r21
    1d7a:	47 95       	ror	r20
    1d7c:	8a 95       	dec	r24
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <GPIO_readPin+0x10a>
    1d80:	ca 01       	movw	r24, r20
    1d82:	81 70       	andi	r24, 0x01	; 1
    1d84:	90 70       	andi	r25, 0x00	; 0
    1d86:	88 23       	and	r24, r24
    1d88:	19 f0       	breq	.+6      	; 0x1d90 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	89 83       	std	Y+1, r24	; 0x01
    1d8e:	01 c0       	rjmp	.+2      	; 0x1d92 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1d90:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1d92:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	cf 91       	pop	r28
    1da0:	df 91       	pop	r29
    1da2:	08 95       	ret

00001da4 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	00 d0       	rcall	.+0      	; 0x1daa <GPIO_setupPortDirection+0x6>
    1daa:	00 d0       	rcall	.+0      	; 0x1dac <GPIO_setupPortDirection+0x8>
    1dac:	cd b7       	in	r28, 0x3d	; 61
    1dae:	de b7       	in	r29, 0x3e	; 62
    1db0:	89 83       	std	Y+1, r24	; 0x01
    1db2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1db4:	89 81       	ldd	r24, Y+1	; 0x01
    1db6:	84 30       	cpi	r24, 0x04	; 4
    1db8:	90 f5       	brcc	.+100    	; 0x1e1e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1dba:	89 81       	ldd	r24, Y+1	; 0x01
    1dbc:	28 2f       	mov	r18, r24
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	3c 83       	std	Y+4, r19	; 0x04
    1dc2:	2b 83       	std	Y+3, r18	; 0x03
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	91 05       	cpc	r25, r1
    1dcc:	d1 f0       	breq	.+52     	; 0x1e02 <GPIO_setupPortDirection+0x5e>
    1dce:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd2:	22 30       	cpi	r18, 0x02	; 2
    1dd4:	31 05       	cpc	r19, r1
    1dd6:	2c f4       	brge	.+10     	; 0x1de2 <GPIO_setupPortDirection+0x3e>
    1dd8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dda:	9c 81       	ldd	r25, Y+4	; 0x04
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	61 f0       	breq	.+24     	; 0x1df8 <GPIO_setupPortDirection+0x54>
    1de0:	1e c0       	rjmp	.+60     	; 0x1e1e <GPIO_setupPortDirection+0x7a>
    1de2:	2b 81       	ldd	r18, Y+3	; 0x03
    1de4:	3c 81       	ldd	r19, Y+4	; 0x04
    1de6:	22 30       	cpi	r18, 0x02	; 2
    1de8:	31 05       	cpc	r19, r1
    1dea:	81 f0       	breq	.+32     	; 0x1e0c <GPIO_setupPortDirection+0x68>
    1dec:	8b 81       	ldd	r24, Y+3	; 0x03
    1dee:	9c 81       	ldd	r25, Y+4	; 0x04
    1df0:	83 30       	cpi	r24, 0x03	; 3
    1df2:	91 05       	cpc	r25, r1
    1df4:	81 f0       	breq	.+32     	; 0x1e16 <GPIO_setupPortDirection+0x72>
    1df6:	13 c0       	rjmp	.+38     	; 0x1e1e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1df8:	ea e3       	ldi	r30, 0x3A	; 58
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfe:	80 83       	st	Z, r24
    1e00:	0e c0       	rjmp	.+28     	; 0x1e1e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1e02:	e7 e3       	ldi	r30, 0x37	; 55
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	8a 81       	ldd	r24, Y+2	; 0x02
    1e08:	80 83       	st	Z, r24
    1e0a:	09 c0       	rjmp	.+18     	; 0x1e1e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1e0c:	e4 e3       	ldi	r30, 0x34	; 52
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	80 83       	st	Z, r24
    1e14:	04 c0       	rjmp	.+8      	; 0x1e1e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1e16:	e1 e3       	ldi	r30, 0x31	; 49
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1c:	80 83       	st	Z, r24
			break;
		}
	}
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	08 95       	ret

00001e2c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <GPIO_writePort+0x6>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <GPIO_writePort+0x8>
    1e34:	cd b7       	in	r28, 0x3d	; 61
    1e36:	de b7       	in	r29, 0x3e	; 62
    1e38:	89 83       	std	Y+1, r24	; 0x01
    1e3a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	84 30       	cpi	r24, 0x04	; 4
    1e40:	90 f5       	brcc	.+100    	; 0x1ea6 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
    1e44:	28 2f       	mov	r18, r24
    1e46:	30 e0       	ldi	r19, 0x00	; 0
    1e48:	3c 83       	std	Y+4, r19	; 0x04
    1e4a:	2b 83       	std	Y+3, r18	; 0x03
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	81 30       	cpi	r24, 0x01	; 1
    1e52:	91 05       	cpc	r25, r1
    1e54:	d1 f0       	breq	.+52     	; 0x1e8a <GPIO_writePort+0x5e>
    1e56:	2b 81       	ldd	r18, Y+3	; 0x03
    1e58:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5a:	22 30       	cpi	r18, 0x02	; 2
    1e5c:	31 05       	cpc	r19, r1
    1e5e:	2c f4       	brge	.+10     	; 0x1e6a <GPIO_writePort+0x3e>
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	61 f0       	breq	.+24     	; 0x1e80 <GPIO_writePort+0x54>
    1e68:	1e c0       	rjmp	.+60     	; 0x1ea6 <GPIO_writePort+0x7a>
    1e6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1e6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1e6e:	22 30       	cpi	r18, 0x02	; 2
    1e70:	31 05       	cpc	r19, r1
    1e72:	81 f0       	breq	.+32     	; 0x1e94 <GPIO_writePort+0x68>
    1e74:	8b 81       	ldd	r24, Y+3	; 0x03
    1e76:	9c 81       	ldd	r25, Y+4	; 0x04
    1e78:	83 30       	cpi	r24, 0x03	; 3
    1e7a:	91 05       	cpc	r25, r1
    1e7c:	81 f0       	breq	.+32     	; 0x1e9e <GPIO_writePort+0x72>
    1e7e:	13 c0       	rjmp	.+38     	; 0x1ea6 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1e80:	eb e3       	ldi	r30, 0x3B	; 59
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	80 83       	st	Z, r24
    1e88:	0e c0       	rjmp	.+28     	; 0x1ea6 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1e8a:	e8 e3       	ldi	r30, 0x38	; 56
    1e8c:	f0 e0       	ldi	r31, 0x00	; 0
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	80 83       	st	Z, r24
    1e92:	09 c0       	rjmp	.+18     	; 0x1ea6 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1e94:	e5 e3       	ldi	r30, 0x35	; 53
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	80 83       	st	Z, r24
    1e9c:	04 c0       	rjmp	.+8      	; 0x1ea6 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1e9e:	e2 e3       	ldi	r30, 0x32	; 50
    1ea0:	f0 e0       	ldi	r31, 0x00	; 0
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	80 83       	st	Z, r24
			break;
		}
	}
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	00 d0       	rcall	.+0      	; 0x1eba <GPIO_readPort+0x6>
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <GPIO_readPort+0x8>
    1ebc:	cd b7       	in	r28, 0x3d	; 61
    1ebe:	de b7       	in	r29, 0x3e	; 62
    1ec0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ec2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	84 30       	cpi	r24, 0x04	; 4
    1ec8:	90 f5       	brcc	.+100    	; 0x1f2e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	28 2f       	mov	r18, r24
    1ece:	30 e0       	ldi	r19, 0x00	; 0
    1ed0:	3c 83       	std	Y+4, r19	; 0x04
    1ed2:	2b 83       	std	Y+3, r18	; 0x03
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	91 05       	cpc	r25, r1
    1edc:	d1 f0       	breq	.+52     	; 0x1f12 <GPIO_readPort+0x5e>
    1ede:	2b 81       	ldd	r18, Y+3	; 0x03
    1ee0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ee2:	22 30       	cpi	r18, 0x02	; 2
    1ee4:	31 05       	cpc	r19, r1
    1ee6:	2c f4       	brge	.+10     	; 0x1ef2 <GPIO_readPort+0x3e>
    1ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eea:	9c 81       	ldd	r25, Y+4	; 0x04
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	61 f0       	breq	.+24     	; 0x1f08 <GPIO_readPort+0x54>
    1ef0:	1e c0       	rjmp	.+60     	; 0x1f2e <GPIO_readPort+0x7a>
    1ef2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ef4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ef6:	22 30       	cpi	r18, 0x02	; 2
    1ef8:	31 05       	cpc	r19, r1
    1efa:	81 f0       	breq	.+32     	; 0x1f1c <GPIO_readPort+0x68>
    1efc:	8b 81       	ldd	r24, Y+3	; 0x03
    1efe:	9c 81       	ldd	r25, Y+4	; 0x04
    1f00:	83 30       	cpi	r24, 0x03	; 3
    1f02:	91 05       	cpc	r25, r1
    1f04:	81 f0       	breq	.+32     	; 0x1f26 <GPIO_readPort+0x72>
    1f06:	13 c0       	rjmp	.+38     	; 0x1f2e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1f08:	e9 e3       	ldi	r30, 0x39	; 57
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	0e c0       	rjmp	.+28     	; 0x1f2e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1f12:	e6 e3       	ldi	r30, 0x36	; 54
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	89 83       	std	Y+1, r24	; 0x01
    1f1a:	09 c0       	rjmp	.+18     	; 0x1f2e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1f1c:	e3 e3       	ldi	r30, 0x33	; 51
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 81       	ld	r24, Z
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	04 c0       	rjmp	.+8      	; 0x1f2e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1f26:	e0 e3       	ldi	r30, 0x30	; 48
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	0f 90       	pop	r0
    1f38:	cf 91       	pop	r28
    1f3a:	df 91       	pop	r29
    1f3c:	08 95       	ret

00001f3e <TWI_init>:
/*
 * Description :
 * function to initialize I2C driver.
 */
void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    1f3e:	df 93       	push	r29
    1f40:	cf 93       	push	r28
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <TWI_init+0x6>
    1f44:	0f 92       	push	r0
    1f46:	cd b7       	in	r28, 0x3d	; 61
    1f48:	de b7       	in	r29, 0x3e	; 62
    1f4a:	9b 83       	std	Y+3, r25	; 0x03
    1f4c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 baud_rate = 0;
    1f4e:	19 82       	std	Y+1, r1	; 0x01
	baud_rate = (uint8)(((FCPU/(Config_Ptr->bit_rate))-16)/2);
    1f50:	ea 81       	ldd	r30, Y+2	; 0x02
    1f52:	fb 81       	ldd	r31, Y+3	; 0x03
    1f54:	20 81       	ld	r18, Z
    1f56:	31 81       	ldd	r19, Z+1	; 0x01
    1f58:	42 81       	ldd	r20, Z+2	; 0x02
    1f5a:	53 81       	ldd	r21, Z+3	; 0x03
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	92 e1       	ldi	r25, 0x12	; 18
    1f60:	aa e7       	ldi	r26, 0x7A	; 122
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	bc 01       	movw	r22, r24
    1f66:	cd 01       	movw	r24, r26
    1f68:	0e 94 67 12 	call	0x24ce	; 0x24ce <__udivmodsi4>
    1f6c:	da 01       	movw	r26, r20
    1f6e:	c9 01       	movw	r24, r18
    1f70:	40 97       	sbiw	r24, 0x10	; 16
    1f72:	a1 09       	sbc	r26, r1
    1f74:	b1 09       	sbc	r27, r1
    1f76:	b6 95       	lsr	r27
    1f78:	a7 95       	ror	r26
    1f7a:	97 95       	ror	r25
    1f7c:	87 95       	ror	r24
    1f7e:	89 83       	std	Y+1, r24	; 0x01
	TWBR = baud_rate;
    1f80:	e0 e2       	ldi	r30, 0x20	; 32
    1f82:	f0 e0       	ldi	r31, 0x00	; 0
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	80 83       	st	Z, r24
	TWSR = PRESCALER_1;
    1f88:	e1 e2       	ldi	r30, 0x21	; 33
    1f8a:	f0 e0       	ldi	r31, 0x00	; 0
    1f8c:	10 82       	st	Z, r1
	TWAR = (Config_Ptr->address)<<1; //write address
    1f8e:	a2 e2       	ldi	r26, 0x22	; 34
    1f90:	b0 e0       	ldi	r27, 0x00	; 0
    1f92:	ea 81       	ldd	r30, Y+2	; 0x02
    1f94:	fb 81       	ldd	r31, Y+3	; 0x03
    1f96:	84 81       	ldd	r24, Z+4	; 0x04
    1f98:	88 0f       	add	r24, r24
    1f9a:	8c 93       	st	X, r24
	TWCR |= (1<<TWEN); // enable i2c
    1f9c:	a6 e5       	ldi	r26, 0x56	; 86
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e6 e5       	ldi	r30, 0x56	; 86
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	84 60       	ori	r24, 0x04	; 4
    1fa8:	8c 93       	st	X, r24
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <TWI_start>:
/*
 * Description :
 * function to send start bit.
 */
void TWI_start(void)
{
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	cd b7       	in	r28, 0x3d	; 61
    1fbc:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1fbe:	e6 e5       	ldi	r30, 0x56	; 86
    1fc0:	f0 e0       	ldi	r31, 0x00	; 0
    1fc2:	84 ea       	ldi	r24, 0xA4	; 164
    1fc4:	80 83       	st	Z, r24

    /*wait until the start bit is send*/
	while(BIT_IS_CLEAR(TWCR,TWINT));
    1fc6:	e6 e5       	ldi	r30, 0x56	; 86
    1fc8:	f0 e0       	ldi	r31, 0x00	; 0
    1fca:	80 81       	ld	r24, Z
    1fcc:	88 23       	and	r24, r24
    1fce:	dc f7       	brge	.-10     	; 0x1fc6 <TWI_start+0x10>

}
    1fd0:	cf 91       	pop	r28
    1fd2:	df 91       	pop	r29
    1fd4:	08 95       	ret

00001fd6 <TWI_stop>:
/*
 * Description :
 * function to send stop bit.
 */
void TWI_stop(void)
{
    1fd6:	df 93       	push	r29
    1fd8:	cf 93       	push	r28
    1fda:	cd b7       	in	r28, 0x3d	; 61
    1fdc:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1fde:	e6 e5       	ldi	r30, 0x56	; 86
    1fe0:	f0 e0       	ldi	r31, 0x00	; 0
    1fe2:	84 e9       	ldi	r24, 0x94	; 148
    1fe4:	80 83       	st	Z, r24

}
    1fe6:	cf 91       	pop	r28
    1fe8:	df 91       	pop	r29
    1fea:	08 95       	ret

00001fec <TWI_writeByte>:
/*
 * Description :
 * function to write byte.
 */
void TWI_writeByte(uint8 data)
{
    1fec:	df 93       	push	r29
    1fee:	cf 93       	push	r28
    1ff0:	0f 92       	push	r0
    1ff2:	cd b7       	in	r28, 0x3d	; 61
    1ff4:	de b7       	in	r29, 0x3e	; 62
    1ff6:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data; //write data
    1ff8:	e3 e2       	ldi	r30, 0x23	; 35
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	89 81       	ldd	r24, Y+1	; 0x01
    1ffe:	80 83       	st	Z, r24

	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN);
    2000:	e6 e5       	ldi	r30, 0x56	; 86
    2002:	f0 e0       	ldi	r31, 0x00	; 0
    2004:	84 e8       	ldi	r24, 0x84	; 132
    2006:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    2008:	e6 e5       	ldi	r30, 0x56	; 86
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	88 23       	and	r24, r24
    2010:	dc f7       	brge	.-10     	; 0x2008 <TWI_writeByte+0x1c>
}
    2012:	0f 90       	pop	r0
    2014:	cf 91       	pop	r28
    2016:	df 91       	pop	r29
    2018:	08 95       	ret

0000201a <TWI_readByteWithACK>:
/*
 * Description :
 * function to read byte with acknowledge.
 */
uint8 TWI_readByteWithACK(void)
{
    201a:	df 93       	push	r29
    201c:	cf 93       	push	r28
    201e:	cd b7       	in	r28, 0x3d	; 61
    2020:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2022:	e6 e5       	ldi	r30, 0x56	; 86
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	84 ec       	ldi	r24, 0xC4	; 196
    2028:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR,TWINT));
    202a:	e6 e5       	ldi	r30, 0x56	; 86
    202c:	f0 e0       	ldi	r31, 0x00	; 0
    202e:	80 81       	ld	r24, Z
    2030:	88 23       	and	r24, r24
    2032:	dc f7       	brge	.-10     	; 0x202a <TWI_readByteWithACK+0x10>
	/* Read Data */
	return TWDR;
    2034:	e3 e2       	ldi	r30, 0x23	; 35
    2036:	f0 e0       	ldi	r31, 0x00	; 0
    2038:	80 81       	ld	r24, Z
}
    203a:	cf 91       	pop	r28
    203c:	df 91       	pop	r29
    203e:	08 95       	ret

00002040 <TWI_readByteWithNACK>:
/*
 * Description :
 * function to read byte with negative acknowledge.
 */
uint8 TWI_readByteWithNACK(void)
{
    2040:	df 93       	push	r29
    2042:	cf 93       	push	r28
    2044:	cd b7       	in	r28, 0x3d	; 61
    2046:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2048:	e6 e5       	ldi	r30, 0x56	; 86
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	84 e8       	ldi	r24, 0x84	; 132
    204e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2050:	e6 e5       	ldi	r30, 0x56	; 86
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	88 23       	and	r24, r24
    2058:	dc f7       	brge	.-10     	; 0x2050 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    205a:	e3 e2       	ldi	r30, 0x23	; 35
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
}
    2060:	cf 91       	pop	r28
    2062:	df 91       	pop	r29
    2064:	08 95       	ret

00002066 <TWI_getStatus>:
/*
 * Description :
 * function to get the status of I2C.
 */
uint8 TWI_getStatus(void)
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	0f 92       	push	r0
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWSR & 0xF8;
    2070:	e1 e2       	ldi	r30, 0x21	; 33
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	88 7f       	andi	r24, 0xF8	; 248
    2078:	89 83       	std	Y+1, r24	; 0x01
	return status;
    207a:	89 81       	ldd	r24, Y+1	; 0x01
}
    207c:	0f 90       	pop	r0
    207e:	cf 91       	pop	r28
    2080:	df 91       	pop	r29
    2082:	08 95       	ret

00002084 <PWM_Timer0_Start>:
/*
 * Description :
 * Generate a PWM signal from timer 0.
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2084:	0f 93       	push	r16
    2086:	1f 93       	push	r17
    2088:	df 93       	push	r29
    208a:	cf 93       	push	r28
    208c:	0f 92       	push	r0
    208e:	cd b7       	in	r28, 0x3d	; 61
    2090:	de b7       	in	r29, 0x3e	; 62
    2092:	89 83       	std	Y+1, r24	; 0x01
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2094:	e3 e5       	ldi	r30, 0x53	; 83
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	8a e6       	ldi	r24, 0x6A	; 106
    209a:	80 83       	st	Z, r24

	TCNT0 = 0; // Set Timer Initial Value to 0
    209c:	e2 e5       	ldi	r30, 0x52	; 82
    209e:	f0 e0       	ldi	r31, 0x00	; 0
    20a0:	10 82       	st	Z, r1

	OCR0  = (uint8)(((uint32)duty_cycle * TIMER0_MAX_VALUE)/100); // Set Compare Value
    20a2:	0c e5       	ldi	r16, 0x5C	; 92
    20a4:	10 e0       	ldi	r17, 0x00	; 0
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	88 2f       	mov	r24, r24
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	a0 e0       	ldi	r26, 0x00	; 0
    20ae:	b0 e0       	ldi	r27, 0x00	; 0
    20b0:	ba 2f       	mov	r27, r26
    20b2:	a9 2f       	mov	r26, r25
    20b4:	98 2f       	mov	r25, r24
    20b6:	88 27       	eor	r24, r24
    20b8:	24 e6       	ldi	r18, 0x64	; 100
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e0       	ldi	r20, 0x00	; 0
    20be:	50 e0       	ldi	r21, 0x00	; 0
    20c0:	bc 01       	movw	r22, r24
    20c2:	cd 01       	movw	r24, r26
    20c4:	0e 94 67 12 	call	0x24ce	; 0x24ce <__udivmodsi4>
    20c8:	da 01       	movw	r26, r20
    20ca:	c9 01       	movw	r24, r18
    20cc:	f8 01       	movw	r30, r16
    20ce:	80 83       	st	Z, r24

	GPIO_setupPinDirection(TIMER0_PWM_PORT_ID,TIMER0_PWM_PIN_ID,PIN_OUTPUT); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    20d0:	81 e0       	ldi	r24, 0x01	; 1
    20d2:	63 e0       	ldi	r22, 0x03	; 3
    20d4:	41 e0       	ldi	r20, 0x01	; 1
    20d6:	0e 94 61 0c 	call	0x18c2	; 0x18c2 <GPIO_setupPinDirection>
}
    20da:	0f 90       	pop	r0
    20dc:	cf 91       	pop	r28
    20de:	df 91       	pop	r29
    20e0:	1f 91       	pop	r17
    20e2:	0f 91       	pop	r16
    20e4:	08 95       	ret

000020e6 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_OVF_vect)
{
    20e6:	1f 92       	push	r1
    20e8:	0f 92       	push	r0
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	0f 92       	push	r0
    20ee:	11 24       	eor	r1, r1
    20f0:	2f 93       	push	r18
    20f2:	3f 93       	push	r19
    20f4:	4f 93       	push	r20
    20f6:	5f 93       	push	r21
    20f8:	6f 93       	push	r22
    20fa:	7f 93       	push	r23
    20fc:	8f 93       	push	r24
    20fe:	9f 93       	push	r25
    2100:	af 93       	push	r26
    2102:	bf 93       	push	r27
    2104:	ef 93       	push	r30
    2106:	ff 93       	push	r31
    2108:	df 93       	push	r29
    210a:	cf 93       	push	r28
    210c:	cd b7       	in	r28, 0x3d	; 61
    210e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2110:	80 91 7a 00 	lds	r24, 0x007A
    2114:	90 91 7b 00 	lds	r25, 0x007B
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	29 f0       	breq	.+10     	; 0x2126 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    211c:	e0 91 7a 00 	lds	r30, 0x007A
    2120:	f0 91 7b 00 	lds	r31, 0x007B
    2124:	09 95       	icall
	}
}
    2126:	cf 91       	pop	r28
    2128:	df 91       	pop	r29
    212a:	ff 91       	pop	r31
    212c:	ef 91       	pop	r30
    212e:	bf 91       	pop	r27
    2130:	af 91       	pop	r26
    2132:	9f 91       	pop	r25
    2134:	8f 91       	pop	r24
    2136:	7f 91       	pop	r23
    2138:	6f 91       	pop	r22
    213a:	5f 91       	pop	r21
    213c:	4f 91       	pop	r20
    213e:	3f 91       	pop	r19
    2140:	2f 91       	pop	r18
    2142:	0f 90       	pop	r0
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	0f 90       	pop	r0
    2148:	1f 90       	pop	r1
    214a:	18 95       	reti

0000214c <__vector_7>:


ISR(TIMER1_COMPA_vect)
{
    214c:	1f 92       	push	r1
    214e:	0f 92       	push	r0
    2150:	0f b6       	in	r0, 0x3f	; 63
    2152:	0f 92       	push	r0
    2154:	11 24       	eor	r1, r1
    2156:	2f 93       	push	r18
    2158:	3f 93       	push	r19
    215a:	4f 93       	push	r20
    215c:	5f 93       	push	r21
    215e:	6f 93       	push	r22
    2160:	7f 93       	push	r23
    2162:	8f 93       	push	r24
    2164:	9f 93       	push	r25
    2166:	af 93       	push	r26
    2168:	bf 93       	push	r27
    216a:	ef 93       	push	r30
    216c:	ff 93       	push	r31
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2176:	80 91 7a 00 	lds	r24, 0x007A
    217a:	90 91 7b 00 	lds	r25, 0x007B
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	29 f0       	breq	.+10     	; 0x218c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    2182:	e0 91 7a 00 	lds	r30, 0x007A
    2186:	f0 91 7b 00 	lds	r31, 0x007B
    218a:	09 95       	icall
	}
}
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	ff 91       	pop	r31
    2192:	ef 91       	pop	r30
    2194:	bf 91       	pop	r27
    2196:	af 91       	pop	r26
    2198:	9f 91       	pop	r25
    219a:	8f 91       	pop	r24
    219c:	7f 91       	pop	r23
    219e:	6f 91       	pop	r22
    21a0:	5f 91       	pop	r21
    21a2:	4f 91       	pop	r20
    21a4:	3f 91       	pop	r19
    21a6:	2f 91       	pop	r18
    21a8:	0f 90       	pop	r0
    21aa:	0f be       	out	0x3f, r0	; 63
    21ac:	0f 90       	pop	r0
    21ae:	1f 90       	pop	r1
    21b0:	18 95       	reti

000021b2 <TIMER1_init>:
/*
 * Description :
 * initialize the timer Driver.
 */
void TIMER1_init(const Timer1_ConfigType *Config_Ptr)
{
    21b2:	df 93       	push	r29
    21b4:	cf 93       	push	r28
    21b6:	00 d0       	rcall	.+0      	; 0x21b8 <TIMER1_init+0x6>
    21b8:	cd b7       	in	r28, 0x3d	; 61
    21ba:	de b7       	in	r29, 0x3e	; 62
    21bc:	9a 83       	std	Y+2, r25	; 0x02
    21be:	89 83       	std	Y+1, r24	; 0x01
	/*set bits for non pwm mode*/
	TCCR1A |= (1<<FOC1A) | (1<<FOC1B);
    21c0:	af e4       	ldi	r26, 0x4F	; 79
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	ef e4       	ldi	r30, 0x4F	; 79
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	8c 60       	ori	r24, 0x0C	; 12
    21cc:	8c 93       	st	X, r24

	/*setup mode bits*/
	TCCR1A = (TCCR1A & 0xFC) | (Config_Ptr->mode);
    21ce:	af e4       	ldi	r26, 0x4F	; 79
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	ef e4       	ldi	r30, 0x4F	; 79
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	98 2f       	mov	r25, r24
    21da:	9c 7f       	andi	r25, 0xFC	; 252
    21dc:	e9 81       	ldd	r30, Y+1	; 0x01
    21de:	fa 81       	ldd	r31, Y+2	; 0x02
    21e0:	85 81       	ldd	r24, Z+5	; 0x05
    21e2:	89 2b       	or	r24, r25
    21e4:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B & 0xF3) | ((Config_Ptr->mode)<<3);
    21e6:	ae e4       	ldi	r26, 0x4E	; 78
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	ee e4       	ldi	r30, 0x4E	; 78
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	28 2f       	mov	r18, r24
    21f2:	23 7f       	andi	r18, 0xF3	; 243
    21f4:	e9 81       	ldd	r30, Y+1	; 0x01
    21f6:	fa 81       	ldd	r31, Y+2	; 0x02
    21f8:	85 81       	ldd	r24, Z+5	; 0x05
    21fa:	88 2f       	mov	r24, r24
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	88 0f       	add	r24, r24
    2208:	99 1f       	adc	r25, r25
    220a:	82 2b       	or	r24, r18
    220c:	8c 93       	st	X, r24

	/*setup the clock for timer1*/
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->prescaler);
    220e:	ae e4       	ldi	r26, 0x4E	; 78
    2210:	b0 e0       	ldi	r27, 0x00	; 0
    2212:	ee e4       	ldi	r30, 0x4E	; 78
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	80 81       	ld	r24, Z
    2218:	98 2f       	mov	r25, r24
    221a:	98 7f       	andi	r25, 0xF8	; 248
    221c:	e9 81       	ldd	r30, Y+1	; 0x01
    221e:	fa 81       	ldd	r31, Y+2	; 0x02
    2220:	84 81       	ldd	r24, Z+4	; 0x04
    2222:	89 2b       	or	r24, r25
    2224:	8c 93       	st	X, r24

	/*setup the initial value of timer1*/
	TCNT1 = (Config_Ptr->initial_value);
    2226:	ac e4       	ldi	r26, 0x4C	; 76
    2228:	b0 e0       	ldi	r27, 0x00	; 0
    222a:	e9 81       	ldd	r30, Y+1	; 0x01
    222c:	fa 81       	ldd	r31, Y+2	; 0x02
    222e:	80 81       	ld	r24, Z
    2230:	91 81       	ldd	r25, Z+1	; 0x01
    2232:	11 96       	adiw	r26, 0x01	; 1
    2234:	9c 93       	st	X, r25
    2236:	8e 93       	st	-X, r24

	if((Config_Ptr->mode) == CTC)
    2238:	e9 81       	ldd	r30, Y+1	; 0x01
    223a:	fa 81       	ldd	r31, Y+2	; 0x02
    223c:	85 81       	ldd	r24, Z+5	; 0x05
    223e:	84 30       	cpi	r24, 0x04	; 4
    2240:	89 f4       	brne	.+34     	; 0x2264 <TIMER1_init+0xb2>
	{
		OCR1A = (Config_Ptr->compare_value);
    2242:	aa e4       	ldi	r26, 0x4A	; 74
    2244:	b0 e0       	ldi	r27, 0x00	; 0
    2246:	e9 81       	ldd	r30, Y+1	; 0x01
    2248:	fa 81       	ldd	r31, Y+2	; 0x02
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	93 81       	ldd	r25, Z+3	; 0x03
    224e:	11 96       	adiw	r26, 0x01	; 1
    2250:	9c 93       	st	X, r25
    2252:	8e 93       	st	-X, r24
		TIMSK |= (1<<OCIE1A);
    2254:	a9 e5       	ldi	r26, 0x59	; 89
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e9 e5       	ldi	r30, 0x59	; 89
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	80 81       	ld	r24, Z
    225e:	80 61       	ori	r24, 0x10	; 16
    2260:	8c 93       	st	X, r24
    2262:	07 c0       	rjmp	.+14     	; 0x2272 <TIMER1_init+0xc0>
	}
	else
	{
		TIMSK |= (1<<TOIE1);
    2264:	a9 e5       	ldi	r26, 0x59	; 89
    2266:	b0 e0       	ldi	r27, 0x00	; 0
    2268:	e9 e5       	ldi	r30, 0x59	; 89
    226a:	f0 e0       	ldi	r31, 0x00	; 0
    226c:	80 81       	ld	r24, Z
    226e:	84 60       	ori	r24, 0x04	; 4
    2270:	8c 93       	st	X, r24
	}
}
    2272:	0f 90       	pop	r0
    2274:	0f 90       	pop	r0
    2276:	cf 91       	pop	r28
    2278:	df 91       	pop	r29
    227a:	08 95       	ret

0000227c <Timer1_deInit>:
/*
 * Description :
 * function to disable timer1..
 */
void Timer1_deInit(void)
{
    227c:	df 93       	push	r29
    227e:	cf 93       	push	r28
    2280:	cd b7       	in	r28, 0x3d	; 61
    2282:	de b7       	in	r29, 0x3e	; 62
	TCCR1B = 0; /*clear clock to disable timer*/
    2284:	ee e4       	ldi	r30, 0x4E	; 78
    2286:	f0 e0       	ldi	r31, 0x00	; 0
    2288:	10 82       	st	Z, r1
}
    228a:	cf 91       	pop	r28
    228c:	df 91       	pop	r29
    228e:	08 95       	ret

00002290 <Timer1_setCallBack>:
/*
 * Description:
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2290:	df 93       	push	r29
    2292:	cf 93       	push	r28
    2294:	00 d0       	rcall	.+0      	; 0x2296 <Timer1_setCallBack+0x6>
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	9a 83       	std	Y+2, r25	; 0x02
    229c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	90 93 7b 00 	sts	0x007B, r25
    22a6:	80 93 7a 00 	sts	0x007A, r24
}
    22aa:	0f 90       	pop	r0
    22ac:	0f 90       	pop	r0
    22ae:	cf 91       	pop	r28
    22b0:	df 91       	pop	r29
    22b2:	08 95       	ret

000022b4 <UART_init>:
/*
 * Description :
 * Functional responsible for Initializing the UART device.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	00 d0       	rcall	.+0      	; 0x22ba <UART_init+0x6>
    22ba:	00 d0       	rcall	.+0      	; 0x22bc <UART_init+0x8>
    22bc:	cd b7       	in	r28, 0x3d	; 61
    22be:	de b7       	in	r29, 0x3e	; 62
    22c0:	9c 83       	std	Y+4, r25	; 0x04
    22c2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    22c4:	1a 82       	std	Y+2, r1	; 0x02
    22c6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    22c8:	eb e2       	ldi	r30, 0x2B	; 43
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	82 e0       	ldi	r24, 0x02	; 2
    22ce:	80 83       	st	Z, r24

	UCSRB = (1<<RXEN) | (1<<TXEN);
    22d0:	ea e2       	ldi	r30, 0x2A	; 42
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	88 e1       	ldi	r24, 0x18	; 24
    22d6:	80 83       	st	Z, r24
	UCSRB = (UCSRB & 0xFB) | ((Config_Ptr->bit_data)>>2);
    22d8:	aa e2       	ldi	r26, 0x2A	; 42
    22da:	b0 e0       	ldi	r27, 0x00	; 0
    22dc:	ea e2       	ldi	r30, 0x2A	; 42
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	80 81       	ld	r24, Z
    22e2:	98 2f       	mov	r25, r24
    22e4:	9b 7f       	andi	r25, 0xFB	; 251
    22e6:	eb 81       	ldd	r30, Y+3	; 0x03
    22e8:	fc 81       	ldd	r31, Y+4	; 0x04
    22ea:	80 81       	ld	r24, Z
    22ec:	86 95       	lsr	r24
    22ee:	86 95       	lsr	r24
    22f0:	89 2b       	or	r24, r25
    22f2:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    22f4:	e0 e4       	ldi	r30, 0x40	; 64
    22f6:	f0 e0       	ldi	r31, 0x00	; 0
    22f8:	80 e8       	ldi	r24, 0x80	; 128
    22fa:	80 83       	st	Z, r24
	UCSRC = (UCSRC & 0xF6) | (Config_Ptr->bit_data);
    22fc:	a0 e4       	ldi	r26, 0x40	; 64
    22fe:	b0 e0       	ldi	r27, 0x00	; 0
    2300:	e0 e4       	ldi	r30, 0x40	; 64
    2302:	f0 e0       	ldi	r31, 0x00	; 0
    2304:	80 81       	ld	r24, Z
    2306:	98 2f       	mov	r25, r24
    2308:	96 7f       	andi	r25, 0xF6	; 246
    230a:	eb 81       	ldd	r30, Y+3	; 0x03
    230c:	fc 81       	ldd	r31, Y+4	; 0x04
    230e:	80 81       	ld	r24, Z
    2310:	89 2b       	or	r24, r25
    2312:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xCF) | (Config_Ptr->parity);
    2314:	a0 e4       	ldi	r26, 0x40	; 64
    2316:	b0 e0       	ldi	r27, 0x00	; 0
    2318:	e0 e4       	ldi	r30, 0x40	; 64
    231a:	f0 e0       	ldi	r31, 0x00	; 0
    231c:	80 81       	ld	r24, Z
    231e:	98 2f       	mov	r25, r24
    2320:	9f 7c       	andi	r25, 0xCF	; 207
    2322:	eb 81       	ldd	r30, Y+3	; 0x03
    2324:	fc 81       	ldd	r31, Y+4	; 0x04
    2326:	81 81       	ldd	r24, Z+1	; 0x01
    2328:	89 2b       	or	r24, r25
    232a:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | (Config_Ptr->stop_bit);
    232c:	a0 e4       	ldi	r26, 0x40	; 64
    232e:	b0 e0       	ldi	r27, 0x00	; 0
    2330:	e0 e4       	ldi	r30, 0x40	; 64
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	98 2f       	mov	r25, r24
    2338:	97 7f       	andi	r25, 0xF7	; 247
    233a:	eb 81       	ldd	r30, Y+3	; 0x03
    233c:	fc 81       	ldd	r31, Y+4	; 0x04
    233e:	82 81       	ldd	r24, Z+2	; 0x02
    2340:	89 2b       	or	r24, r25
    2342:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2344:	eb 81       	ldd	r30, Y+3	; 0x03
    2346:	fc 81       	ldd	r31, Y+4	; 0x04
    2348:	83 81       	ldd	r24, Z+3	; 0x03
    234a:	94 81       	ldd	r25, Z+4	; 0x04
    234c:	a5 81       	ldd	r26, Z+5	; 0x05
    234e:	b6 81       	ldd	r27, Z+6	; 0x06
    2350:	88 0f       	add	r24, r24
    2352:	99 1f       	adc	r25, r25
    2354:	aa 1f       	adc	r26, r26
    2356:	bb 1f       	adc	r27, r27
    2358:	88 0f       	add	r24, r24
    235a:	99 1f       	adc	r25, r25
    235c:	aa 1f       	adc	r26, r26
    235e:	bb 1f       	adc	r27, r27
    2360:	88 0f       	add	r24, r24
    2362:	99 1f       	adc	r25, r25
    2364:	aa 1f       	adc	r26, r26
    2366:	bb 1f       	adc	r27, r27
    2368:	9c 01       	movw	r18, r24
    236a:	ad 01       	movw	r20, r26
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	92 e1       	ldi	r25, 0x12	; 18
    2370:	aa e7       	ldi	r26, 0x7A	; 122
    2372:	b0 e0       	ldi	r27, 0x00	; 0
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 67 12 	call	0x24ce	; 0x24ce <__udivmodsi4>
    237c:	da 01       	movw	r26, r20
    237e:	c9 01       	movw	r24, r18
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	9a 83       	std	Y+2, r25	; 0x02
    2384:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2386:	e0 e4       	ldi	r30, 0x40	; 64
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	9a 81       	ldd	r25, Y+2	; 0x02
    238e:	89 2f       	mov	r24, r25
    2390:	99 27       	eor	r25, r25
    2392:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2394:	e9 e2       	ldi	r30, 0x29	; 41
    2396:	f0 e0       	ldi	r31, 0x00	; 0
    2398:	89 81       	ldd	r24, Y+1	; 0x01
    239a:	80 83       	st	Z, r24

}
    239c:	0f 90       	pop	r0
    239e:	0f 90       	pop	r0
    23a0:	0f 90       	pop	r0
    23a2:	0f 90       	pop	r0
    23a4:	cf 91       	pop	r28
    23a6:	df 91       	pop	r29
    23a8:	08 95       	ret

000023aa <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    23aa:	df 93       	push	r29
    23ac:	cf 93       	push	r28
    23ae:	0f 92       	push	r0
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    23b6:	eb e2       	ldi	r30, 0x2B	; 43
    23b8:	f0 e0       	ldi	r31, 0x00	; 0
    23ba:	80 81       	ld	r24, Z
    23bc:	88 2f       	mov	r24, r24
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	80 72       	andi	r24, 0x20	; 32
    23c2:	90 70       	andi	r25, 0x00	; 0
    23c4:	00 97       	sbiw	r24, 0x00	; 0
    23c6:	b9 f3       	breq	.-18     	; 0x23b6 <UART_sendByte+0xc>

	UDR = data;
    23c8:	ec e2       	ldi	r30, 0x2C	; 44
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	89 81       	ldd	r24, Y+1	; 0x01
    23ce:	80 83       	st	Z, r24

}
    23d0:	0f 90       	pop	r0
    23d2:	cf 91       	pop	r28
    23d4:	df 91       	pop	r29
    23d6:	08 95       	ret

000023d8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    23d8:	df 93       	push	r29
    23da:	cf 93       	push	r28
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    23e0:	eb e2       	ldi	r30, 0x2B	; 43
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	88 23       	and	r24, r24
    23e8:	dc f7       	brge	.-10     	; 0x23e0 <UART_recieveByte+0x8>

    return UDR;
    23ea:	ec e2       	ldi	r30, 0x2C	; 44
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
}
    23f0:	cf 91       	pop	r28
    23f2:	df 91       	pop	r29
    23f4:	08 95       	ret

000023f6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	00 d0       	rcall	.+0      	; 0x23fc <UART_sendString+0x6>
    23fc:	0f 92       	push	r0
    23fe:	cd b7       	in	r28, 0x3d	; 61
    2400:	de b7       	in	r29, 0x3e	; 62
    2402:	9b 83       	std	Y+3, r25	; 0x03
    2404:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2406:	19 82       	std	Y+1, r1	; 0x01
    2408:	0e c0       	rjmp	.+28     	; 0x2426 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    240a:	89 81       	ldd	r24, Y+1	; 0x01
    240c:	28 2f       	mov	r18, r24
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	9b 81       	ldd	r25, Y+3	; 0x03
    2414:	fc 01       	movw	r30, r24
    2416:	e2 0f       	add	r30, r18
    2418:	f3 1f       	adc	r31, r19
    241a:	80 81       	ld	r24, Z
    241c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <UART_sendByte>
		i++;
    2420:	89 81       	ldd	r24, Y+1	; 0x01
    2422:	8f 5f       	subi	r24, 0xFF	; 255
    2424:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2426:	89 81       	ldd	r24, Y+1	; 0x01
    2428:	28 2f       	mov	r18, r24
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	8a 81       	ldd	r24, Y+2	; 0x02
    242e:	9b 81       	ldd	r25, Y+3	; 0x03
    2430:	fc 01       	movw	r30, r24
    2432:	e2 0f       	add	r30, r18
    2434:	f3 1f       	adc	r31, r19
    2436:	80 81       	ld	r24, Z
    2438:	88 23       	and	r24, r24
    243a:	39 f7       	brne	.-50     	; 0x240a <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    243c:	0f 90       	pop	r0
    243e:	0f 90       	pop	r0
    2440:	0f 90       	pop	r0
    2442:	cf 91       	pop	r28
    2444:	df 91       	pop	r29
    2446:	08 95       	ret

00002448 <UART_recieveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_recieveString(uint8 *Str)
{
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	df 93       	push	r29
    244e:	cf 93       	push	r28
    2450:	00 d0       	rcall	.+0      	; 0x2452 <UART_recieveString+0xa>
    2452:	0f 92       	push	r0
    2454:	cd b7       	in	r28, 0x3d	; 61
    2456:	de b7       	in	r29, 0x3e	; 62
    2458:	9b 83       	std	Y+3, r25	; 0x03
    245a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    245c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    245e:	89 81       	ldd	r24, Y+1	; 0x01
    2460:	28 2f       	mov	r18, r24
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	8a 81       	ldd	r24, Y+2	; 0x02
    2466:	9b 81       	ldd	r25, Y+3	; 0x03
    2468:	8c 01       	movw	r16, r24
    246a:	02 0f       	add	r16, r18
    246c:	13 1f       	adc	r17, r19
    246e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <UART_recieveByte>
    2472:	f8 01       	movw	r30, r16
    2474:	80 83       	st	Z, r24
    2476:	0f c0       	rjmp	.+30     	; 0x2496 <UART_recieveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2478:	89 81       	ldd	r24, Y+1	; 0x01
    247a:	8f 5f       	subi	r24, 0xFF	; 255
    247c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	9b 81       	ldd	r25, Y+3	; 0x03
    2488:	8c 01       	movw	r16, r24
    248a:	02 0f       	add	r16, r18
    248c:	13 1f       	adc	r17, r19
    248e:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <UART_recieveByte>
    2492:	f8 01       	movw	r30, r16
    2494:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	8a 81       	ldd	r24, Y+2	; 0x02
    249e:	9b 81       	ldd	r25, Y+3	; 0x03
    24a0:	fc 01       	movw	r30, r24
    24a2:	e2 0f       	add	r30, r18
    24a4:	f3 1f       	adc	r31, r19
    24a6:	80 81       	ld	r24, Z
    24a8:	83 32       	cpi	r24, 0x23	; 35
    24aa:	31 f7       	brne	.-52     	; 0x2478 <UART_recieveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    24ac:	89 81       	ldd	r24, Y+1	; 0x01
    24ae:	28 2f       	mov	r18, r24
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	8a 81       	ldd	r24, Y+2	; 0x02
    24b4:	9b 81       	ldd	r25, Y+3	; 0x03
    24b6:	fc 01       	movw	r30, r24
    24b8:	e2 0f       	add	r30, r18
    24ba:	f3 1f       	adc	r31, r19
    24bc:	10 82       	st	Z, r1
}
    24be:	0f 90       	pop	r0
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	cf 91       	pop	r28
    24c6:	df 91       	pop	r29
    24c8:	1f 91       	pop	r17
    24ca:	0f 91       	pop	r16
    24cc:	08 95       	ret

000024ce <__udivmodsi4>:
    24ce:	a1 e2       	ldi	r26, 0x21	; 33
    24d0:	1a 2e       	mov	r1, r26
    24d2:	aa 1b       	sub	r26, r26
    24d4:	bb 1b       	sub	r27, r27
    24d6:	fd 01       	movw	r30, r26
    24d8:	0d c0       	rjmp	.+26     	; 0x24f4 <__udivmodsi4_ep>

000024da <__udivmodsi4_loop>:
    24da:	aa 1f       	adc	r26, r26
    24dc:	bb 1f       	adc	r27, r27
    24de:	ee 1f       	adc	r30, r30
    24e0:	ff 1f       	adc	r31, r31
    24e2:	a2 17       	cp	r26, r18
    24e4:	b3 07       	cpc	r27, r19
    24e6:	e4 07       	cpc	r30, r20
    24e8:	f5 07       	cpc	r31, r21
    24ea:	20 f0       	brcs	.+8      	; 0x24f4 <__udivmodsi4_ep>
    24ec:	a2 1b       	sub	r26, r18
    24ee:	b3 0b       	sbc	r27, r19
    24f0:	e4 0b       	sbc	r30, r20
    24f2:	f5 0b       	sbc	r31, r21

000024f4 <__udivmodsi4_ep>:
    24f4:	66 1f       	adc	r22, r22
    24f6:	77 1f       	adc	r23, r23
    24f8:	88 1f       	adc	r24, r24
    24fa:	99 1f       	adc	r25, r25
    24fc:	1a 94       	dec	r1
    24fe:	69 f7       	brne	.-38     	; 0x24da <__udivmodsi4_loop>
    2500:	60 95       	com	r22
    2502:	70 95       	com	r23
    2504:	80 95       	com	r24
    2506:	90 95       	com	r25
    2508:	9b 01       	movw	r18, r22
    250a:	ac 01       	movw	r20, r24
    250c:	bd 01       	movw	r22, r26
    250e:	cf 01       	movw	r24, r30
    2510:	08 95       	ret

00002512 <__prologue_saves__>:
    2512:	2f 92       	push	r2
    2514:	3f 92       	push	r3
    2516:	4f 92       	push	r4
    2518:	5f 92       	push	r5
    251a:	6f 92       	push	r6
    251c:	7f 92       	push	r7
    251e:	8f 92       	push	r8
    2520:	9f 92       	push	r9
    2522:	af 92       	push	r10
    2524:	bf 92       	push	r11
    2526:	cf 92       	push	r12
    2528:	df 92       	push	r13
    252a:	ef 92       	push	r14
    252c:	ff 92       	push	r15
    252e:	0f 93       	push	r16
    2530:	1f 93       	push	r17
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	ca 1b       	sub	r28, r26
    253c:	db 0b       	sbc	r29, r27
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	de bf       	out	0x3e, r29	; 62
    2544:	0f be       	out	0x3f, r0	; 63
    2546:	cd bf       	out	0x3d, r28	; 61
    2548:	09 94       	ijmp

0000254a <__epilogue_restores__>:
    254a:	2a 88       	ldd	r2, Y+18	; 0x12
    254c:	39 88       	ldd	r3, Y+17	; 0x11
    254e:	48 88       	ldd	r4, Y+16	; 0x10
    2550:	5f 84       	ldd	r5, Y+15	; 0x0f
    2552:	6e 84       	ldd	r6, Y+14	; 0x0e
    2554:	7d 84       	ldd	r7, Y+13	; 0x0d
    2556:	8c 84       	ldd	r8, Y+12	; 0x0c
    2558:	9b 84       	ldd	r9, Y+11	; 0x0b
    255a:	aa 84       	ldd	r10, Y+10	; 0x0a
    255c:	b9 84       	ldd	r11, Y+9	; 0x09
    255e:	c8 84       	ldd	r12, Y+8	; 0x08
    2560:	df 80       	ldd	r13, Y+7	; 0x07
    2562:	ee 80       	ldd	r14, Y+6	; 0x06
    2564:	fd 80       	ldd	r15, Y+5	; 0x05
    2566:	0c 81       	ldd	r16, Y+4	; 0x04
    2568:	1b 81       	ldd	r17, Y+3	; 0x03
    256a:	aa 81       	ldd	r26, Y+2	; 0x02
    256c:	b9 81       	ldd	r27, Y+1	; 0x01
    256e:	ce 0f       	add	r28, r30
    2570:	d1 1d       	adc	r29, r1
    2572:	0f b6       	in	r0, 0x3f	; 63
    2574:	f8 94       	cli
    2576:	de bf       	out	0x3e, r29	; 62
    2578:	0f be       	out	0x3f, r0	; 63
    257a:	cd bf       	out	0x3d, r28	; 61
    257c:	ed 01       	movw	r28, r26
    257e:	08 95       	ret

00002580 <_exit>:
    2580:	f8 94       	cli

00002582 <__stop_program>:
    2582:	ff cf       	rjmp	.-2      	; 0x2582 <__stop_program>
